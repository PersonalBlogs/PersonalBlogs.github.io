{"meta":{"title":"Hexo-Blog","subtitle":"","description":"","author":"「廖家龙_13176171912」","url":"http://example.com","root":"/"},"pages":[{"title":"「分类、标签」","date":"2020-09-07T08:06:00.000Z","updated":"2021-05-20T09:01:17.871Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"「网站信息」","date":"2020-11-28T15:37:27.000Z","updated":"2021-05-21T09:25:51.701Z","comments":true,"path":"网站信息/index.html","permalink":"http://example.com/%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF/index.html","excerpt":"","text":"❗️本站是一个博客类型的静态网站，部署在GitHub服务器上，有时候访问速度会比较慢❗️ 本站的主要目的是为了保存我学习iOS开发过程中所记的‘笔记’，我在不断完善网站的内容并把它打造成一个很简洁的网站 「首页」部分列出了本站所有的文章，并且是按照时间倒序排列的 「分类、标签」板块可以清晰的看出本站文章有哪些分类，有哪些标签，点击分类和标签可以跳转到对应内容 本站每篇文章都只属于一个分类下的一个标签，不存在一篇文章同属于多个分类、多个标签的情况 分类类似于一个文件夹，标签类似于该文件夹下的一个小文件夹，文章就是该小文件夹下的一个文件"},{"title":"六种经典排序","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:03:58.000Z","comments":true,"path":"未整理/六种经典排序.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E5%85%AD%E7%A7%8D%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F.html","excerpt":"","text":"求数组中的最大值/最小值/累加和、平均值 求用户输入的多个数的最大、最小值。。while循环 3个数由小到大排序*//任意输入3个整数，编程实现对这3个整数由小到大进行排序。*//*本实例使用scanf(“%d%d%d”,&amp;a,&amp;b,&amp;c)从键盘中获得任意3个数。在输入数据时，在两个数据之间以一个或多个空格间隔，也可以用Enter键、Tab键，不能用逗号作为两个数据间的分隔符。若用格式输入函数scanf(“%d,%d,%d”,&amp;a,&amp;b,&amp;c)*输入数据，两个数据之间要用“，”做间隔。 1234567891011121314151617181920212223#include&lt;stdio.h&gt;**int** main()&#123; **int** a,b,c,t; printf(“Please input a,b,c:\\n”); scanf(“%d%d%d”,&amp;a,&amp;b,&amp;c); **if**(a&gt;b)&#123; t&#x3D;a; a&#x3D;b; b&#x3D;t; &#125; **if**(a&gt;c)&#123; t&#x3D;a; a&#x3D;c; c&#x3D;t; &#125; **if**(b&gt;c)&#123; t&#x3D;b; b&#x3D;c; c&#x3D;t; &#125; printf(“The order of the number is:\\n”); printf(“%d,%d,%d”,a,b,c);&#125; 数组元素逆置： 直接插入排序*//*插入排序是把一个记录插入到已排序的有序序列中，使整个序列在插入该纪录后仍然有序。插入排序中较简单的一种方法是直接插入排序，其插入位置的确定方法是将待插入的记录与有序区中的各记录自右向左依次比较其关键字值的大小。 12345678910111213141516171819202122232425262728#include&lt;stdio.h&gt;**void** insort(**int** s[],**int** n)&#123; **int** i,j; **for**(i&#x3D;2;i&lt;&#x3D;n;i++)&#123; s[0]&#x3D;s[i]; j&#x3D;i-1; **while**(s[0]&lt;s[j])&#123; s[j+1]&#x3D;s[j]; j—; &#125; s[j+1]&#x3D;s[0]; &#125;&#125;**void** main()&#123; **int** a[11],I; printf(“please input ten numbers:\\n”); **for**(I&#x3D;1;i&lt;&#x3D;10;i++) scanf(“%d”,&amp;a[I]); printf(“原始顺序:\\n”); **for**(I&#x3D;1;i&lt;11;i++) printf(“%5d”,a[I]); insort(a,10); printf(“\\n 插入数据排序后顺序：\\n”); **for**(I&#x3D;1;i&lt;11;i++) printf(“%5d”,a[I]); printf(“\\n”);&#125; 希尔排序*//用希尔排序法对一组数据从小到大进行排序，数据分别为69，56，12，136，3，55，46，99，88，25.*//希尔排序是在直接插入排序的基础上做的改进，也就是将要排序的序列按固定增量分成若干组，等距离者在同一组中，然后再在组内进行直接插入排序。这里面的固定增量从nn/2开始，以后每次缩小到原来的一半。 1234567891011121314151617181920212223242526272829#include&lt;stdio.h&gt;**void** shsort(**int** s[],**int** n)&#123; **int** i,j,d; d&#x3D;n&#x2F;2; **while**(d&gt;&#x3D;1)&#123; **for**(I&#x3D;d+1;i&lt;&#x3D;n;i++)&#123; s[0]&#x3D;s[i]; j&#x3D;i-d; **while**((j&gt;0)&amp;&amp;(s[0]&lt;s[j]))&#123; s[j+d]&#x3D;s[j]; j&#x3D;j-d; &#125; s[j+d]&#x3D;s[0]; &#125; d&#x3D;d&#x2F;2; &#125;&#125;**void** main()&#123; **int** a[11],I; printf(“please input ten numbers:\\n”); **for**(I&#x3D;1;i&lt;&#x3D;10;i++) scanf(“%d”,&amp;a[I]); shsort(a,10); printf(“排序后的顺序是：\\n”); **for**(I&#x3D;1;i&lt;&#x3D;10;i++) printf(“%5d”,a[I]); printf(“\\n”);&#125; 冒泡排序*//用冒泡法对任意输入的10个数由小到大进行排序*//*冒泡法的基本思路是，如果要对n个数进行冒泡排序，那么要进行n-1趟比较，在第1趟比较中要进行n-1次两两比较，在第j趟中要进行n-j次两两比较。从这个基本思路中发现，趟数决定了两两比较的次数，这样就很容易将两个for*循环联系起来了。 12345678910111213141516171819202122#include&lt;stdio.h&gt;**void** main()&#123; **int** i,j,t,a[11]; printf(“please input ten numbers:\\n”); **for**(I&#x3D;1;i&lt;11;i++) scanf(“%d”,&amp;a[I]); **for**(I&#x3D;1;i&lt;10;i++) **for**(j&#x3D;1;j&lt;11;j++) **if**(a[j]&gt;a[j+1])&#123; t&#x3D;a[j]; a[j]&#x3D;a[j+1]; a[j+1]&#x3D;t; &#125; printf(“排序后的顺序是：\\n”); **for**(I&#x3D;1;i&lt;&#x3D;10;i++) printf(“%5d”,a[I]); printf(“\\n”);&#125; 快速排序*//用快速排序法对一组数据由小到大进行排序，数据分别为99，45，12，36，69，22，62，796，4，696*//快速排序是对冒泡排序的一种改进，主要的算法思想是在待排序的n个数据中取第一个数据作为基准值，将所有记录分为3组，使第一组中各数据值均小于或等于基准值，第二组做基准值的数据，第三组中各数据值均大于或等于基准值。这便实现了第一趟分割，然后再对第一组和第三组分别重复上述方法，以此类推，直到每组中只有一个记录为止。 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;stdio.h&gt;**void** qusort(**int** s[],**int** start,**int** end)&#123; **int** i,j; I&#x3D;start; j&#x3D;end; s[0]&#x3D;s[start]; **while**(I&lt;j)&#123; **while**(I&lt;j&amp;&amp;s[0]&lt;s[j]) j—; **if**(I&lt;j)&#123; s[I]&#x3D;s[j]; I++; &#125; **while**(I&lt;j&amp;&amp;s[I]&lt;&#x3D;s[0]) I++; **if**(I&lt;j)&#123; s[j]&#x3D;s[I]; j—; &#125; &#125; s[I]&#x3D;s[0]; **if**(start&lt;i) qusort(s,start,j-1); **if**(I&lt;end) qusort(s,j+1,end);&#125;**void** main()&#123; **int** a[11],I; printf(“please input ten numbers:\\n”); **for**(I&#x3D;1;i&lt;&#x3D;10;i++) scanf(“%d”,&amp;a[I]); qusort(a,1,10); printf(“排序后的顺序是：\\n”); **for**(I&#x3D;1;i&lt;&#x3D;10;i++) printf(“%5d”,a[I]); printf(“\\n”);&#125; 选择排序*//用选择排序法对一组数据由小到大进行排序，数据分别为526，36，2，369，56，45，78，92，125，52.*//选择排序的基本算法是从待排序的区间中经过选择和交换后选出最小的数值存放到a[0]中，再从剩余的未排序区间中经过选择和交换后选出最小的数值存放到a[1]中，a[1]中的数字仅大于a[0]，以此类推，即可实现排序。 123456789101112131415161718192021222324#include&lt;stdio.h&gt;**void** main()&#123; **int** i,j,t,a[11]; printf(“please input ten numbers:\\n”); **for**(I&#x3D;1;i&lt;11;i++) scanf(“%d”,&amp;a[I]); **for**(I&#x3D;1;i&lt;&#x3D;9;i++) **for**(j&#x3D;I+1;j&lt;&#x3D;10;j++) **if**(a[I]&gt;a[j])&#123; t&#x3D;a[I]; a[I]&#x3D;a[j]; a[j]&#x3D;t; &#125; printf(“排序后的顺序是：\\n”); **for**(I&#x3D;1;i&lt;&#x3D;10;i++) printf(“%5d”,a[I]); printf(“\\n”);&#125; [image:C7736FB2-872D-41A1-9CA3-D087519F454F-23019-0000F9CC713A9ECD/Pasted Graphic 22.png] 归并排序*//用归并排序法对一组数据由小到大进行排序，数据分别为695，458，362，789，12，15，163，23，2，986.*//归并是将两个或多个有序记录序列合并成一个有序序列。归并方法有多种，一次对两个有序记录序列进行归并，称为二路归并排序，也有三路归并排序及多路归并排序。本实例是二路归并排序，基本方法如下：*//*（1）将n个记录看成是n个长度为1的有序子表。*//（2）将两两相邻的有序子表进行归并。*//*（3）重复执行步骤（2），直到归并成一个长度为n*的有序表。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;stdio.h&gt;**void** merge(**int** r[],**int** s[],**int** x1,**int** x2,**int** x3)&#123; **int** i,j,k; I&#x3D;x1; j&#x3D;x2+1; k&#x3D;x1; **while**((I&lt;&#x3D;x2)&amp;&amp;(j&lt;&#x3D;x3)) **if**(r[I]&lt;&#x3D;r[j])&#123; s[k]&#x3D;r[I]; I++; k++; &#125; **else**&#123; s[k]&#x3D;r[j]; j++; k++; &#125; **while**(I&lt;&#x3D;x2) s[k++]&#x3D;r[I++]; **while**(j&lt;&#x3D;x3) s[k++]&#x3D;r[j++];&#125;**void** merge_sort(**int** r[],**int** s[],**int** m,**int** n)&#123; **int** p; **int** t[20]; **if**(m&#x3D;&#x3D;n) s[m]&#x3D;r[m]; **else**&#123; p&#x3D;(m+n)&#x2F;2; merge_sort(r,t,m,p); merge_sort(r,t,p+1,n); merge(t,s,m,p,n); &#125;&#125;**void** main()&#123; **int** a[11]; **int** I; printf(“please input ten numbers:\\n”); **for**(I&#x3D;1;i&lt;&#x3D;10;i++) scanf(“%d”,&amp;a[I]); merge_sort(a,a,1,10); printf(“排序后的顺序是：\\n”); **for**(I&#x3D;1;i&lt;&#x3D;10;i++) printf(“%5d”,a[I]); printf(“\\n”);&#125;"},{"title":"三种查找方法","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:03:46.000Z","comments":true,"path":"未整理/三种查找方法.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E4%B8%89%E7%A7%8D%E6%9F%A5%E6%89%BE%E6%96%B9%E6%B3%95.html","excerpt":"","text":"二分查找*//本实例采用二分查找法查找特定关键字的元素。要求用户输入数组长度，也就是有序表的数据长度，并输入数组元素和查找的关键字。程序输出查找成功与否，以及成功时关键字在数组中的位置。例如，在有序表11，13，18，28，39，56，69，89，98，122中查找关键字为89的元素。*//*二分查找就是折半查找，其基本思想是：首先选取表中间位置的记录，将其关键字与给定关键字key进行比较，若相等，则查找成功；若key值比该关键字值大，则要找的元素一定在右子表中，则继续对右子表进行折半查找；若key值比该关键字值小，则要找的元素一定在左子表中，继续对左子表进行折半查找。如此递推，直到查找成功或查找失败（查找范围为0*）。 123456789101112131415161718192021222324252627282930313233#include&lt;stdio.h&gt;**void** binary_search(**int** key,**int** a[],**int** n)&#123; **int** low,high,mid,count&#x3D;0,count1&#x3D;0; low&#x3D;0; high&#x3D;n-1; **while**(low&lt;high)&#123; count++; mid&#x3D;(low+high)&#x2F;2; **if**(key&lt;a[mid]) high&#x3D;mid-1; **else** **if**(key&gt;a[mid]) low&#x3D;mid+1; **else** **if**(key&#x3D;&#x3D;a[mid])&#123; printf(“查找成功！\\n查找%d次！a[%d]&#x3D;%d”,count,mid,key); count1++; **break**; &#125; &#125; **if**(count1&#x3D;&#x3D;0) printf(“查找失败！”);&#125; **int** main(**void**)&#123; **int** i,key,a[100],n; printf(“请输入数组长度：\\n”); scanf(“%d”,&amp;n); printf(“请输入数组元素：\\n”); **for**(I&#x3D;0;i&lt;n;i++) scanf(“%d”,&amp;a[i]); printf(“请输入你想查找的元素：\\n”); scanf(“%d”,&amp;key); binary_search(key,a,n); printf(“\\n”);&#125; 分块查找*//*分块查找也称为索引顺序查找，要求将待查的元素均匀的分成块，块间按大小排序，块内不排序，所以要建立一个块的最大（或最小）关键字表，成为索引表。 123456789101112131415161718192021222324252627282930313233343536373839404142#include&lt;stdio.h&gt;**struct** index&#123; **int** key; **int** start; **int** end;&#125;index_table[4];**int** block_search(**int** key,**int** a[])&#123; **int** i,j; I&#x3D;1; **while**(I&lt;&#x3D;3&amp;&amp;key&gt;index_table[I].key) I++; **if**(I&gt;3) **return** 0; j&#x3D;index_table[I].start; **while**(j&lt;&#x3D;index_table[I].end&amp;&amp;a[j]!&#x3D;key) j++; **if**(j&gt;index_table[I].end) j&#x3D;0; **return** j;&#125;**void** main()&#123; **int** i,j&#x3D;0,k,key,a[16]; printf(“请输入15个数:\\n”); **for**(I&#x3D;1;i&lt;16;i++) scanf(“%d”,&amp;a[I]); **for**(I&#x3D;1;i&lt;&#x3D;3;i++)&#123; index_table[I].start&#x3D;j+1; j&#x3D;j+1; index_table[I].end&#x3D;j+4; j&#x3D;j+4; index_table[I].key&#x3D;a[j]; &#125; printf(“请输入你想查找的元素：\\n”); scanf(“%d”,&amp;key); k&#x3D;block_search(key,a); **if**(k!&#x3D;0) printf(“查找成功，其位置是：%d\\n,k”); **else** printf(“查找失败！”);&#125; 哈希查找*//编程实现哈希查找。要求如下：已知哈希表长度为11，哈希函数为H(key)=key%11,随机产生待散列的小于50的8*个元素，同时采用线性探测仔散列的方法处理冲突。任意输入要查找的数据，无论是否找到均给出提示信息。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;stdio.h&gt;#include&lt;time.h&gt;#define Max 11#define N 8**int** hashtable[Max];**int** func(**int** value)&#123; **return** value % Max;&#125;**int** search(**int** key)&#123; **int** pos,t; pos&#x3D;func(key); t&#x3D;pos; **while**(hashtable[t]!&#x3D;key&amp;&amp;hashtable[t]!&#x3D;-1)&#123; t&#x3D;(t+1)%Max; **if**(pos&#x3D;&#x3D;t) **return** -1; &#125; **if**(hashtable[t]&#x3D;&#x3D;-1) **return** **NULL**; **else** **return** t;&#125;**void** creathash(**int** key)&#123; **int** pos,t; pos&#x3D;func(key); t&#x3D;pos; **while**(hashtable[t]!&#x3D;-1)&#123; t&#x3D;(t+1)%Max; **if**(pos&#x3D;&#x3D;t)&#123; printf(“哈希表已满\\n”); **return**; &#125; &#125; hashtable[t]&#x3D;key;&#125;**void** main()&#123; **int** flag[50]; **int** i,j,t; **for**(I&#x3D;0;i&lt;Max;i++) hashtable[I]&#x3D;-1; **for**(I&#x3D;0;i&lt;50;i++) flag[I]&#x3D;0; srand((**unsigned** **long**)time(0)); *&#x2F;&#x2F;*哈希函数的构造方法常用的有*5*种，分别是数字分析法、平方取中法、分段叠加、伪随机数法和余数法，其中余数法比较常用。 i&#x3D;0; *&#x2F;&#x2F;*虽然通过构造好的哈希函数可以减少冲突，但冲突是不可能完全避免的，所以就相应的产生了避免哈希冲突的常用的*4*种方法，分别是开放定址法 **while**(i!&#x3D;N)&#123; *&#x2F;&#x2F;*（包括线性探测再散列和二次探测再散列）、链地址法、再哈希法和建立公共溢出区。 t&#x3D;rand()%50; *&#x2F;&#x2F;*开放定址法中的线性探测再散列比较常用，该方法的特点是在冲突发生时，顺序查看表中的下一单元，直到找出一个空单元或查遍全表。 **if**(flag[t]&#x3D;&#x3D;0)&#123; creathash(t); printf(“%2d:”,t); **for**(j&#x3D;0;j&lt;Max;j++) printf(“(%2d)”,hashtable[j]); printf(“\\n”); flag[t]&#x3D;1; I++; &#125; &#125; printf(“请输入你想查找的元素：”); scanf(“%d”,&amp;t); **if**(t&gt;0&amp;&amp;t&lt;50)&#123; I&#x3D;search(t); **if**(I!&#x3D;-1) printf(“查找成功！其位置是:%d\\n”,i); **else** printf(“查找失败！”); &#125; **else** printf(“输入有误！”);&#125;"},{"title":"可选项：","date":"2019-12-29T16:00:00.000Z","updated":"2021-05-20T14:49:48.394Z","comments":true,"path":"未整理/可选项：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E5%8F%AF%E9%80%89%E9%A1%B9%EF%BC%9A.html","excerpt":"","text":"定义变量、常量如果需要指定准确的类型 可选项：一个变量，可以为本身的类型，也可以为nil 可选项不能直接计算：每次写!的时候，都需要程序员思考，是不是有可能为nil"},{"title":"控制流：","date":"2019-12-28T16:00:00.000Z","updated":"2021-05-20T14:49:37.127Z","comments":true,"path":"未整理/控制流：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%8E%A7%E5%88%B6%E6%B5%81%EF%BC%9A.html","excerpt":"","text":"———————— If和三目if letguardswitch ———————— If和三目: if let、guard: 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556**import** UIKit**class** ViewController: UIViewController &#123; **override** **func** viewDidLoad() &#123; **super**.viewDidLoad() &#x2F;&#x2F; Do any additional setup after loading the view. demo1() demo2() demo3() &#125; &#x2F;&#x2F;一： **func** demo1()&#123; **let** oName: String? &#x3D; “张三” **let** oAge: Int? &#x3D; 20 **if** oName !&#x3D; **nil** &amp;&amp; oAge !&#x3D; **nil**&#123; print(“Mr” + oName! + “—“ + String(oAge!)) &#125; &#125; &#x2F;&#x2F;二： &#x2F;&#x2F;if let可以设置数值，进入分支后，name可以保证一定有值 &#x2F;&#x2F;if let语句中不能使用&amp;&amp; ||条件 **func** demo2()&#123; **let** oName: String? &#x3D; “张三” **let** oAge: Int? &#x3D; 20 **if** **let** name &#x3D; oName , **let** age &#x3D; oAge&#123; print(“Mr” + name + “—“ + String(age)) &#125; &#125; &#x2F;&#x2F;三：guard是和if let相反的指令 **func** demo3()&#123; **let** oName: String? &#x3D; “张三” **let** oAge: Int? &#x3D; 20 **guard** **let** name &#x3D; oName **else**&#123; print(“name &#x3D; nil”) **return** &#125; **guard** **let** age &#x3D; oAge **else**&#123; print(“age &#x3D; nil”) **return** &#125; &#x2F;&#x2F;代码执行到此，name和age一定有值 print(“Mr” + name + “—“ + String(age)) &#125;&#125;"},{"title":"常量和变量以及自动推导","date":"2019-12-30T16:00:00.000Z","updated":"2021-05-20T14:49:58.726Z","comments":true,"path":"未整理/常量和变量以及自动推导.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E5%B8%B8%E9%87%8F%E5%92%8C%E5%8F%98%E9%87%8F%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%8A%A8%E6%8E%A8%E5%AF%BC.html","excerpt":"","text":"Let定义常量、var定义变量【整数默认是Int，小数默认是Double】let x=20var y=1.5 自动推导：会根据设置数值的右侧代码，推断常量、变量的类型【但是在swift中任何时候都不会做隐式转换，任何两个类型不同的变量或者常量不允许直接去计算】let x=20let y=1.5let r1=x+Int(y)print(r1)"},{"title":"Spooling系统","date":"2020-10-13T16:00:00.000Z","updated":"2021-05-20T09:54:42.565Z","comments":true,"path":"未整理/操作系统原理(未整理)/Spooling系统.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/Spooling%E7%B3%BB%E7%BB%9F.html","excerpt":"","text":"Spooling系统： 设备分配方法： 1）独占型设备的分配：独占型设备包括所有的字符型设备，任意时间段内最多只能被一个进程占用；使用时，进程首先向系统申请，可能进入阻塞状态【当设备可用时，唤醒一个等待进程；使用完毕以后，进程必须释放设备】 进程使用独占设备的过程：申请、使用、释放【从进程申请成功，直到释放用完之前，独占设备】1）进程申请设备2）系统分配设备3）进程发送使用命令4）系统将转到设备驱动模块完成一次I/O传输5）进程释放设备6）系统回收设备 2）共享型设备的分配：共享型设备包括所有块型设备【I/O传输单位：块；宏观上一个共享型设备可以被多个进程同时占用；微观上多个设备交替使用同一设备；进程使用这类设备时，无需申请或释放设备，也不存在某个进程占用设备的问题】 进程使用共享型设备不需要申请，当然也就不存在占用或释放设备的问题 但是I/O期间只能有一个进程使用设备，因此进程使用共享型设备之前，有一个隐含的申请命令；使用完毕以后，有一个隐含的释放命令，以实现一次基本I/O传输期间的排他性，保证操作的正常进行 使用共享型设备的过程中，进程完全有可能进入阻塞等待状态 3）虚拟分配：当进程需要与独占设备交换信息时，就采用虚拟技术将与该独占设备所对应的虚拟设备（部分辅存）分配给它 虚拟技术：在一类物理设备上模拟另一类物理设备的技术，借助辅存部分区域模拟独占设备，将独占设备转化为共享设备 虚拟设备：用来模拟独占设备的部分辅存称为虚拟设备，虚拟独占设备 输入井：模拟输入设备的辅存区域（磁盘上）输出井：模拟输出设备的辅存区域（磁盘上） 内存中开辟的存储区域：输入缓冲区【暂存输入数据，以后再传送到输入井】、输出缓冲区【暂存输出数据，以后再传送到输出设备】 SPOOLing系统是虚拟技术和虚拟分配的实现（Simultaneaus Periphernal Operations OnLine，外部设备同时联机操作，假脱机输入/输出操作） 当用户进程需要数据时，直接从输入井读入所需数据（提前读）用户进程将输出数据先传送到输出井，当输出设备空闲时，再将输出井的数据送到输出设备上（延后写） 输入监控进程模拟脱机输入的卫星机，将用户要求的数据从输入设备通过输入缓冲区再传送输入井，当用户进程需要数据时，直接从输入井读入所需数据 输出监控进程模拟脱机输出的卫星机，用户进程将输出数据从内存先传送到输出井，当输出设备空闲时，再将输出井的数据送到输出设备上 SPOOLing系统原理：1）任务执行前：预先将程序和数据输入到输入井中2）任务运行时：使用数据时，从输入井中取出3）任务运行时：输出数据时，把数据写入输出井4）任务运行完：外设空闲时输出全部数据和信息 “提高”了I/O速度，将独占设备改造为“共享”设备，实现了虚拟设备功能"},{"title":"内存管理功能","date":"2020-10-18T16:00:00.000Z","updated":"2021-05-20T09:52:21.535Z","comments":true,"path":"未整理/操作系统原理(未整理)/内存管理功能.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD.html","excerpt":"","text":"内存管理功能： 存储器功能需求：1）容量足够大2）速度足够快3）信息永久保存4）多道程序并行 多道程序并行带来的问题：1）共享：代码和数据共享，节省内存2）保护：不允许内存中的程序相互间非法访问 存储管理的功能： 1）地址映射(地址重定位/地址重映射)：把程序中的地址（虚拟地址/虚地址/逻辑地址）变换成内存的真实地址（实地址/物理地址）的过程 方式：a.固定地址映射：编程或编译时确定逻辑地址和物理地址映射关系（特点：程序加载时必须放在指定的内存区域，容易产生地址冲突，运行失败） b.静态地址映射：程序装入时由操作系统完成逻辑地址到物理地址的映射 特点：1.程序运行之前确定映射关系2.程序装入后不能移动，如果移动必须放回原来位置3.程序占用连续的内存空间 c.动态地址映射 2）虚拟存储解决的问题：1）程序过大或过多时，内存不够，不能运行2）多个程序并发时地址冲突，不能运行 3）内存分配：为程序运行分配足够的内存空间需要解决的问题：1）放置策略：程序调入内存时将其放置在哪个/哪些内存区2）调入策略：何时把要运行的代码和要访问的数据调入内存3）淘汰策略：内存空间不够时，迁出/淘汰哪些代码或数据以腾出内存空间 4）存储保护：保证在内存中的多道程序只能在给定的存储区域内活动并互不干扰【防止访问越界，防止访问越权】"},{"title":"同步和P-V操作","date":"2020-10-23T16:00:00.000Z","updated":"2021-05-20T09:53:05.051Z","comments":true,"path":"未整理/操作系统原理(未整理)/同步和P-V操作.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E5%90%8C%E6%AD%A5%E5%92%8CP-V%E6%93%8D%E4%BD%9C.html","excerpt":"","text":"同步和P-V操作： 进程的互斥关系：多个进程由于共享了独占性资源，必须协调各进程对资源的存取顺序，确保没有任何两个或以上的进程同时进行存取操作互斥和资源共享相关资源：临界资源存取操作区域：临界区 进程的同步关系：若干合作进程为了完成一个共同的任务，需要相互协调运行步伐，一个进程开始某个操作之前必须要求另一个进程已经完成某个操作，否则前面的进程只能等待【另一解释：合作进程中某些操作之间需要满足某种先后关系或某个操作能否进行需要满足某个前提条件，否则只能等待】 互斥关系属于特殊的同步关系 信号灯是一种卓有成效的进程同步机制 信号灯用于进程同步的基本思想：进程在运行过程受信号灯状态控制，并能改变信号灯状态【信号灯的状态可以阻塞或唤醒进程；信号灯的状态可以被进程改变】 信号灯的两个操作：1）P操作（函数或过程，P(S,q)）2）V操作（函数或过程，V(S,q)）————————————— P-V操作解决互斥问题：实质是实现对临界区的互斥访问，允许最多一个进程处于临界区 应用过程（S的初值设置要合理）：1）进入临界区之前先执行P操作（可能阻塞当前进程）2）离开临界区之后再执行V操作（可能唤醒某个进程）————————————— P-V操作解决同步问题： ——————————— 经典同步问题： 生产者和消费者问题"},{"title":"临界区和锁","date":"2020-10-24T16:00:00.000Z","updated":"2021-05-20T09:52:11.450Z","comments":true,"path":"未整理/操作系统原理(未整理)/临界区和锁.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E4%B8%B4%E7%95%8C%E5%8C%BA%E5%92%8C%E9%94%81.html","excerpt":"","text":"临界区和锁： 临界资源：一次只允许一个进程独占访问（使用）的资源（共享变量i）临界区：进程中访问临界资源的程序段 临界区和临界资源的访问特点：1）具有排他性2）并发进程不能同时进入临界区 设计临界区访问机制的四个原则：1）忙则等待：当临界区忙时，其他进程必须在临界区外等待2）空闲让进：当无进程处于临界区时，任何有权进程可进入临界区3）有限等待：进程进入临界区的请求应在有限时间内得到满足4）让权等待：等待进程放弃CPU（让其他进程有机会得到CPU） 锁机制：1）基本原理：设置一个“标志”S，表明临界资源可用还是不可用2）上锁操作：进入临界区之前检查标志是否可用，若为不可用状态，进程在临界区外等待；若为可用状态，访问临界资源，且将标志修改为不可用3）开锁操作：退开临界区时将标志修改为可用状态"},{"title":"FAT文件系统","date":"2020-10-09T16:00:00.000Z","updated":"2021-05-20T09:54:31.771Z","comments":true,"path":"未整理/操作系统原理(未整理)/FAT文件系统.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/FAT%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.html","excerpt":"","text":"FAT文件系统： FAT：File Allocation Table FAT文件系统：FAT12、FAT16、FAT32 文件分配表（FAT）： 文件分配表的缺点：1）读文件时，先读FAT，影响使用效率2）FAT要占用存储空间，存储容量越大，存储块越多，FAT元素越多，且元素位宽越长，占用更多额外存储空间 扇区：磁盘上最小可寻址存储单元（512字节） 簇（cluster）=存储块，设备的最小存取单元，固定数量的扇区 360KB磁盘：簇=2个扇区（1024字节）10MB硬盘：簇=8个扇区（4096字节）2GB硬盘：簇=64个扇区（32KB） FAT16文件系统指的是N=16： FAT16文件系统：以簇为单位管理磁盘，簇是扇区的倍数，是2的次幂，最大64扇区【扇区512B，簇32KB（64个扇区）】"},{"title":"存储管理","date":"2020-10-19T16:00:00.000Z","updated":"2021-05-20T09:51:08.332Z","comments":true,"path":"未整理/操作系统原理(未整理)/存储管理.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E5%AD%98%E5%82%A8%E7%AE%A1%E7%90%86.html","excerpt":"","text":"存储管理： ——————————————— 6-1：内存管理功能 6-2：物理内存管理 6-2-1.分区内存管理 6-2-2.分区放置策略 6-2-3.内存覆盖技术 6-2-4.内存交换技术 6-2-5.内存碎片 6-3：虚拟内存管理 6-3-1.页式虚拟内存管理概念 6-3-2.页表和页式地址映射 6-3-3.快表技术和页面共享技术 6-3-4.缺页中断 6-3-5.页面淘汰策略 6-3-6.缺页因素与页式系统缺点 6-3-7.段式和段页式虚拟存储 ———————————————"},{"title":"操作系统概述","date":"2020-10-30T16:00:00.000Z","updated":"2021-05-20T09:50:44.603Z","comments":true,"path":"未整理/操作系统原理(未整理)/操作系统概述.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0.html","excerpt":"","text":"————————————— 1-1：操作系统功能和定义 1-2：操作系统发展历史 1-3：典型操作系统类型 —————————————操作系统功能和定义： 基本功能：1）提供操作界面2）控制程序运行3）管理系统资源4）配置系统参数5）监控系统状态6）工具软件集合 操作系统的功能：1）进程管理（CPU管理） a.进程控制：创建，暂停，唤醒，撤销 b.进程调度：调度策略，优先级 c.进程通信：进程间通信2）内存管理 a.内存分配 b.内存共享 c.内存保护 d.虚拟内存3）设备管理 a.设备的分配和调度 b.设备无关性作 c.设备传输控制 d.设备驱动4）文件管理 a.存储空间管理 b.文件的操作 c.目录的操作 d.文件和目录的存取权限管理 操作系统的定义：操作系统是一个大型系统程序，提供用户接口，方便用户控制计算机；负责为应用程序分配和调度软硬件资源，并控制与协调应用程序并发活动，帮助用户存取和保护信息 ————————————————操作系统发展历史： 用户需求提升和硬件技术进步是操作系统发展的两大动力 速度、容量、稳定性、可靠性都得到了逐步提高 第一台数字电子计算机ENIAC 1）手工操作（没有操作系统）电子管时代【1946～1955】结构特点： 硬件：电子管、接线面板（按钮、开关） 程序：二进制程序，打孔：纸带和卡片使用特点：程序准备、启动、结束要手工处理，繁琐耗时缺点：效率低，CPU有效运行时间极低；用户独占、缺少交互 2）单道批处理系统工作过程：1）管理员事先将多个作业输入到磁盘形成队列2）操作系统依次自动处理队列中的每个作业（装入-运行-撤出），程序的装入和撤出自动完成，效率高3）运行完毕，通知用户取结果工作特点：1）批量：作业队列2）自动：识别作业，装入和撤出3）单道：依次、串行背景：1）晶体管时代【1955～1965】2）1955年，IBM推出了第一台晶体管计算机：典型机型7094 结论：外设与CPU交替空闲和忙碌，CPU和外设利用效率低 3）多道批处理系统1）定义：在内存中存放多道程序，当某道程序因为某种原因（例执行I/O操作时）不能继续运行而放弃CPU时，操作系统便调度另一程序投入运行。这样可以使CPU尽量忙碌，提高系统效率2）提高系统CPU利用率3）提高系统吞吐量4）特点：多道，内存同时存放多道程序；并行（宏观上）；串行（微观上）5）缺点：作业处理时间长；交互能力差；运行过程不稳定 4）分时操作系统背景：1）事务性任务的涌现：交互性高，响应快速2）要求支持多任务/多用户3）多终端计算机 分时技术：概念：1）主机以很短的“时间片”为单位，把CPU轮流分配给每个终端使用，直到全部作业被运行完2）由于时间片很短，在终端数量不多的情况下，每个终端都能很快重新获得CPU，使得每个终端都能得到及时响应（等待周期=时间片*终端数量）分时系统的特点：1）多路调制性：多用户联机使用同一台计算机2）独占性：用户感觉独占计算机3）交互性：及时响应用户的请求 —————————————————————典型操作系统类型："},{"title":"文件系统","date":"2020-10-12T16:00:00.000Z","updated":"2021-05-20T09:53:37.783Z","comments":true,"path":"未整理/操作系统原理(未整理)/文件系统.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.html","excerpt":"","text":"文件系统： ———————————————— 8-1.文件系统概念8-2.文件物理结构8-3.FAT文件系统8-4.文件存储和目录 ————————————————"},{"title":"文件物理结构","date":"2020-10-10T16:00:00.000Z","updated":"2021-05-20T09:53:26.884Z","comments":true,"path":"未整理/操作系统原理(未整理)/文件物理结构.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E6%96%87%E4%BB%B6%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84.html","excerpt":"","text":"文件物理结构： 类型： 1）连续文件 连续文件的特点：文件建立时给出文件最大长度并登记文件起始位置 优点：1）简单2）支持顺序存取和随机存取3）顺序存取速度快：所需磁盘寻道次数和寻道时间最少 缺点：1）文件不易动态增长：预留空间过大造成浪费，过小又不合适，需要重新分配和移动2）不利于文件插入和删除3）外部碎片问题 2）索引结构：文件存放在不连续的存储块中，建立索引表记录文件逻辑块和物理存储块的对应关系 索引表单独放在存储块中 索引文件的特点：1）文件=索引区+数据区2）先访问索引，再访问数据3）支持顺序存取和随机存取4）支持文件动态增长、插入、删除 3）串联文件 特点：1）适用于顺序存取，随机存取较为困难2）提高了磁盘空间利用率，不存在外部碎片问题3）有利于文件动态扩充、插入和删除 缺点：1）存取速度慢，不适用于随机存取2）可靠性问题：若next指针出错，则文件访问失败3）next指针占用一定的空间 串联文件的应用：FAT文件系统"},{"title":"文件系统概念","date":"2020-10-11T16:00:00.000Z","updated":"2021-05-20T09:53:48.450Z","comments":true,"path":"未整理/操作系统原理(未整理)/文件系统概念.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%A6%82%E5%BF%B5.html","excerpt":"","text":"文件系统概念： 文件是计算机信息存取的一种重要组织形式 文件由若干信息项有序构成，信息项可以是字节，可以是结构化数据用户通过读写指针来存取文件的信息项文件具有文件名，用户通过文件名存取文件 文件的分类： 按照文件的用途分：1）系统文件：包括操作系统的可执行程序和数据文件，这种文件不对用户开放，仅供系统使用2）库文件：系统为用户提供的各种标准函数库和实用程序等，用户只能使用这些文件，而无权对其进行修改3）用户文件：用户创建的文件，如用户可执行程序，源程序，数据文件等，这种文件的使用和修改权均属于用户 按照文件的操作权限分：1）只读文件：只允许进行读操作2）读写文件：允许进行读写操作3）不保护文件：不作任何操作限制 按照文件的性质分：1）普通文件：指一般的用户文件/系统文件2）目录文件：记录目录里面的文件列表信息（文件名，文件存放地址，文件属性）3）设备文件：把设备作为文件管理和使用 文件属性：指定文件的类型、操作特性和存取保护等一组信息，文件属性存放在文件所在目录的目录文件中 MS-DOS系统中，文件属性占目录项的一个字节【00000001：只读属性；00000010：隐藏属性】 文件系统定义：负责管理文件的机构称为文件系统 功能：负责文件的创立、撤销、读写、修改、复制和存取控制等，并管理存放文件的存储设备 文件系统的目标是让用户以文件名来存取文件 文件的结构： 文件的逻辑结构：【现代操作系统中文件都是流式文件，由应用程序解释和处理文件】 文件的存取方法：1）顺序存取2）随机存取"},{"title":"线程（Thread）","date":"2020-10-25T16:00:00.000Z","updated":"2021-05-20T09:54:10.615Z","comments":true,"path":"未整理/操作系统原理(未整理)/线程（Thread）.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E7%BA%BF%E7%A8%8B%EF%BC%88Thread%EF%BC%89.html","excerpt":"","text":"线程（Thread）： 1）线程是可由CPU直接运行的实体2）一个进程可以创建多个线程3）多个线程共享CPU可以实现并发运行 单线程程序：整个进程只有一个线程，Windows程序缺省只有一个线程（主线程，main线程） 多线程程序：整个进程至少有2个线程，主线程和至少一个用户线程 线程技术典型适用场景：1）程序的多个功能需要并发运行2）提高窗口程序的交互性3）改善程序结构4）多核CPU上的应用，充分发挥多核性能 使用线程的麻烦：1）程序难以调试2）并发过程难以控制3）线程安全问题"},{"title":"物理内存管理","date":"2020-10-17T16:00:00.000Z","updated":"2021-05-20T09:53:58.997Z","comments":true,"path":"未整理/操作系统原理(未整理)/物理内存管理.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html","excerpt":"","text":"物理内存管理： ————————————————— 分区内存管理： 分区存储管理方式： 1）单一区存储管理(不分区存储管理)：用户区不分区，完全被一个程序占用（DOS） 优点：简单，不需要复杂硬件支持，适于单用户单任务OS 缺点：程序运行占用整个内存，即使小程序也是如此，内存浪费，利用率低 2）分区存储管理：把用户区内存划分为若干大小不等的分区，供不同程序使用，适合单用户单任务系统 a.固定分区：把内存固定的划分为若干个大小不等的分区供各个程序使用，每个分区的大小和位置都固定，系统运行期间不再重新划分 分区表：记录分区的位置、大小和使用标志固定分区的使用特点：1）在程序装入前，内存已被分区，不再改变2）每个分区大小不同，适应不同大小的程序3）系统要维护分区表 b.动态分区：在程序装入时创建分区，使分区的大小刚好与程序的大小相等 特点：分区动态建立————————————————— 分区放置策略： 分区的分配： 放置策略（空闲区表排序原则）：1）首次适应算法：按空闲区位置（首址）递增排序2）按空闲区位置（首址）递减排序3）最佳适应算法：按空闲区大小的递增排序4）最坏适应算法：按空闲区大小的递减排序 分区的回收：回收程序释放分区（释放区），登记到空闲区表中，以便再分配——————————————— 内存覆盖技术： 覆盖的缺点：1）编程复杂：程序员划分程序模块并确定覆盖关系2）程序执行时间长：从外存装入内存耗时———————————————— 内存交换技术： ———————————————— 内存碎片： 碎片问题： 动态分区的缺点：容易产生内存碎片（内存反复分配和分割）【其中最佳适应法最容易产生碎片，最坏适应法最不容易产生碎片】"},{"title":"死锁","date":"2020-10-21T16:00:00.000Z","updated":"2021-05-20T09:52:54.134Z","comments":true,"path":"未整理/操作系统原理(未整理)/死锁.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E6%AD%BB%E9%94%81.html","excerpt":"","text":"死锁： ————————————— 4-1：死锁概念 4-2：死锁起因 4-3：死锁预防策略 ————————————— 死锁：两个或多个进程无限期的等待永远不会发生的条件的一种系统状态（结果每个进程都永远阻塞） 另一个定义：在两个或多个进程中，每个进程都持有某种资源，但又继续申请其他进程已持有的某种资源。此时每个进程都拥有其运行所需的一部分资源，但是又都不够，从而每个进程都不能向前推进，陷于阻塞状态，这种状态称死锁—————————————— 死锁的起因：1）系统资源有限：资源数目不足，进程对资源的竞争而产生死锁2）并发进程的推进顺序不当：进程请求资源和释放资源的顺序不当，导致死锁3）不正确的P-V操作导致死锁 A，B尽管并发争用i，j，且发生了阻塞，但是没有死锁不正确的推进顺序发生死锁：不正确的P-V操作也可能会带来死锁：生产者和消费者问题 死锁的一些结论：1）参与死锁的进程至少是两个，两个或以上进程才会出现死锁2）参与死锁的进程至少有两个已经占有资源3）参与死锁的所有进程都在等待资源4）参与死锁的进程是当前系统中所有进程的子集5）死锁会浪费大量系统资源，甚至导致系统崩溃—————————————— 死锁的必要条件：1）互斥条件：进程互斥使用资源，，资源具有独占性2）不剥夺条件：进程在访问完资源前不能被其他进程强行剥夺3）部分分配条件：进程边运行边申请资源，临时需要临时分配（区别于全部分配）4）环路条件：多个进程构成环路，环中每个进程已占用的资源被前一进程申请，而自己所申请资源又被环中后一进程占用着 解决死锁的策略： 1）预防死锁：通过设置某些限制条件，破坏死锁四个必要条件中的一个或多个，来防止死锁 较易实现，早期广泛使用，缺点：由于限制太严格，导致资源利用率和吞吐量降低 2）避免死锁：不事先采取限制去破坏产生死锁的条件，而是在资源分配过程中，用某种方法去评估若分配资源是否会让系统进入死锁状态，若是，则拒绝此次分配资源，从而避免死锁的发生（银行家算法） 只需要较弱的限制条件，可获得较高的资源利用率和系统吞吐量，缺点：实现较难 3）检测和恢复死锁：允许死锁发生，但可通过检测机制及时检测出死锁状态，并精确确定与死锁有关的进程和资源，然后采取适当措施，将系统中已发生的死锁清除，将进程从死锁状态解脱出来 缺点：1）检测方法复杂，实现难度大2）恢复方法靠人工，撤销一些进程，回收资源再分配 Windows，Linux采用的死锁解决方案：鸵鸟策略"},{"title":"操作系统逻辑结构","date":"2020-10-29T16:00:00.000Z","updated":"2021-05-20T09:50:58.366Z","comments":true,"path":"未整理/操作系统原理(未整理)/操作系统逻辑结构.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84.html","excerpt":"","text":"———————————— 2-1：操作系统的逻辑结构 2-2：CPU的态 2-3：中断机制 ———————————— 操作系统的逻辑结构： 逻辑结构：OS的设计和实现思路逻辑结构的种类：1）整体式结构2）层次式结构3）微内核结构（客户/服务器结构，Client/Server） 整体式结构：以模块为基本单位构建 特点：1）模块设计、编码和调试独立2）模块调用自由3）模块通信多以全局变量形式完成缺点：信息传递随意，维护和更新困难 层次结构： 分层原则：1）硬件相关—最底层2）外部特性—最外层3）中间层—调用次序或消息传递次序4）共性的服务—较低层5）活跃功能—较低层优点：1）结构清晰，避免循环调用2）整体问题局部化，系统的正确性容易保证3）有利于操作系统的维护、扩充、移植 微内核结构： ——————————————— CPU的态： 支持操作系统的最基本的硬件结构：CPU、内存、中断、时钟 CPU态：CPU的工作状态，对资源和指令使用权限的描述 态的分类：1）核态：能够访问所有资源和执行所有指令；管理程序/OS内核2）用户态（目态）：仅能访问部分资源，其他资源受限；用户程序3）管态：介于核态和用户态之间 用户态向核态转换：1）用户请求OS提供服务2）发生中断3）用户进程产生错误（内部中断）4）用户态企图执行特权指令 核态向用户态转换的情形：一般是执行中断返回（IRET） 硬件按“态”来区分CPU的状态OS按“进程”来区分CPU的状态 存储器：存储程序和数据的部件分类：1）按存储器（半导体存储器）读写工作方式：RAM、ROM2）按存储元的材料：半导体存储器（常作主存）；磁存储器（磁带、磁盘）；光存储器（光盘）3）按与CPU的联系：主存（直接和CPU交换信息），辅存（不能直接和CPU交换信息） —————————————— 中断机制： 中断定义：1）指CPU对突发的外部事件的反应过程或机制2）CPU收到外部信号（中断信号）后，停止当前工作，转去处理该外部事件，处理完毕后回到原来工作的中断处（断点）继续原来的工作引入中断的目的：1）实现并发活动2）实现实时处理3）故障自动处理 中断源：引起系统中断的事件 中断类型：1）强迫性中断：程序没有预期：I/O、外部中断自愿中断：程序有预期的：执行访管指令2）外中断（中断）：由CPU外部事件引起：I/O、外部事情内中断（俘获）：由CPU内部事件引起：访管中断、程序中断 外中断：1）不可屏蔽中断：中断的原因很紧要，CPU必须响应2）可屏蔽中断：中断原因不很紧要，CPU可以不响应 断点：程序中断的地方，将要执行的下一指令的地址 现场：程序正确运行所依赖的信息集合（相关寄存器）现场的两个处理过程：1）现场的保护：进入中断服务程序之前，要先把现场保存在栈里2）现场的恢复 中断响应过程：1）识别中断源2）保护断点和现场3）装入中断服务程序的入口地址（CS：IP）4）进入中断服务程序5）恢复现场和断点6）中断返回：IRET 中断响应的实质：1）交换指令执行地址2）交换CPU的态 中断响应的工作：1）现场保护和恢复2）参数传递（通信）"},{"title":"文件存储和目录","date":"2020-10-08T16:00:00.000Z","updated":"2021-05-20T09:53:16.349Z","comments":true,"path":"未整理/操作系统原理(未整理)/文件存储和目录.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E5%92%8C%E7%9B%AE%E5%BD%95.html","excerpt":"","text":"文件存储和目录： 存储空间管理功能：记录磁盘使用情况，管理和分配、回收存储空间 记录磁盘空闲块的方法： 1）空闲文件目录 空闲文件：把连续空闲区看成一个特殊文件，由多个连续空闲块组成 空闲文件目录：1）所有空闲文件代表存储设备全部空闲空间2）为空闲文件建立的专门目录：空闲文件目录3）每个表项对应一个空闲文件，包括第一个空闲块号，空闲块个数等信息 2）空闲块链 把所有空闲块链接在一起 当申请者需要空闲块时，链头开始搜索所需空闲块 当回收空闲块时，把释放的空闲块逐个加在链尾 3）位示图：从内存中划出若干个字节，每个bit表示一个存储块空闲或占用状态 文件目录管理： 文件目录：1）文件名址录，记录文件名和存放地址的目录表2）具有将文件名转换为外存物理位置的功能3）文件属性也记录在目录中 目录文件：文件目录以文件形式存于外存，这个文件叫目录文件 目录结构：单级目录、二级目录、多级目录（树型目录） 文件全名和路径： Linux文件目录： 文件的保护：对文件的访问系统首先要检查访问权限 文件和目录操作： 典型的文件系统：FAT16、FAT32、NTFS、EXT2、EXT3、EXT4"},{"title":"虚拟内存管理","date":"2020-10-16T16:00:00.000Z","updated":"2021-05-20T09:54:21.000Z","comments":true,"path":"未整理/操作系统原理(未整理)/虚拟内存管理.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E8%99%9A%E6%8B%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html","excerpt":"","text":"虚拟内存管理： ———————————————— 页式虚拟内存管理概念： 虚拟内存管理的目标：1）使得大的程序能在较小的内存中运行2）使得多个程序能在较小的内存中运行（能容纳下）3）使得多个程序并发运行时地址不冲突4）使得内存利用效率高：无碎片，共享方便 虚拟内存管理的实现思路：在程序运行时，只把当前必要的很小一部分代码和数据装入内存中，其余代码和数据需要时再装入，不再运行的代码和数据及时从内存删除，实际内存很容易就能满足上述的内存需求 程序运行的局部性：程序在一个有限的时间段内访问的代码和数据往往集中在有限的地址范围内，把程序一部分装入内存在较大概率上也足够让其运行一小段时间 典型虚拟内存管理方式：1）页式虚拟存储管理2）段式虚拟存储管理3）段页式虚拟存储管理 页式虚拟存储管理：进程装入和使用内存的原则：————————————————— 页表和页式地址映射： 页式系统中的地址： 虚拟地址(VA)可以分解成页号P和页内偏移W1）页号P=VA/页的大小2）页内偏移W=VA%页的大小 页面映射表：记录页与页框之间的对应关系，也叫页表页号：登记程序地址的页号页框号：登记页所在的物理页号页面其他特性：登记含存取权限在内的其他特性 页式地址映射：虚拟地址（页式地址）—&gt; 物理地址 过程：1）从VA分离页号P和页内偏移W2）查页表：以P为索引查页框号P‘3）计算物理地址MA：MA=P’ * 页大小 + W ————————————— 快表技术和页面共享技术； 快表机制（Cache）： 快表的概念：1）慢表：页表放在内存中2）快表：页表放在Cache中 快表的特点：1）容量小，访问快，成本高2）快表是慢表的部分内容的复制3）地址映射时优先访问快表【若在快表中找到所需数据，则称为“命中”；没有命中时，需要访问慢表，同时更新快表】4）合理的页面调度策略能使快表具有较高命中率 快表机制下地址映射过程： 页面的共享原理：1）在不同进程的页表中填上相同的页框号，多个进程能访问相同的内存空间，从而实现页面共享2）共享页面在内存只有一份真实存储，节省内存 ———————————————— 缺页中断： 分级存储体系：Cache+内存+辅存 页表扩充：带中断位的页表 扩充有中断位和辅存地址的页表：中断位I：标识该页是否在内存【1:不在内存；0:在内存】辅存地址：该页在辅存上的位置 扩充有访问位和修改位的页表：访问位：标识该页最近是否被访问【0:最近没有被访问；1:最近已被访问】修改位：标识该页的数据是否已被修改【0:该页未被修改；1:该页已被修改】 缺页中断定义：在地址映射过程中，当所要访问的目的页不在内存时，则系统产生异常中断 缺页中断处理程序：中断处理程序把所缺的页从页表指出的辅存地址调入内存的某个页框中，并更新页表中该页对应的页框号以及修改中断位I为0 访存指令的执行过程(含缺页中断处理)： 缺页（中断）率f=缺页次数/访问页面总次数命中率=1-f —————————————— 页面淘汰策略： 淘汰策略：选择淘汰哪一页的规则称淘汰策略 页面抖动：页面在内存和辅存间频繁交换的现象，“抖动”会导致系统效率下降 好的淘汰策略具有较低的缺页率（高命中率），页面抖动较少 常用的淘汰算法：1）最佳算法（OPT算法）2）先进先出淘汰算法（FIFO算法）3）最久未使用淘汰算法（LRU算法）4）最不经常使用（LFU）算法 最佳算法（OPT算法，Optimal）：淘汰以后不再需要或最远的将来才会用到的页面【理论上最佳，实践中该算法无法实现】 先进先出淘汰算法（FIFO算法）：淘汰在内存中停留时间最长的页面 优点：实现简单，页面按进入内存的时间排序，淘汰队头页面 缺点：进程只有按顺序访问地址空间时页面命中率才最理想 异常现象：对于一些特定的访问序列，随分配的页框增多，缺页率反而增加 最久未使用淘汰算法（LRU，Least Recently Used）：淘汰最长时间未被使用的页面 最不经常使用（LFU，Least Frequently Used）算法：选择到当前时间为止被访问次数最少的页面，每页设置访问计数器，每当页面被访问时，该页面的访问计数器加1，发生缺页中断时，淘汰计数值最小的页面，并将所有计数清零 ——————————————————— 缺页因素与页式系统缺点： 缺页的因素：1）淘汰算法2）分配给进程的页框数：页框越少，越容易缺页3）页面的大小选择：【页面太大：浪费内存，极限是分区存储；页面太小：页面增多，页表长度增加，浪费内存，换页频繁，系统效率低】【页面的常见大小：2的整数次幂，1KB，2KB，4KB】【页面越小，容易缺页】4）程序的编制方法：局部性越好，越不容易缺；跳转或分支越多越容易缺页 页式系统的不足：1）页面划分无逻辑含义2）页的共享不灵活3）页内碎片 ———————————————————— 段式和段页式虚拟存储： 段式存储管理： 进程分段：把进程按逻辑意义划分为多个段，每段有段名，长度不定，进程由多段组成 段式内存管理系统的内存分配：以段为单位装入，每段分配连续的内存；但是段和段不要求相邻 段式系统的虚拟地址：段式虚拟地址VA包括段号S和段内偏移W【VA：（S，W）】 段式地址的映射机制： 段式地址映射过程：1）由逻辑地址VA分离出（S，W）2）查询段表：检索段号S，查询该段基地址B和长度L3）物理地址MA=B+W 段的共享：1）共享段在内存中只有一份存储2）共享段被多个进程映射到各自段表3）需要共享的模块都可以设置为单独的段 段式系统的缺点：1）段需要连续的存储空间2）段的最大尺寸受到内存大小的限制3）在辅存中管理可变尺寸的段比较困难 段式系统 VS 页式系统：1）地址空间的区别：页式系统是一维地址空间，段式系统是二维地址空间2）段与页的区别：段长可变，页面大小固定段的划分有意义，页面无意义段方便共享，页面不方便共享段用户可见，页面用户不可见段偏移有溢出，页面偏移无溢出 段页式存储管理：在段式存储管理中结合页式存储管理技术，在段中划分页面 段页式地址的映射机构：同时采用段表和页表实现地址映射系统为每个进程建立一个段表系统为每个段建立一个页表段表给出每段的页表基地址及页表长度（段长）页表给出每页对应的页框"},{"title":"设备管理概念","date":"2020-10-14T16:00:00.000Z","updated":"2021-05-20T09:52:43.263Z","comments":true,"path":"未整理/操作系统原理(未整理)/设备管理概念.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86%E6%A6%82%E5%BF%B5.html","excerpt":"","text":"设备管理概念： 1）按交互对象分类：人机交互设备：显示设备、键盘、鼠标、打印机与CPU等交互的设备：磁盘、磁带、传感器、控制器计算机间的通信设备：网卡、调制解调器 2）按交互方向分类：输入设备：键盘、扫描仪输出设备：显示设备、打印机双向设备输入/输出：硬盘、软盘、网卡 3）按外设特征分类：使用特征：存储、输入/输出数据传输率：低速（如键盘）、中速（如打印机）、高速（如网卡、磁盘）信息组织特征：字符设备（如打印机）、块设备（如磁盘）、网络设备 鼠标： 键盘： 喷墨打印机： 硬盘： 设备管理的主要功能： 1）设备分配：设备分配功能是设备管理的基本任务，设备分配程序按照一定的策略，为申请设备的进程分配设备，记录设备的使用情况 2）设备映射：设备管理模块将逻辑设备映射到物理设备的功能，从应用软件的角度看，逻辑设备是一类物理设备的抽象；从设备管理程序的角度看，物理设备是逻辑设备的实例 设备独立性：物理设备对用户透明，用户使用统一规范的方式使用设备；用户编程时使用设备逻辑名，由系统实现逻辑设备到物理设备的转换 3）设备驱动：对物理设备进行控制，实现I/O操作：IN/OUT接收应用的服务请求（例如读/写命令），转换为具体的I/O指令，控制设备完成相关操作向用户提供统一接口：read/write/open，把外设作为特别文件处理 设备驱动程序的特点：1）设备驱动程序与硬件密切相关2）每类设备都要配置特定的驱动程序3）驱动程序一般由设备厂商根据操作系统要求编写4）操作系统仅对与设备驱动的接口提出要求"},{"title":"进程控制概念","date":"2020-10-26T16:00:00.000Z","updated":"2021-05-20T09:51:49.735Z","comments":true,"path":"未整理/操作系统原理(未整理)/进程控制概念.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6%E6%A6%82%E5%BF%B5.html","excerpt":"","text":"概念：在进程生存全期间，对其全部行为的控制 四个典型的控制行为：1）创建进程2）阻塞进程3）撤销进程4）唤醒进程 进程创建：创建一个具有指定标识（ID）的进程（进程标识、优先级、进程起始地址、CPU初始状态、资源清单） 进程撤销：撤销一个指定的进程；收回进程所占有的资源，撤销该进程的PCB 进程撤销的时机/事件：1）正常结束2）异常结束3）外界干预 参数：被撤销的进程名（ID） 进程阻塞：停止进程的执行，变为阻塞 参数：阻塞原因，不同原因构建有不同的阻塞队列 进程阻塞的实现：1）停止运行2）将PCB“运行态”改“阻塞态”3）插入相应原因的阻塞队列4）转调度程序 进程唤醒：唤醒处于阻塞队列当中的某个进程 引起唤醒的时机/事件：1）系统服务由不满足到满足2）I/O完成3）新数据到达4）进程提出新请求（服务） 参数：被唤醒进程的标识 进程控制原语：由若干指令构成的具有特定功能的函数，具有原子性，其操作不可分割 进程控制原语：1）创建原语2）撤销原语3）阻塞原语4）唤醒原语"},{"title":"进程概念","date":"2020-10-27T16:00:00.000Z","updated":"2021-05-20T09:51:28.686Z","comments":true,"path":"未整理/操作系统原理(未整理)/进程概念.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E8%BF%9B%E7%A8%8B%E6%A6%82%E5%BF%B5.html","excerpt":"","text":"进程概念： 描述和管理程序的“运行过程”—进程 进程定义：进程是程序在某个数据集合上的一次运行活动 数据集合：软/硬件环境，多个进程共存/共享的环境 进程的特征：1）动态性：进程是程序的一次执行过程，动态产生/消亡2）并发性：进程同其他进程一起向前推进3）异步性：进程按各自速度向前推进4）独立性：进程是系统分配资源和调度CPU的单位 进程与程序的区别：1）动态与静态：进程是动态的，程序的一次执行过程；程序是静态的，一组指令的有序集合2）暂存与长存：进程是暂存的，在内存驻留；程序是长存的，在介质上长期保存3）程序和进程的对应：一个程序可能有多个进程 进程的类型：1）按使用资源的权限系统进程：指系统内核相关的进程用户进程：运行于用户态的进程2）按对CPU的依赖性偏CPU进程：计算型进程偏I/O进程：侧重于I/O的进程 进程的状态：1）运行状态（Running）：进程已经占有CPU，在CPU上运行2）就绪状态（Ready）：具备运行条件但由于无CPU，暂时不能运行3）阻塞状态（Block）【等待（Wait）状态】：因为等待某项服务完成或信号不能运行的状态，如等待系统调用、I/O操作、合作进程信号 进程状态的变迁：进程的状态可以依据一定的条件相互转化 Linux进程的状态： 进程控制块（Process Control Block，PCB）1）描述进程状态、资源、和与相关进程关系的数据结构2）PCB是进程的标志3）创建进程时创建PCB；进程撤销后PCB同时撤销 进程的切换：进程的上下文：Context，进程运行环境，CPU环境进程切换过程：1）换入进程的上下文进入CPU（从栈上来）2）换出进程的上下文离开CPU（到栈上去）"},{"title":"进程通信","date":"2020-10-22T16:00:00.000Z","updated":"2021-05-20T09:52:01.552Z","comments":true,"path":"未整理/操作系统原理(未整理)/进程通信.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1.html","excerpt":"","text":"进程通信： Windows匿名管道通信： 管道（pipe）：进程间的一种通信机制，一个进程（A）可以通过管道把数据传输给另外一个进程（B），前者向管道输入数据，后者从管道读取数据 Linux信号通信： 信号：1）信号是Linux进程间一种重要的通信机制2）信号是向进程发送的一个通知，通知某个事件已发生3）收到信号的进程可以立即执行指定的操作4）信号的发出可以是进程，也可以是系统（含硬件） 信号的产生：1）键盘输入特殊组合键产生信号（Ctrl+C）2）执行终端命令产生信号（kill系列命令）3）程序中调用函数产生信号：kill(),abort()4）硬件异常或内核产生相应信号：内存访问错"},{"title":"设备管理","date":"2020-10-15T16:00:00.000Z","updated":"2021-05-20T09:52:31.884Z","comments":true,"path":"未整理/操作系统原理(未整理)/设备管理.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86.html","excerpt":"","text":"设备管理： ———————————————— 7-1.设备管理概念 7-2.Spooling系统 ————————————————"},{"title":"进程管理","date":"2020-10-28T16:00:00.000Z","updated":"2021-05-20T09:51:38.983Z","comments":true,"path":"未整理/操作系统原理(未整理)/进程管理.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86.html","excerpt":"","text":"——————————————— 3-1：进程概念 3-1-1.进程基本概念 3-1-2.进程状态 3-1-3.进程控制块 3-2：进程控制概念 3-3：线程 3-3-1.线程概念 3-3-2.线程典型应用场景 3-4：临界区和锁 3-4-1.临界资源与临界区 3-4-2.锁机制 3-5：同步和P-V操作 3-5-1.同步和互斥的概念 3-5-2.P-V操作概念 3-5-3.P-V操作解决互斥问题 3-5-4.P-V操作解决同步问题 3-5-5.经典同步问题 3-6：进程通信 3-6-1.匿名管道通信 3-6-2.Linux信号通信———————————————"},{"title":"146-大小写转换II(C)","date":"2019-12-31T16:00:00.000Z","updated":"2021-03-12T02:58:26.000Z","comments":true,"path":"未整理/LeetCode/146-大小写转换II(C).html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/LeetCode/146-%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2II(C).html","excerpt":"","text":"——— 12345678910111213141516171819202122#include&lt;stdio.h&gt;#include&lt;string.h&gt;**char*** fun(**char** a[100])&#123; **int** I; **for** (I &#x3D; 0; a[I] !&#x3D; ‘\\0’; I++)&#123; **if** (a[I] &gt;&#x3D; ‘a’ &amp;&amp; a[I] &lt;&#x3D; ‘z’)&#123; a[I] -&#x3D; 32; &#125; &#125; **return** a;&#125;**int** main()&#123; **char** a[100]; printf(“请输入一个字符串：\\n”); fgets(a,100,stdin); &#x2F;&#x2F;不能用gets()函数 printf(“结果为：%s\\n”,fun(a)); **return** 0;&#125; ———"},{"title":"145-大小写转换(C)","date":"2019-12-31T16:00:00.000Z","updated":"2021-03-12T02:58:38.000Z","comments":true,"path":"未整理/LeetCode/145-大小写转换(C).html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/LeetCode/145-%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2(C).html","excerpt":"","text":"——— 123456789101112131415161718#include&lt;stdio.h&gt;**void** sw(**char** ch)&#123; **if**(ch &gt;&#x3D; ‘a’ &amp;&amp; ch &lt;&#x3D; ‘z’)&#123; printf(“%c\\n”,ch-32); &#125; **else**&#123; printf(“%c\\n”,ch+32); &#125;&#125;**int** main()&#123; **char** ch; scanf(“%c”,&amp;ch); sw(ch); **return** 0;&#125; ———"},{"title":"225-在链表中找节点","date":"2019-12-31T16:00:00.000Z","updated":"2021-03-12T02:57:59.000Z","comments":true,"path":"未整理/LeetCode/225-在链表中找节点.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/LeetCode/225-%E5%9C%A8%E9%93%BE%E8%A1%A8%E4%B8%AD%E6%89%BE%E8%8A%82%E7%82%B9.html","excerpt":"","text":""},{"title":"222-Getter与Setter(C++)","date":"2019-12-31T16:00:00.000Z","updated":"2021-03-12T02:58:11.000Z","comments":true,"path":"未整理/LeetCode/222-Getter与Setter(C++).html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/LeetCode/222-Getter%E4%B8%8ESetter(C++).html","excerpt":"","text":""},{"title":"37-反转一个3位整数(C、Java)","date":"2019-12-31T16:00:00.000Z","updated":"2021-03-12T02:58:51.000Z","comments":true,"path":"未整理/LeetCode/37-反转一个3位整数(C、Java).html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/LeetCode/37-%E5%8F%8D%E8%BD%AC%E4%B8%80%E4%B8%AA3%E4%BD%8D%E6%95%B4%E6%95%B0(C%E3%80%81Java).html","excerpt":"","text":"——————————————— 问题： —————————————————— C解答： 1234567891011121314#include&lt;stdio.h&gt;**int** main()&#123; &#x2F;&#x2F;m是指输入的3位整数；a指百位；b指十位；c指个位；n指输出的反转的数 **int** m,n,a,b,c; printf(“请输入一个三位整数：”); scanf(“%d”,&amp;m); a&#x3D;m&#x2F;100; c&#x3D;m%10; b&#x3D;m&#x2F;10%10; n&#x3D;c*100+b*10+a; printf(“反转后的三位整数是：%d\\n”,n);&#125; ———————— Java解答： public class Solution{ public int reverseInteger(int number){ //获取个位数 int num1=number % 10; //获取十位数 int num2=(number / 10) % 10; //获取百位数 int num3 =((number / 10) /10) % 10; //相加 return num3+num210+num1100; }}"},{"title":"225、用队列实现栈","date":"2019-12-31T16:00:00.000Z","updated":"2021-03-12T02:57:32.000Z","comments":true,"path":"未整理/LeetCode/225、用队列实现栈.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/LeetCode/225%E3%80%81%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.html","excerpt":"","text":""},{"title":"进程调度","date":"2020-10-20T16:00:00.000Z","updated":"2021-05-20T09:51:18.650Z","comments":true,"path":"未整理/操作系统原理(未整理)/进程调度.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86(%E6%9C%AA%E6%95%B4%E7%90%86)/%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6.html","excerpt":"","text":"进程调度： ———————————— 5-1：进程调度概念 5-2：典型调度算法 ———————————— 在合适的时候以一定的策略选择一个就绪进程运行 进程调度的目标：1）响应速度尽可能快2）进程处理的时间尽可能短3）系统吞吐量尽可能大4）资源利用率尽可能高5）对所有进程要公平6）避免饥饿7）避免死锁 进程调度两个量化的衡量指标：1）周转时间/平均周转时间 2）带权周转时间/平均带权周转时间 ——————————————— 典型调度算法：1）先来先服务调度2）短作业优先调度算法3）响应比高者优先调度算法4）优先数调度算法5）循环轮转调度法 可变时间片轮转调度法 多重时间片循环调度法"},{"title":"‘#’字棋","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:01:46.000Z","comments":true,"path":"未整理/C实例/‘#’字棋.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E2%80%98#%E2%80%99%E5%AD%97%E6%A3%8B.html","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071**#include&lt;stdio.h&gt;****int main()&#123;**** const int size&#x3D;3;**** int board[size][size];**** int i,j;**** int numofX;**** int numofo;**** int result&#x3D;-1;&#x2F;&#x2F;-1;**没人赢，**1:X**赢，**0:o**赢 ** &#x2F;&#x2F;**读入矩阵** for(I&#x3D;0;i&lt;size;i++)&#123;**** for(j&#x3D;0;j&lt;size;j++)&#123;**** scanf(“%d”,&amp;board[I][j]);**** &#125;**** &#125;** ** &#x2F;&#x2F;**检查行** for(I&#x3D;0;i&lt;size &amp;&amp; result&#x3D;&#x3D;-1;i++)&#123;**** numofo&#x3D;numofX&#x3D;0;**** for(j&#x3D;0;j&lt;size;j++)&#123;**** if(board[I][j]&#x3D;&#x3D;1)&#123;**** numofX++;**** &#125;else&#123;**** numofo++;**** &#125;**** &#125;**** if(numofo&#x3D;&#x3D;size)&#123;**** result&#x3D;0;**** &#125;else if(numofX&#x3D;&#x3D;size)&#123;**** result &#x3D;1;**** &#125;**** &#125;** ** &#x2F;&#x2F;**检查列** if(result&#x3D;&#x3D;-1)&#123;**** for(j&#x3D;0;j&lt;size &amp;&amp; result&#x3D;&#x3D;-1;j++)&#123;**** numofo&#x3D;numofX&#x3D;0;**** for(I&#x3D;0;i&lt;size;i++)&#123;**** if(board[I][j]&#x3D;&#x3D;1)&#123;**** numofX++;**** &#125;else&#123;**** numofo++;**** &#125;**** &#125;**** if(numofo&#x3D;&#x3D;size)&#123;**** result&#x3D;0;**** &#125;else if(numofX&#x3D;&#x3D;size)&#123;**** result &#x3D;1;**** &#125;**** &#125;****&#125;** ** &#x2F;&#x2F;**检查对角线** numofo&#x3D;numofX&#x3D;0;**** for(I&#x3D;0;i&lt;size;i++)&#123;**** if(board[I][I]&#x3D;&#x3D;1)&#123;**** numofX++;**** &#125;else&#123;**** numofo++;**** &#125;**** &#125;**** if(numofo&#x3D;&#x3D;size)&#123;**** result&#x3D;0;**** &#125;else if(numofX&#x3D;&#x3D;size)&#123;**** result &#x3D;1;**** &#125;** ** numofo&#x3D;numofX&#x3D;0;**** for(I&#x3D;0;i&lt;size;i++)&#123;**** if(board[I][size-i-1]&#x3D;&#x3D;1)&#123;**** numofX++;**** &#125;else&#123;**** numofo++;**** &#125;**** &#125;****&#125;**"},{"title":"整数反转","date":"2019-12-31T16:00:00.000Z","updated":"2021-03-12T02:57:48.000Z","comments":true,"path":"未整理/LeetCode/7、整数反转.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/LeetCode/7%E3%80%81%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC.html","excerpt":"","text":""},{"title":"一数三平方：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:06:01.000Z","comments":true,"path":"未整理/C实例/一数三平方：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E4%B8%80%E6%95%B0%E4%B8%89%E5%B9%B3%E6%96%B9%EF%BC%9A.html","excerpt":"","text":"源代码： 1234567891011121314151617181920212223242526272829303132//有这样一个六位数，它本身是一个整数的平方，其高三位和低三位也分别是一个整数的平方，如225625=475^2,求满足上述条件的所有六位数。#include&lt;stdio.h&gt;#include&lt;math.h&gt;int main()&#123; long i,n,n1,n2,n3,n4,count=0; printf(&quot;这样的数有: \\n&quot;); for(i=100000;i&lt;=999999;i++)&#123; n=(long)sqrt(i); if(i==n*n)&#123; n1=i/1000; n2=i%1000; n3=(long)sqrt(n1); n4=(long)sqrt(n2); if(n1==n3*n3&amp;&amp;n2==n4*n4)&#123; count++; printf(&quot;%ld &quot;,i); &#125; &#125; &#125; printf(&quot;\\n满足条件的有：%ld个&quot;,count); printf(&quot;\\n&quot;);&#125;"},{"title":"IP地址形式输出：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:05:25.000Z","comments":true,"path":"未整理/C实例/IP地址形式输出：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/IP%E5%9C%B0%E5%9D%80%E5%BD%A2%E5%BC%8F%E8%BE%93%E5%87%BA%EF%BC%9A.html","excerpt":"","text":"源代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455//任意输入32位的二进制数，编程实现将该二进制数转换成IP地址形式//输入：11111111111111111111111100000000，输出：255.255.255.0#include&lt;stdio.h&gt;int bin_dec(int x,int n)&#123; if(n==0)&#123; return 1; &#125; return x*bin_dec(x,n-1);&#125;int main()&#123; int i; int ip[4]=&#123;0&#125;; char a[33]; printf(&quot;输入32位二进制数：\\n&quot;); scanf(&quot;%s&quot;,a); for(i=0;i&lt;8;i++)&#123; if(a[i]==&#x27;1&#x27;)&#123; ip[0]+=bin_dec(2,7-i); &#125; &#125; for(i=8;i&lt;16;i++)&#123; if(a[i]==&#x27;1&#x27;)&#123; ip[1]+=bin_dec(2,15-i); &#125; &#125; for(i=16;i&lt;24;i++)&#123; if(a[i]==&#x27;1&#x27;)&#123; ip[2]+=bin_dec(2,23-i); &#125; &#125; for(i=24;i&lt;32;i++)&#123; if(a[i]==&#x27;1&#x27;)&#123; ip[3]+=bin_dec(2,31-i); &#125; if(a[i]==&#x27;\\0&#x27;)&#123; break; &#125; &#125; printf(&quot;IP地址为:\\n&quot;); printf(&quot;%d.%d.%d.%d\\n&quot;,ip[0],ip[1],ip[2],ip[3]);&#125;"},{"title":"交换两个变量的值","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:01:23.000Z","comments":true,"path":"未整理/C实例/交换两个变量的值.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC.html","excerpt":"","text":"123456789**&#x2F;&#x2F;**交换**a**和**b**的值**#include&lt;stdio.h&gt;****int main()&#123;**** int a&#x3D;5,b&#x3D;6,t;**** t&#x3D;5;**** a&#x3D;b;**** b&#x3D;t;**** printf(“a&#x3D;%d,b&#x3D;%d\\n”,a,b);**** return 0;****&#125;** 12345678910**#include&lt;stdio.h&gt;****int main()&#123;**** int a&#x3D;5,b&#x3D;6;** ** a&#x3D;a+b;**** b&#x3D;a-b;**** a&#x3D;a-b;** ** printf(“a&#x3D;%d,b&#x3D;%d\\n”,a,b);****&#125;** 12345678910#include&lt;stdio.h&gt;int main()&#123; int a&#x3D;5,b&#x3D;6; a&#x3D;a ^ b; b&#x3D;a ^ b; a&#x3D;a ^ b; printf(“a&#x3D;%d,b&#x3D;%d\\n”,a,b);&#125; 123456789101112#include&lt;stdio.h&gt;void swap(int *pa,int *pb)&#123; int t&#x3D;*pa; *pa&#x3D;*pb; *pb&#x3D;t;&#125;int main()&#123; int a&#x3D;5,b&#x3D;6; swap(&amp;a, &amp;b); printf(“a&#x3D;%d,b&#x3D;%d\\n”,a,b);&#125;"},{"title":"任意次方后的最后三位：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:07:04.000Z","comments":true,"path":"未整理/C实例/任意次方后的最后三位：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E4%BB%BB%E6%84%8F%E6%AC%A1%E6%96%B9%E5%90%8E%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%89%E4%BD%8D%EF%BC%9A.html","excerpt":"","text":"源代码： 1234567891011121314151617181920212223//编程求一个整数任意次方后的最后三位数，即求x^y的最后三位数，x和y的值由键盘输入。//本实例的算法思想如下：题中要求一个数的任意次方，首先要考虑计算结果是否越界，如何避免产生越界问题同时又不使结果产生误差，这里在求次方时每乘一次都取其后三位，这样就不会出现越界问题，又可完成题目要求。#include&lt;stdio.h&gt;int main()&#123; int i,x,y,z=1; printf(&quot;please input two numbers:x,y(x^y):\\n&quot;); scanf(&quot;%d%d&quot;,&amp;x,&amp;y); for(i=1;i&lt;=y;i++)&#123; z=z*x % 1000; &#125; if(z&gt;=100)&#123; printf(&quot;%d^%d的最后三位是：%d\\n&quot;,x,y,z); &#125;else&#123; printf(&quot;%d^%d的最后三位:00%d\\n&quot;,x,y,z); &#125;&#125;"},{"title":"产生不重复的随机数","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:02:28.000Z","comments":true,"path":"未整理/C实例/产生不重复的随机数.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E4%BA%A7%E7%94%9F%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0.html","excerpt":"","text":""},{"title":"两数相除：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:11:23.000Z","comments":true,"path":"未整理/C实例/两数相除：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4%EF%BC%9A.html","excerpt":"","text":"指针作为函数的返回值： 源代码： 12345678910111213141516171819202122232425262728#include &lt;stdio.h&gt;int divide(int a,int b,int *result)&#123; int ret=1; if(b==0)&#123; ret=0; &#125;else&#123; *result=a/b; &#125; return ret; //return:如果除法成功，返回1；否则返回0&#125;int main(int argc, const char * argv[]) &#123; // insert code here... int a=5,b=2; int c=0; if(divide(a,b,&amp;c))&#123; printf(&quot;%d/%d=%d\\n&quot;,a,b,c); &#125; return 0;&#125;"},{"title":"亲密数：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:07:58.000Z","comments":true,"path":"未整理/C实例/亲密数：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E4%BA%B2%E5%AF%86%E6%95%B0%EF%BC%9A.html","excerpt":"","text":"源代码： 123456789101112131415161718192021222324252627282930313233343536//如果整数A的全部因子（不包括A）之和等于B，且整数B的全部因子（不包括B）之和等于A，则将A和B称为亲密数，如220的全部因子（不包括220）之和：1+2+4+5+10+11+20+22+44+55+110等于284，284的全部因子（不包括284）之和：1+2+4+71+142等于220，故220和284为亲密数。求10000以内的所有亲密数。#include&lt;stdio.h&gt;int main()&#123; int i,j,k,sum1,sum2; for(i=1;i&lt;=10000;i++)&#123; sum1=0; sum2=0; for(j=1;j&lt;i;j++)&#123; if(i%j==0)&#123; sum1+=j; &#125; &#125; for(k=1;k&lt;sum1;k++)&#123; if(sum1%k==0)&#123; sum2+=k; &#125; &#125; if(sum2==i&amp;&amp;i!=sum1&amp;&amp;i&lt;sum1)&#123; printf(&quot;%5d=&gt;%5d\\n&quot;,i,sum1); &#125; &#125;&#125;"},{"title":"任意正数的逆序","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:03:33.000Z","comments":true,"path":"未整理/C实例/任意正数的逆序.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E4%BB%BB%E6%84%8F%E6%AD%A3%E6%95%B0%E7%9A%84%E9%80%86%E5%BA%8F.html","excerpt":"","text":""},{"title":"判断三角形的类型：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:08:28.000Z","comments":true,"path":"未整理/C实例/判断三角形的类型：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E5%88%A4%E6%96%AD%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%9A.html","excerpt":"","text":"源代码： 12345678910111213141516171819202122232425262728293031323334//根据输入的三角形的三条边判断三角形的类型，并输出它的面积和类型//实例中要注意“&amp;&amp;”和“｜｜”的恰当使用。当需要同时满足多种情况时，使用“&amp;&amp;”逻辑运算符，而当只需要满足几种情况中的一种时，则使用“｜｜”逻辑运算符。#include&lt;stdio.h&gt;#include&lt;math.h&gt;int main()&#123; float a,b,c; float s ,area; scanf(&quot;%f,%f,%f&quot;,&amp;a,&amp;b,&amp;c); if(a+b&gt;c &amp;&amp; b+c&gt;a &amp;&amp; a+c&gt;b)&#123; s=(a+b+c)/2; area=(float)sqrt(s*(s-a)*(s-b)*(s-c)); printf(&quot;面积是：%f\\n&quot;,area); if(a==b &amp;&amp; a==c)&#123; printf(&quot;等边三角形\\n&quot;); &#125; else if(a==b || a==c || b==c)&#123; printf(&quot;等腰三角形\\n&quot;); &#125; else if((a*a + b*b ==c*c)||(a*a + c*c == b*b)||(b*b+c*c==a*a))&#123; printf(&quot;直角三角形\\n&quot;); &#125; else&#123; printf(&quot;普通三角形&quot;); &#125; &#125; else printf(&quot;不能构成三角形&quot;);&#125;"},{"title":"字符串数组的排序","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:02:04.000Z","comments":true,"path":"未整理/C实例/字符串数组的排序.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E7%BB%84%E7%9A%84%E6%8E%92%E5%BA%8F.html","excerpt":"","text":"以字母的顺序排序： 以长度排序："},{"title":"哥德巴赫猜想：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:09:56.000Z","comments":true,"path":"未整理/C实例/哥德巴赫猜想：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E5%93%A5%E5%BE%B7%E5%B7%B4%E8%B5%AB%E7%8C%9C%E6%83%B3%EF%BC%9A.html","excerpt":"","text":"源代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162//验证100以内的正偶数都能分解为两个素数之和，即验证哥德巴赫猜想对100以内（大于二）的正偶数成立。#include&lt;stdio.h&gt;int ss(int i)&#123; int j; if(i&lt;=1)&#123; return 0; &#125; if(i==2)&#123; return 1; &#125; for(j=2;j&lt;i;j++)&#123; if(i%j==0)&#123; return 0; &#125; else if(i!=j+1)&#123; continue; &#125; else&#123; return 1; &#125; &#125; return 0;&#125;int main()&#123; int i,j,k,flag1,flag2,n=0; for(i=4;i&lt;100;i+=2)&#123; for(k=2;k&lt;=i/2;k++)&#123; j=i-k; flag1=ss(k); if(flag1)&#123; flag2=ss(j); if(flag2)&#123; printf(&quot;%3d=%3d+%3d,&quot;,i,k,j); n++; if(n%8==0)&#123; printf(&quot;\\n&quot;); &#125; &#125; &#125; &#125; &#125; printf(&quot;\\n&quot;);&#125;"},{"title":"字符输入输出：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:05:50.000Z","comments":true,"path":"未整理/C实例/字符输入输出：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E5%AD%97%E7%AC%A6%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA%EF%BC%9A.html","excerpt":"","text":"源代码： 123456789101112131415161718192021222324252627282930//标准库提供的输入/输出模型非常简单，无论文本从何处输入，输出到何处，其输入/输出都是按照字符流的方式处理。文本流是由多行字符构成的字符序列，而每行字符则由0个或多个字符组成，行末是一个换行符。标准库负责使每个输入/输出流都能够遵守这一模型。使用标准库的C语言程序员不必关心在程序之外这些行是如何表示的//每次调用时，getchar函数从文本流中读入下一个输入字符，并将其作为结果值返回【c=getter()】//每次调用putchar函数时将打印一个字符【putchar(c)】，putchar与printf这两个函数可以交替使用，输出的次序与调用的次序一致/* putchar: int putchar(int c); 向标准输出写一个字符 返回写了几个字符，EOF(-1)表示写失败*//* getchar: int getchar(void); 从标准输入读入一个字符 返回类型是int是为了返回EOF(-1)*///control-C 强制退出，程序并没有停止//control-D 正常退出//shell#include&lt;stdio.h&gt;int main()&#123; int ch; while((ch=getchar()) != EOF)&#123; putchar(ch); &#125; printf(&quot;EOF\\n&quot;);&#125; 文件复制： 源代码： 123456789101112131415161718192021//文件复制：#include &lt;stdio.h&gt;//将输入复制到输出int main()&#123; //字符在键盘、屏幕或其他的任何地方无论以什么形式表现，它在机器内部都是以位模式存储的，char类型专门用于存储这种字符型数据 //这里之所以不把c声明成char类型，是因为它必须足够大，除了能存储任何可能的字符外还要能存储文件结束符EOF int c; //EOF：end of file //EOF定义在头文件&lt;stdio.h&gt;中，是一个整型数，它与任何char类型的值都不相同 // !=的优先级比=的优先级要高 while((c=getchar()) != EOF)&#123; putchar(c); &#125;&#125; 字符计数：1） 源代码： 12345678910111213//字符计数：#include&lt;stdio.h&gt;int main()&#123; long nc; nc=0; while(getchar() != EOF)&#123; ++nc; &#125; printf(&quot; %ld\\n&quot;,nc);&#125; 2） 源代码： 12345678910#include&lt;stdio.h&gt;int main()&#123; double nc; for(nc=0;getchar() != EOF;++nc)&#123; ; //单独的分号称为空语句 &#125; printf(&quot; %.0f\\n&quot;,nc);&#125; 行计数： 源代码： 12345678910111213141516//行计数（统计行数等价于统计换行符的个数）#include&lt;stdio.h&gt;int main()&#123; int c,n1; n1=0; while((c=getchar()) != EOF)&#123; if(c == &#x27;\\n&#x27;)&#123; ++n1; &#125; &#125; printf(&quot;%d\\n&quot;,n1);&#125; 单词计数： 源代码： 12345678910111213141516171819202122232425262728293031//单词计数：//统计行数、字符数与单词数(任何其中不包含空格、制表符或换行符的字符序列)#include &lt;stdio.h&gt;#define IN 1//在单词内#define OUT 0//在单词外int main()&#123; int c,nl,nw,nc,state; state=OUT; nl=nw=nc=0;//在兼有值与赋值两种功能的表达式中，赋值结合次序是由右至左：nl=(nw=(nc=0)); while((c=getchar()) != EOF)&#123; ++nc; if(c == &#x27;\\n&#x27;)&#123; ++nl; &#125; // ||代表OR（逻辑或） // &amp;&amp;代表AND（逻辑与），它仅比||高一个优先级 if(c==&#x27; &#x27; || c==&#x27;\\n&#x27; || c== &#x27;\\t&#x27;)&#123; state=OUT; &#125; //程序执行时，每当遇到单词的第一个字符，它就作为一个新单词加以统计 else if(state==OUT)&#123; state=IN; ++nw; &#125; &#125; //nl:行数；nw:单词数；nc：字符数 printf(&quot;%d %d %d\\n&quot;,nl,nw,nc-1);&#125; 统计各个数字、空白符（包括空格符、制表符及换行符）以及所有其他字符出现的次数： 源代码： 1234567891011121314151617181920212223242526272829//统计各个数字、空白符（包括空格符、制表符及换行符）以及所有其他字符出现的次数#include&lt;stdio.h&gt;int main()&#123; int c,i,nwhite,nother; //数组下标可以是任何整型表达式、包括整型变量（如i）以及整型常量 int ndigit[10];//C语言中，数组下标总是从0开始 nwhite=nother=0; for(i=0;i&lt;10;++i)&#123; ndigit[i]=0; &#125; while((c=getchar()) != EOF)&#123; if(c &gt;= &#x27;0&#x27; &amp;&amp; c&lt;= &#x27;9&#x27;)&#123; ++ndigit[c-&#x27;0&#x27;]; &#125; else if(c==&#x27; &#x27; || c==&#x27;\\n&#x27; ||c==&#x27;\\t&#x27;)&#123; ++nwhite; &#125; else&#123; ++nother; &#125; &#125; printf(&quot;digit=&quot;); for(i=0;i&lt;10;++i)&#123; printf(&quot; %d&quot;,ndigit[i]); &#125; printf(&quot;,white space=%d,other=%d\\n&quot;,nwhite,nother);&#125;"},{"title":"对小数进行四舍五入：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:10:34.000Z","comments":true,"path":"未整理/C实例/对小数进行四舍五入：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E5%AF%B9%E5%B0%8F%E6%95%B0%E8%BF%9B%E8%A1%8C%E5%9B%9B%E8%88%8D%E4%BA%94%E5%85%A5%EF%BC%9A.html","excerpt":"","text":"源代码： 12345678910111213141516171819202122232425//请用户输入一个实数（浮点型），编写算法对这个实数进行四舍五入到个位的运算// 12.56----13 12.45----12#include&lt;stdio.h&gt;int main()&#123; //让用户输入一个小数 double num=0.0; printf(&quot;请输入一个小数：&quot;); scanf(&quot;%lf&quot;,&amp;num); //对这个数进行四舍五入计算 int i=num;//拿到整数部分 double xiaoShu=num-i;//小数部分 if(xiaoShu &gt;= 0.5)&#123; i++; &#125; printf(&quot;i=%d\\n&quot;,i);&#125;"},{"title":"判断正整数的位数：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:08:13.000Z","comments":true,"path":"未整理/C实例/判断正整数的位数：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E5%88%A4%E6%96%AD%E6%AD%A3%E6%95%B4%E6%95%B0%E7%9A%84%E4%BD%8D%E6%95%B0%EF%BC%9A.html","excerpt":"","text":"1） 源代码： 12345678910111213141516171819202122#include&lt;stdio.h&gt;int main()&#123; int x,n=0; scanf(&quot;%d&quot;,&amp;x); //先要去做数位数去位数的事情 n++; x/=10; while(x&gt;0)&#123; n++; x/=10; &#125; printf(&quot;%d\\n&quot;,n); return 0;&#125; 2） 源代码： 1234567891011121314151617#include&lt;stdio.h&gt;int main()&#123; int x,n=0; scanf(&quot;%d&quot;,&amp;x); do&#123; x/=10; n++; &#125;while(x&gt;0); printf(&quot;%d\\n&quot;,n); return 0;&#125;"},{"title":"大小写转换：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:10:46.000Z","comments":true,"path":"未整理/C实例/大小写转换：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2%EF%BC%9A.html","excerpt":"","text":"源代码： 12345678910111213141516//字母在ASCII表中是顺序排列的//大写字母和小写字母是分开排列的，并不在一起//&#x27;a&#x27;-&#x27;A&#x27;可以得到两段之间的距离，于是a+&#x27;a&#x27;-&#x27;A&#x27;可以把一个大写字母变成小写字母，而a+&#x27;A&#x27;-&#x27;a&#x27;可以把一个小写字母变成大写字母#include&lt;stdio.h&gt;int main()&#123; char m=&#x27;a&#x27;; char n=&#x27;A&#x27;; printf(&quot;%d\\n&quot;,m-n); printf(&quot;%c\\n&quot;,n+32); printf(&quot;%c\\n&quot;,m-32);&#125;"},{"title":"序列前n项和：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:06:15.000Z","comments":true,"path":"未整理/C实例/序列前n项和：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E5%BA%8F%E5%88%97%E5%89%8Dn%E9%A1%B9%E5%92%8C%EF%BC%9A.html","excerpt":"","text":"1）源代码： 1234567891011121314151617// f(n)=1+1/2+1/3+1/4+...+1/n#include&lt;stdio.h&gt;int main()&#123; int n,i; double sum=0.0; scanf(&quot;%d&quot;,&amp;n); for(i=1;i&lt;=n;i++)&#123; sum+=1.0/i; &#125; printf(&quot;f(%d)=%f\\n&quot;,n,sum);&#125; 2） 源代码： 12345678910111213141516171819// f(n)=1-1/2+1/3-1/4+...+1/n#include&lt;stdio.h&gt;int main()&#123; int n,i; double sum=0.0; int sign=1; scanf(&quot;%d&quot;,&amp;n); for(i=1;i&lt;=n;i++)&#123; sum+=sign*1.0/i; sign=-sign; &#125; printf(&quot;f(%d)=%f\\n&quot;,n,sum);&#125; 3） 源代码： 123456789101112131415161718192021222324//计算序列2/1+3/2+5/3+8/5+...的前N项之和，注意该序列从第2项起，每一项的分子是前一项分子与分母的和，分母是前一项的分子#include&lt;stdio.h&gt;int main()&#123; int n; double dividend=2,divisor=1; double sum=0.0; int i; double t; scanf(&quot;%d&quot;,&amp;n); for(i=1;i&lt;=n;i++)&#123; sum+=dividend/divisor; t=dividend; dividend=dividend+divisor; divisor=t; &#125; printf(&quot;%.2f\\n&quot;,sum);&#125;"},{"title":"打印三角形、乘法表：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:11:10.000Z","comments":true,"path":"未整理/C实例/打印三角形、乘法表：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E6%89%93%E5%8D%B0%E4%B8%89%E8%A7%92%E5%BD%A2%E3%80%81%E4%B9%98%E6%B3%95%E8%A1%A8%EF%BC%9A.html","excerpt":"","text":"打印三角形：1） 源代码： 123456789101112131415#include&lt;stdio.h&gt;int main()&#123; //i=2，在第2行打印2颗星 for(int i=1;i&lt;=10;i++)&#123; for(int j=0;j&lt;i;j++)&#123; printf(&quot;*&quot;); &#125; printf(&quot;\\n&quot;); &#125;&#125; 2） 源代码： 1234567891011121314151617181920212223242526#include&lt;stdio.h&gt;int main()&#123; //打印上10行 //i=2，在第2行打印2颗星 for(int i=1;i&lt;=10;i++)&#123; for(int j=0;j&lt;i;j++)&#123; printf(&quot;*&quot;); &#125; printf(&quot;\\n&quot;); &#125; //打印下9行 for(int i=1;i&lt;=9;i++)&#123; for(int j=0;j&lt;10-i;j++)&#123; printf(&quot;*&quot;); &#125; printf(&quot;\\n&quot;); &#125;&#125; 3） 源代码： 12345678910111213141516171819#include&lt;stdio.h&gt;int main()&#123; for(int i=1;i&lt;=10;i++)&#123; for(int j=0;j&lt;10-i;j++)&#123; printf(&quot; &quot;); &#125; for(int k=0;k&lt;i;k++)&#123; printf(&quot;*&quot;); &#125; printf(&quot;\\n&quot;); &#125;&#125; 打印下三角的乘法表： 源代码： 123456789101112131415161718192021222324#include&lt;stdio.h&gt;int main()&#123; int n; scanf(&quot;%d&quot;,&amp;n); for(int i=1;i&lt;=n;i++)&#123; for(int j=1;j&lt;=i;j++)&#123; printf(&quot;%d*%d=%d&quot;,j,i,i*j); if(i*j&lt;10)&#123; printf(&quot; &quot;); &#125; else&#123; printf(&quot; &quot;); &#125; &#125; printf(&quot;\\n&quot;); &#125;&#125;"},{"title":"使用公式打印下列华氏温度与摄氏温度对照表","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:00:23.000Z","comments":true,"path":"未整理/C实例/使用公式打印下列华氏温度与摄氏温度对照表.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E4%BD%BF%E7%94%A8%E5%85%AC%E5%BC%8F%E6%89%93%E5%8D%B0%E4%B8%8B%E5%88%97%E5%8D%8E%E6%B0%8F%E6%B8%A9%E5%BA%A6%E4%B8%8E%E6%91%84%E6%B0%8F%E6%B8%A9%E5%BA%A6%E5%AF%B9%E7%85%A7%E8%A1%A8.html","excerpt":"","text":"1）**#include&lt;stdio.h&gt;**//**程序中允许出现空格、制表符或换行符之处，都可以使用注释//当fahr=0,20,…,300时，分别打印华氏温度和摄氏温度对照表main(){**** int fahr,celsius;**** int lower,upper,step;** ** lower=0;//温度表的下限 upper=300;//温度表的上限 step=20;//步长** fahr=lower;** while(fahr&lt;=upper){**** celsius=5 * (fahr-32) / 9; // 5 / 9=0**** printf(“%3d\\t%6d\\n”,fahr,celsius);**** fahr=fahr+step;**** }**} 2）**#include&lt;stdio.h&gt;**main(){** float fahr,celsius;**** int lower,upper,step;** ** lower=0;//温度表的下限 upper=300;//温度表的上限 step=20;//步长**//%3.0f表明待打印的浮点数（即fahr）至少占3个字符宽，且不带小数点和小数部分；*%6.1f表明另一个待打印的数（celsius）至少占6个字符宽，且小数点后面有1位数字。 //格式说明可以省略宽度和精度，例如，%6f表示待打印的浮点数至少有6个字符宽；%.2f指定待打印的浮点数的小数点后有两位小数，但宽度没有限制；%f则仅仅要求按照浮点数打印该数 fahr=lower;**** while(fahr&lt;=upper){**** celsius=(5.0/9.0)(fahr-32.0);**** printf(“%3.0f %6.1f\\n”,fahr,celsius);**** fahr=fahr+step;**** }**} 3）修改温度转换程序，使之能在转换表的顶部打印一个标题**#include&lt;stdio.h&gt;**main(){** float fahr,celsius;**** int lower,upper,step;** ** lower=0;//温度表的下限 upper=300;//温度表的上限 step=20;//步长** printf(“Fahr Celsius\\n”);** fahr=lower;**** while(fahr&lt;=upper){**** celsius=(5.0/9.0)*(fahr-32.0);**** printf(“%3.0f %6.1f\\n”,fahr,celsius);**** fahr=fahr+step;**** }**} 4）编写一个程序打印摄氏温度转换为相应华氏温度的转换表**#include&lt;stdio.h&gt;**main(){** float fahr,celsius;**** int lower,upper,step;** ** lower=0;//温度表的下限 upper=300;//温度表的上限 step=20;//步长** printf(“Celsius Fahr\\n”);** celsius=lower;**** while(celsius&lt;=upper){**** fahr=(9.0celsius)/5.032.0;**** printf(“%3.0f %6.1f\\n”,celsius,fahr);**** celsius=celsius+step;**** }**} 5）使用for循环打印华氏温度**-摄氏温度对照表#include&lt;stdio.h&gt;**main(){** int fahr;** ** for(fahr=0;fahr&lt;=300;fahr=fahr+20)**** printf(“%3d %6.1f\\n”,fahr,(5.0/9.0)*(fahr-32));**}//**在允许使用某种类型变量值的任何场合，都可以使用该类型的更复杂的表达式。因为printf函数的第三个参数必须是与%6.1f**匹配的浮点值，所以可以在此处使用任何浮点表达式6）修改温度转换程序，要求以逆序（即按照从300度递减到0度的顺序）打印温度转换表 1234567#include&lt;stdio.h&gt;main()&#123; int fahr; for(fahr&#x3D;300;fahr&gt;&#x3D;0;fahr&#x3D;fahr-20) printf(“%3d %6.1f\\n”,fahr,(5.0&#x2F;9.0)*(fahr-32));&#125; 7）符号常量【# define指令可以把符号名（或称为符号常量）定义为一个特定的字符串（#define 名字 替换文本），名字与普通变量名的形式相同，它们都是以字母打头的字母和数字序列；替换文本可以是任何字符序列，而不仅限于数字】 12345678910111213#include&lt;stdio.h&gt;#define LOWER 0&#x2F;&#x2F;表的下限#define UPPER 300&#x2F;&#x2F;表的上限#define STEP 29&#x2F;&#x2F;步长main()&#123; int fahr; for(fahr&#x3D;LOWER;fahr&lt;&#x3D;UPPER;fahr&#x3D;fahr+STEP) printf(“%3d %6.1f\\n”,fahr,(5.0&#x2F;9.0)*(fahr-32));&#125;&#x2F;&#x2F;符号常量名通常用大写字母拼写，这样可以很容易与用小写字母拼写的变量名相区别&#x2F;&#x2F;其中，LOWER，UPPER与STEP都是符号常量，而非变量，因此不需要出现在声明中。【注意，#define指令行的末尾没有分号】"},{"title":"学生管理系统","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:00:09.000Z","comments":true,"path":"未整理/C实例/学生管理系统.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html","excerpt":"","text":"//// main.c//**学生系统//**// Created by廖家龙on 2020/6/15.**// Copyright © 2020 liuyuecao. All rights reserved.**// #include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;stdlib.h&gt; #define NUM 20 //**性别枚举，表示学员的性别typedef enum{**** GenderMale,**** GenderFemale**} Gender; //**学生结构体，表示一个学生数据typedef struct{**** int id;//学生编号 char *name;//学生姓名 int age;//学生年龄 Gender gender;//学生性别 int score;//学生成绩} Student;** //**结构体数组，这个数组中存储的是10个学生的信息Student students[NUM]={**** {1,”jack”,18,GenderMale,100},**** {2,”rose”,21,GenderFemale,45},**** {3,”lily”,26,GenderFemale,23},**** {4,”jim1”,12,GenderMale,89},**** {5,”poly”,3,GenderMale,67},**** {6,”meimei”,19,GenderFemale,89},**** {7,”likai”,31,GenderMale,88},**** {8,”Qiang”,45,GenderMale,12},**** {9,”aDong”,29,GenderMale,76},**** {10,”asan”,35,GenderMale,91},**}; //**代表数组中真正的存储了多少个学生的信息int realLength=10;** //**显示一级菜单，并接收用户的选择int showMenu();** //**查询学生void query();** //**新增学生void addStudent();** //**删除学生void deleteStudent();** //**修改学生void modifyStudent();** //**显示查询的二级菜单int showQueryMenu();** //**查询所有的学生信息void queryAll();** //**根据编号查询void queryById();** //**根据姓名查询void queryByName();** //**根据年龄查询void queryByAge();** //**根据性别查询void queryByGender();** //**根据成绩查询void queryByScore();** *int main(int argc, const char * argv[]) {* ** while(1){** ** //1.显示操作菜单，并接收用户的选择 int userSelect=showMenu();** ** //2.判断用户的选择，根据用户的选择来做不同的事情 switch (userSelect) {**** case 1:**** //查询学生 query();**** break;**** case 2:**** //新增学生 addStudent();**** break;**** case 3:**** //删除学生 deleteStudent();**** break;**** case 4:**** //修改学生 modifyStudent();**** break;**** default:**** //结束程序 break;**** }**}} //**显示一级菜单，并接收用户的选择int showMenu(){**** //1.显示菜单 printf(“******\\n”);**** printf(“*欢迎使用学生管理系统*\\n”);** printf(“* 1.查询学生*\\n”);** printf(“* 2.新增学生*\\n”);** printf(“* 3.删除学生*\\n”);** printf(“* 4.修改学生*\\n”);** printf(“* 5.退出系统*\\n”);** printf(“***\\n”);**** //接收用户的选择 printf(“请输入你的选择：”);**** int userSelect=0;**** scanf(“%d”,&amp;userSelect);**** //3.将用户的选择返回 return userSelect;**} //**查询学生void query(){** ** //1.显示查询的二级菜单，并接收用户的选择 int userSelect=showQueryMenu();**** //2.判断用户的选择，根据用户的选择作出不同的查询 switch (userSelect) {**** case 1:**** //查询所有学生信息 queryAll();**** break;**** case 2:**** //根据编号查询 queryById();**** break;**** case 3:**** //根据姓名查询 queryByName();**** break;**** case 4:**** //根据年龄查询 queryByAge();**** break;**** case 5:**** //根据性别查询 queryByGender();**** break;**** default:**** //根据成绩查询 queryByScore();**** break;**** }**} //**显示查询的二级菜单int showQueryMenu(){** ** //1.显示查询的二级菜单 printf(“***\\n”);**** printf(“*欢迎使用学生管理系统*\\n”);** printf(“* 1.查询所有学生信息*\\n”);** printf(“* 2.根据编号查询*\\n”);** printf(“* 3.根据姓名查询*\\n”);** printf(“* 4.根据年龄查询*\\n”);** printf(“* 5.根据性别查询*\\n”);** printf(“* 6.根据成绩查询*\\n”);** printf(“*****\\n”);** ** //2.接收用户的选择 printf(“请输入你要进行的查询编号：”);**** int userSelect=0;**** scanf(“%d”,&amp;userSelect);**** //3.返回用户的选择 return userSelect;**} //**新增学生void addStudent(){**** //1.输入要新增的学生的信息 //编号不输入，让系统自动生成** //1.1.**先输入姓名 printf(“请输入新增的学生的姓名：”);** ** char name1[10];** ** rewind(stdin);** ** fgets(name1,10,stdin);**** size_t len=strlen(name1);** ** if(name1[len-1] == ‘\\n’){**** name1[len-1]=‘\\0’;**** }** ** char *name=calloc(len+1,sizeof(char));**** strcpy(name, name1);** ** //1.2.输入年龄 printf(“请输入新增的学生的年龄：”);**** int age =0;**** scanf(“%d”,&amp;age);** ** //1.3.输入性别 printf(“请输入新增的学生的性别：0—&gt;男0—&gt;女”);**** int gender =0;**** scanf(“%d”,&amp;gender);** ** //1.4.输入成绩 printf(“请输入新增的学生的成绩：”);**** int score =0;**** scanf(“%d”,&amp;score);** ** //2.创建结构体变量 Student stu={students[realLength-1].id+1,name,age,gender,score};** ** //3.将输入的学生的信息保存在数组中 students[realLength]=stu;**** realLength++;**} //**删除学生void deleteStudent(){** ** printf(“请输入要删除的学生的编号：”);**** int id=0;**** scanf(“%d”,&amp;id);** ** int deleteIndex=-1;**** for(int I=0;i&lt;realLength;i++){**** if(students[I].id==id){**** deleteIndex=I;**** break;**** }**** }** ** if(deleteIndex==-1){**** printf(“你输入的编号有误”);**** return;**** }** ** for(int I=deleteIndex+1;i&lt;realLength;i++){**** students[i-1]=students[I];**** }** ** realLength—;** } //**修改学生void modifyStudent(){** } //**查询所有的学生信息void queryAll(){** ** printf(“编号\\t\\t姓名\\t\\t年龄\\t\\t性别\\t\\t成绩\\t\\t\\n”);** ** for(int I=0;i&lt;realLength;i++){** ** printf(“%d\\t\\t%s\\t\\t%d\\t\\t%s\\t\\t%d\\n”,**** students[I].id,**** students[I].name,**** students[I].age,**** students[I].gender==GenderMale ? “男”:”女”,**** students[I].score**** );**** }** } //**根据编号查询void queryById(){** } //**根据姓名查询void queryByName(){** } //**根据年龄查询void queryByAge(){** } //**根据性别查询void queryByGender(){** } //**根据成绩查询void queryByScore(){** ** //1.让用户输入一个最小成绩，再让用户输入一个最大成绩 int min=0,max=0;**** printf(“请输入最小成绩和最大成绩，使用空格分隔：”);**** scanf(“%d%d”,&amp;min,&amp;max);** ** //3.打印 printf(“编号\\t\\t姓名\\t\\t年龄\\t\\t性别\\t\\t成绩\\t\\t\\n”);** ** for(int I=0;i&lt;realLength;i++){**** if(students[I].score &gt;= min &amp;&amp; students[I].score &lt;= max){**** printf(“%d\\t\\t%s\\t\\t%d\\t\\t%s\\t\\t%d\\n”,**** students[I].id,**** students[I].name,**** students[I].age,**** students[I].gender==GenderMale ? “男”:”女”,**** students[I].score**** );**** }**** }** }"},{"title":"打印最长的输入行","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:01:34.000Z","comments":true,"path":"未整理/C实例/打印最长的输入行.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E6%89%93%E5%8D%B0%E6%9C%80%E9%95%BF%E7%9A%84%E8%BE%93%E5%85%A5%E8%A1%8C.html","excerpt":"","text":"1234567891011121314151617181920212223242526272829303132333435**#include&lt;stdio.h&gt;****#define MAXLINE 1000&#x2F;&#x2F;**允许输入行的最大长度**&#x2F;&#x2F;getline**函数：将一行读入到**s**中并返回其长度**int getline1(char s[],int lim)&#123;**** int c,i;**** for(i&#x3D;0;i&lt;lim-1 &amp;&amp; (c&#x3D;getchar()) !&#x3D; EOF &amp;&amp; c !&#x3D; ‘\\n’;++i)&#123;**** s[i]&#x3D;c;**** &#125;**** if(c&#x3D;&#x3D;‘\\n’)&#123;**** s[I]&#x3D;c;**** ++I;**** &#125;**** s[I]&#x3D;‘\\0’;**** return I;****&#125;****&#x2F;&#x2F;copy**函数：将**from**复制到**to**；这里假定**to**足够大**void copy(char to[],char from[])&#123;**** int I;**** I&#x3D;0;**** while((to[I]&#x3D;from[I]) !&#x3D; ‘\\0’)&#123;**** ++I;**** &#125;****&#125;****&#x2F;&#x2F;**打印最长的输入行**main()&#123;**** int len;&#x2F;&#x2F;**当前行长度** int max;&#x2F;&#x2F;**目前为止发现的最长行的长度** char line[MAXLINE];&#x2F;&#x2F;**当前的输入行** char longest[MAXLINE];&#x2F;&#x2F;**用于保存最长的行 ** max&#x3D;0;**** while((len&#x3D;getline1(line,MAXLINE)) &gt;0)&#123;**** if(len&gt;max)&#123;**** max&#x3D;len;**** copy(longest,line);**** &#125;**** &#125;**** if(max&gt;0)&#123; &#x2F;&#x2F;**存在这样的行** printf(“%s”,longest);**** &#125;**** return 0;****&#125;** 1234567891011121314151617181920212223242526272829303132333435363738394041**#include&lt;stdio.h&gt;****#define MAXLINE 1000&#x2F;&#x2F;**允许输入行的最大长度** int max;&#x2F;&#x2F;**目前为止发现的最长行的长度** char line[MAXLINE];&#x2F;&#x2F;**当前的输入行** char longest[MAXLINE];&#x2F;&#x2F;**用于保存最长的行**&#x2F;&#x2F;getline**函数：将一行读入到**s**中并返回其长度**int getline1(void)&#123;**** int c,i;**** extern char line[];** ** for(I&#x3D;0;i&lt;MAXLINE-1 &amp;&amp; (c&#x3D;getchar()) !&#x3D; EOF &amp;&amp; c !&#x3D; ‘\\n’;++i)&#123;**** line[I]&#x3D;c;**** &#125;**** if(c&#x3D;&#x3D;‘\\n’)&#123;**** line[I]&#x3D;c;**** ++I;**** &#125;**** line[I]&#x3D;‘\\0’;**** return I;****&#125;****&#x2F;&#x2F;copy**函数：将**from**复制到**to**；这里假定**to**足够大**void copy(void)&#123;**** int I;**** extern char line[],longest[];** ** I&#x3D;0;**** while((longest[I]&#x3D;line[I]) !&#x3D; ‘\\0’)&#123;**** ++I;**** &#125;****&#125;****&#x2F;&#x2F;**打印最长的输入行**main()&#123;**** int len;&#x2F;&#x2F;**当前行长度** extern int max;**** extern char longest[];** ** max&#x3D;0;**** while((len&#x3D;getline1()) &gt;0)&#123;**** if(len&gt;max)&#123;**** max&#x3D;len;**** copy();**** &#125;**** &#125;**** if(max&gt;0)&#123; &#x2F;&#x2F;**存在这样的行** printf(“%s”,longest);**** &#125;**** return 0;****&#125;**"},{"title":"打渔晒网问题：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:10:58.000Z","comments":true,"path":"未整理/C实例/打渔晒网问题：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E6%89%93%E6%B8%94%E6%99%92%E7%BD%91%E9%97%AE%E9%A2%98%EF%BC%9A.html","excerpt":"","text":"源代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778//如果一个渔夫从2011年1月1日开始每三天打一次渔，两天晒一次网，//编程实现当输入2011年1月1日以后的任意一天，输出该渔夫是在打渔还是在晒网。#include&lt;stdio.h&gt;int leap(int a)&#123; if((a % 4 == 0 &amp;&amp; a % 100 != 0) || a % 400 == 0)&#123; return 1; &#125; else&#123; return 0; &#125;&#125;int number(int year,int m,int d)&#123; int sum =0,i,j; int a[12]=&#123; 31,28,31,30,31,30,31,31,30,31,30,31 &#125;; int b[12]=&#123; 31,29,31,30,31,30,31,31,30,31,30,31 &#125;; if(leap(year)==1)&#123; for(i=0;i&lt;m-1;i++)&#123; sum+=b[i]; &#125; &#125; else&#123; for(i=0;i&lt;m-1;i++)&#123; sum+=a[i]; &#125; &#125; for(j=2011;j&lt;year;j++)&#123; if(leap(j)==1)&#123; sum+=366; &#125; else&#123; sum+=365; &#125; &#125; sum+=d; return sum;&#125;int main()&#123; int year,month,day,n; printf(&quot;please input year,month,day:\\n&quot;); scanf(&quot;%d%d%d&quot;,&amp;year,&amp;month,&amp;day); n=number(year,month,day); if((n%5)&lt;4&amp;&amp;(n%5)&gt;0)&#123; printf(&quot;%d:%d:%d 打渔\\n&quot;,year,month,day); &#125; else&#123; printf(&quot;%d:%d:%d 晒网\\n&quot;,year,month,day); &#125;&#125;"},{"title":"斐波那契数列：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:10:10.000Z","comments":true,"path":"未整理/C实例/斐波那契数列：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97%EF%BC%9A.html","excerpt":"","text":"源代码： 12345678910111213141516171819202122232425//斐波那契数列的特点是：第1个和第2个数都为1，从第3个数开始，该数是前两个数之和。求这个数列的前30个元素。#include&lt;stdio.h&gt;int main()&#123; int i; long f[31]; f[1]=1,f[2]=1; for(i=3;i&lt;31;i++)&#123; f[i]=f[i-1]+f[i-2]; &#125; for(i=1;i&lt;31;i++)&#123; printf(&quot;%ld &quot;,f[i]); if(i%5==0)&#123; printf(&quot;\\n&quot;); &#125; &#125;&#125;"},{"title":"求n！：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:07:16.000Z","comments":true,"path":"未整理/C实例/求n！：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E6%B1%82n%EF%BC%81%EF%BC%9A.html","excerpt":"","text":"求10！： 源代码： 123456789101112131415161718192021222324//编写代码实现求10！//要将求得的阶乘最终结果定义为单精度或双精度型，如果定义为整型，很容易出现溢出现象。#include&lt;stdio.h&gt;int main(void)&#123; int i=2,n=10; float fac=1; if(n==0||n==1)&#123; printf(&quot;factorial is 1.\\n&quot;); return 0; &#125; while(i&lt;=n)&#123; fac=fac*i; i++; &#125; printf(&quot;factorial of %d is:%.2f.\\n&quot;,n,fac);&#125; 求n！： 源代码： 1234567891011121314151617181920212223//n!#include&lt;stdio.h&gt;int main()&#123; int n,fact=1; printf(&quot;输入一个正整数n: &quot;); scanf(&quot;%d&quot;,&amp;n); for(int i=1;i&lt;=n;i++)&#123; fact *= i; &#125; // while(i&lt;=n)&#123;// fact *= i;// i++;// &#125; printf(&quot;%d! = %d\\n&quot;,n,fact);&#125;"},{"title":"求幂函数power(m,n)：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:05:07.000Z","comments":true,"path":"未整理/C实例/求幂函数power(m,n)：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E6%B1%82%E5%B9%82%E5%87%BD%E6%95%B0power(m,n)%EF%BC%9A.html","excerpt":"","text":"源代码： 123456789101112131415161718192021222324252627282930/* 求幂的函数power(m,n)，用于计算整数m的n次幂，其中n是正整数（标准库中提供了一个计算x^y的函数pow(x,y)）*/#include&lt;stdio.h&gt;//power函数的参数使用的名字只在power函数内部有效，对其他任何函数都是不可见的，其他函数可以使用与之相同的参数名字而不会引起冲突//我们通常把函数定义中圆括号内列表中出现的变量称为形式参数，而把函数调用中与形式参数对应的值称为实际参数//在C语言中，所有函数参数都是“通过值”传递的，也就是说，传递给被调用函数的参数值存放在临时变量中，而不是存放在原来的变量中；在C语言中，被调用函数不能直接修改主调函数中变量的值，而只能修改其私有的临时副本的值int power(int base,int n)&#123; int p=1; for(int i=1;i&lt;=n;++i)&#123; p=p*base; &#125; return p;&#125;int main()&#123; int i=3; printf(&quot;%d %d %d\\n&quot;,i,power(2,i),power(-3,i)); return 0;&#125;"},{"title":"求散列之和S=a+aa+aaa+…+aaa…a(n个a)：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:07:28.000Z","comments":true,"path":"未整理/C实例/求散列之和S=a+aa+aaa+…+aaa…a(n个a)：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E6%B1%82%E6%95%A3%E5%88%97%E4%B9%8B%E5%92%8CS=a+aa+aaa+%E2%80%A6+aaa%E2%80%A6a(n%E4%B8%AAa)%EF%BC%9A.html","excerpt":"","text":"源代码： 12345678910111213141516171819202122//输入两个整数a和n，a的范围是[0,9],n的范围是[1,8],求散列之和S=a+aa+aaa+…+aaa…a(n个a)#include&lt;stdio.h&gt;int main()&#123; int a,n; scanf(&quot;%d %d&quot;,&amp;a,&amp;n); int sum=0; int i; int t=0; for(i=0;i&lt;n;i++)&#123; t=t*10+a; sum += t; &#125; printf(&quot;%d\\n&quot;,sum);&#125;"},{"title":"水仙花数：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:06:51.000Z","comments":true,"path":"未整理/C实例/水仙花数：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E6%B0%B4%E4%BB%99%E8%8A%B1%E6%95%B0%EF%BC%9A.html","excerpt":"","text":"源代码： 1234567891011121314151617181920212223242526//水仙花数是指一个N位正整数（N&gt;=3），它的每个位上的数字的N次幂之和等于它本身，例如：153=1^3+5^3+3^3#include &lt;stdio.h&gt;int main()&#123; int hun, ten, ind, n; printf(&quot;result is:\\n&quot;); for( n=100; n&lt;1000; n++ )&#123; /*整数的取值范围*/ hun = n / 100; ten = (n-hun*100) / 10; ind = n % 10; if(n == hun*hun*hun + ten*ten*ten + ind*ind*ind)&#123; /*各位上的立方和是否与原数n相等*/ printf(&quot;%d &quot;, n); &#125; &#125; printf(&quot;\\n&quot;); return 0;&#125;"},{"title":"求100～200之间的素数：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:07:46.000Z","comments":true,"path":"未整理/C实例/求100～200之间的素数：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E6%B1%82100%EF%BD%9E200%E4%B9%8B%E9%97%B4%E7%9A%84%E7%B4%A0%E6%95%B0%EF%BC%9A.html","excerpt":"","text":"源代码： 123456789101112131415161718192021222324252627282930313233//素数是大于1的整数，除了能被自身和1整除外，不能被其他正整数整除。#include&lt;stdio.h&gt;#include&lt;math.h&gt;int main()&#123; int i,j,n=0; for(i=100;i&lt;=200;i++)&#123; for(j=2;j&lt;=sqrt(i);j++)&#123; if(i%j==0)&#123; break; &#125; else if(j&gt;sqrt(i)-1)&#123; printf(&quot;%d &quot;,i); n++; if(n%5==0)&#123; printf(&quot;\\n&quot;); &#125; &#125; else&#123; continue; &#125; &#125; &#125;&#125;"},{"title":"猜字谜游戏","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:03:21.000Z","comments":true,"path":"未整理/C实例/猜字谜游戏.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E7%8C%9C%E5%AD%97%E8%B0%9C%E6%B8%B8%E6%88%8F.html","excerpt":"","text":"产生一个随机数：1）先引入一个系统头文件#include&lt;stdlib.h&gt;2）int num=arc4random_uniform(10);将产生一个0～9的随机数int num=arc4random_uniform(11)+10;将产生一个10～20的随机数 随机数：每次召唤rand（）就得到一个随机的整数"},{"title":"特殊的完全平方数：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:06:40.000Z","comments":true,"path":"未整理/C实例/特殊的完全平方数：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E7%89%B9%E6%AE%8A%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0%EF%BC%9A.html","excerpt":"","text":"源代码： 1234567891011121314151617181920212223242526272829303132//在3位整数100～999中查找符合如下条件的整数并在屏幕上输出：这个数既是完全平方数，又有两个数字相同，如121，144等。#include&lt;stdio.h&gt;int main()&#123; int i,j; int hun,ten,data; printf(&quot;结果是:\\n&quot;); for(i=100;i&lt;=999;i++)&#123; j=10; while(j*j&lt;=i)&#123; if(i==j*j)&#123; hun=i/100; data=i-hun*100; ten=data/10; data=data-ten*10; if(hun==ten||hun==data||ten==data)&#123; printf(&quot;%5d&quot;,i); &#125; &#125; j++; &#125; &#125; printf(&quot;\\n&quot;);&#125;"},{"title":"将数组元素左边部分全是奇数，右边全是偶数，时间复杂度为O(n)：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:08:52.000Z","comments":true,"path":"未整理/C实例/将数组元素左边部分全是奇数，右边全是偶数，时间复杂度为O(n)：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E5%B0%86%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E5%B7%A6%E8%BE%B9%E9%83%A8%E5%88%86%E5%85%A8%E6%98%AF%E5%A5%87%E6%95%B0%EF%BC%8C%E5%8F%B3%E8%BE%B9%E5%85%A8%E6%98%AF%E5%81%B6%E6%95%B0%EF%BC%8C%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E4%B8%BAO(n)%EF%BC%9A.html","excerpt":"","text":"源代码： 12345678910111213141516171819202122232425262728293031323334#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;int main()&#123; int ary[11]=&#123;1,2,3,4,5,6,7,8,9,10,11&#125;; int i=0,j=10; int temp; while(i&lt;j)&#123; while(ary[i]%2!=0)&#123; i++; &#125; while(ary[j]%2==0)&#123; j--; &#125; if(i&lt;j)&#123; temp=ary[i]; ary[i]=ary[j]; ary[j]=temp; &#125; &#125; for(i=0;i&lt;11;i++)&#123; printf(&quot;%d &quot;,ary[i]); &#125;&#125;"},{"title":"素数","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:03:08.000Z","comments":true,"path":"未整理/C实例/素数.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E7%B4%A0%E6%95%B0.html","excerpt":"","text":""},{"title":"计算log2X：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:09:05.000Z","comments":true,"path":"未整理/C实例/计算log2X：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E8%AE%A1%E7%AE%97log2X%EF%BC%9A.html","excerpt":"","text":"源代码： 12345678910111213141516171819#include&lt;stdio.h&gt;int main()&#123; int x; int ret=0; scanf(&quot;%d&quot;,&amp;x); int t=x;//计算之前先保存原始的值 while(x&gt;1)&#123; x/=2; ret++; &#125; printf(&quot;log2 of %d is %d.\\n&quot;,t,ret);&#125;"},{"title":"求平均数","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:01:00.000Z","comments":true,"path":"未整理/C实例/求平均数.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E6%B1%82%E5%B9%B3%E5%9D%87%E6%95%B0.html","excerpt":"","text":"123456789101112131415**&#x2F;&#x2F;**算平均数：让用户输入一系列的正整数，最后输入**-1**表示输入结束，然后程序计算出这些数字的平均数，输入的数字的个数**#include&lt;stdio.h&gt;****int main()&#123;**** int number;**** int sum&#x3D;0;**** int count&#x3D;0;** ** scanf(“%d”,&amp;number);**** while(number !&#x3D; -1)&#123;**** sum+&#x3D;number;**** count++;**** scanf(“%d”,&amp;number);**** &#125;**** printf(“**输入的数字个数为**%d\\n”,count);**** printf(“**输入数字的平均数为**%f\\n”,1.0*sum&#x2F;count);****&#125;** 123456789101112131415161718192021222324252627&#x2F;&#x2F;计算用户输入的数字的平均数，并输出所有大于平均数的数#include&lt;stdio.h&gt;int main()&#123; int x; double sum&#x3D;0; int cnt&#x3D;0; printf(“请输入数字的数量：”); scanf(“%d”,&amp;cnt); if(cnt&gt;0)&#123; int number[cnt]; scanf(“%d”,&amp;x); while(x !&#x3D; -1)&#123; number[cnt]&#x3D;x; sum+&#x3D;x; cnt++; scanf(“%d”,&amp;x); &#125; printf(“%f\\n”,sum&#x2F;cnt); int I; for(I&#x3D;0;i&lt;cnt;i++)&#123; if(number[I]&gt;sum&#x2F;cnt)&#123; printf(“%d\\n”,number[I]); &#125; &#125; &#125;&#125;"},{"title":"翻转数组：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:10:22.000Z","comments":true,"path":"未整理/C实例/翻转数组：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E7%BF%BB%E8%BD%AC%E6%95%B0%E7%BB%84%EF%BC%9A.html","excerpt":"","text":"源代码： 1234567891011121314151617181920#include&lt;stdio.h&gt; int main()&#123; int arr[]=&#123;10,210,21302,132,43,24,3,5,46,4&#125;; int len=sizeof(arr)/sizeof(arr[0]); for(int i=0;i&lt;len/2;i++)&#123; int temp = arr[i]; arr[i] = arr[len-1-i]; arr[len-1-i] = temp; &#125; for(int i=0;i&lt;len;i++)&#123; printf(&quot;%d &quot;,arr[i]); &#125;&#125;"},{"title":"给定不超过6的正整数A，考虑从A开始连续4个数字，请输出所有由它们组成的无重复数字的3位数：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:09:39.000Z","comments":true,"path":"未整理/C实例/给定不超过6的正整数A，考虑从A开始连续4个数字，请输出所有由它们组成的无重复数字的3位数：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E7%BB%99%E5%AE%9A%E4%B8%8D%E8%B6%85%E8%BF%876%E7%9A%84%E6%AD%A3%E6%95%B4%E6%95%B0A%EF%BC%8C%E8%80%83%E8%99%91%E4%BB%8EA%E5%BC%80%E5%A7%8B%E8%BF%9E%E7%BB%AD4%E4%B8%AA%E6%95%B0%E5%AD%97%EF%BC%8C%E8%AF%B7%E8%BE%93%E5%87%BA%E6%89%80%E6%9C%89%E7%94%B1%E5%AE%83%E4%BB%AC%E7%BB%84%E6%88%90%E7%9A%84%E6%97%A0%E9%87%8D%E5%A4%8D%E6%95%B0%E5%AD%97%E7%9A%843%E4%BD%8D%E6%95%B0%EF%BC%9A.html","excerpt":"","text":"源代码： 12345678910111213141516171819202122232425262728293031323334#include&lt;stdio.h&gt;int main()&#123; int a=6; scanf(&quot;%d&quot;,&amp;a); int i,j,k; int cnt=0; for(i=a;i&lt;=a+3;i++)&#123; for(j=a;j&lt;=a+3;j++)&#123; for(k=a;k&lt;=a+3;k++)&#123; if(i != j &amp;&amp; i != k &amp;&amp; j != k)&#123; cnt++; printf(&quot;%d%d%d&quot;,i,j,k); if(cnt==6)&#123; printf(&quot;\\n&quot;); cnt=0; &#125; else&#123; printf(&quot; &quot;); &#125; &#125; &#125; &#125; &#125;&#125;"},{"title":"自守数：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:05:37.000Z","comments":true,"path":"未整理/C实例/自守数：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E8%87%AA%E5%AE%88%E6%95%B0%EF%BC%9A.html","excerpt":"","text":"源代码： 1234567891011121314151617181920212223242526272829303132//自守数是指一个数的平方的尾数等于该数自身的自然数，如25^2=625,76^2=5776,9376^2=87909376.#include&lt;stdio.h&gt;int main()&#123; long mul,number,k,ll,kk; printf(&quot;列出200000以内的自守数:\\n&quot;); for(number=0;number&lt;200000;number++)&#123; for(mul=number,k=1;(mul/=10)&gt;0;k*=10)&#123;&#125;; //由number的位数确定截取数字进行乘法时的系数k kk=k*10; //kk为截取部分积时的系数 mul=0; //积的最后n位 ll=10; //ll为截取乘数相应位时的系数 while(k&gt;0)&#123; mul=(mul+(number%(k*10))*(number%ll-number%(ll/10)))%kk; //(部分积+截取被乘数的后N位*截取乘数的第M位)，%kk再截取部分积 k/=10; //k为截取被乘数时的系数 ll*=10; &#125; if(number==mul)&#123; //判断若为自守数则输出 printf(&quot;%ld &quot;,number); &#125; &#125;&#125;"},{"title":"尼科彻斯定理：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:08:40.000Z","comments":true,"path":"未整理/C实例/尼科彻斯定理：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E5%B0%BC%E7%A7%91%E5%BD%BB%E6%96%AF%E5%AE%9A%E7%90%86%EF%BC%9A.html","excerpt":"","text":"源代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051//尼科彻斯定理的内容是：任何一个整数的立方都可以写成一串连续奇数的和。#include&lt;stdio.h&gt;int main()&#123; int i,k=0,l,n,m,sum,flag=1; printf(&quot;please input a number:\\n&quot;); scanf(&quot;%d&quot;,&amp;n); m=n*n*n; i=m/2; if(i%2==0)&#123; i=i+1; &#125; while(flag==1&amp;&amp;i&gt;=1)&#123; sum=0; k=0; while(1)&#123; sum+=(i-2*k); k++; if(sum==m)&#123; printf(&quot;%d*%d*%d=%d=&quot;,n,n,n,m); for(l=0;l&lt;k-1;l++)&#123; &#125;; printf(&quot;%d+&quot;,i-1*2); printf(&quot;%d\\n&quot;,i-(k-1)*2); flag=0; break; &#125; if(sum&gt;m)&#123; break; &#125; &#125; i-=2; &#125;&#125;"},{"title":"统计数组中每一种数字出现的次数：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:06:27.000Z","comments":true,"path":"未整理/C实例/统计数组中每一种数字出现的次数：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E7%BB%9F%E8%AE%A1%E6%95%B0%E7%BB%84%E4%B8%AD%E6%AF%8F%E4%B8%80%E7%A7%8D%E6%95%B0%E5%AD%97%E5%87%BA%E7%8E%B0%E7%9A%84%E6%AC%A1%E6%95%B0%EF%BC%9A.html","excerpt":"","text":"源代码： 123456789101112131415161718192021222324252627282930313233//写一个程序，输入数量不确定的[0,9]范围内的整数，统计每一种数字出现的次数，输入-1表示结束#include&lt;stdio.h&gt;int main()&#123; const int number=10; int x; int count[number]; int i; //初始化数组：count[number]=0 for(i=0;i&lt;number;i++)&#123; count[i]=0; &#125; scanf(&quot;%d&quot;,&amp;x); while(x != -1)&#123; if(x&gt;=0 &amp;&amp; x&lt;= 9)&#123; count[x]++; &#125; scanf(&quot;%d&quot;,&amp;x); &#125; for(i=0;i&lt;number;i++)&#123; printf(&quot;%d:%d\\n&quot;,i,count[i]); &#125;&#125;"},{"title":"求最大公约数","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:00:45.000Z","comments":true,"path":"未整理/C实例/求最大公约数.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E6%B1%82%E6%9C%80%E5%A4%A7%E5%85%AC%E7%BA%A6%E6%95%B0.html","excerpt":"","text":"123456789101112131415161718192021**&#x2F;&#x2F;**枚举求最大公约数**#include&lt;stdio.h&gt;****int main()&#123;**** int a,b;**** int min;**** scanf(“%d %d”,&amp;a,&amp;b);**** if(a&lt;b)&#123;**** min&#x3D;a;**** &#125;else&#123;**** min&#x3D;b;**** &#125;**** int ret&#x3D;0;**** int I;**** for(I&#x3D;1;i&lt;min;i++)&#123;**** if(a%I&#x3D;&#x3D;0)&#123;**** if(b%I&#x3D;&#x3D;0)&#123;**** ret&#x3D;i;**** &#125;**** &#125;**** &#125;**** printf(“%d**和**%d**的最大公约数是**%d.\\n”,a,b,ret);****&#125;** 123456789101112**&#x2F;&#x2F;**辗转相除法求最大公约数**#include&lt;stdio.h&gt;****int main()&#123;**** int a,b;**** int t;**** scanf(“%d %d”,&amp;a,&amp;b);**** while(b!&#x3D;0)&#123;**** t&#x3D;a%b;**** a&#x3D;b;**** b&#x3D;t;**** &#125;**** printf(“**最大公约数**&#x3D;%d\\n”,a);****&#125;** 12345678910111213141516&#x2F;&#x2F;约分#include&lt;stdio.h&gt;int main()&#123; int dividend,divisor; scanf(“%d&#x2F;%d”,&amp;dividend,&amp;divisor); int a&#x3D;dividend; int b&#x3D;divisor; int t; while(b&gt;0)&#123; t&#x3D;a%b; a&#x3D;b; b&#x3D;t; &#125; printf(“%d&#x2F;%d\\n”,dividend&#x2F;a,divisor&#x2F;a);&#125;"},{"title":"计算时间差：","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:09:16.000Z","comments":true,"path":"未整理/C实例/计算时间差：.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E8%AE%A1%E7%AE%97%E6%97%B6%E9%97%B4%E5%B7%AE%EF%BC%9A.html","excerpt":"","text":"1） 源代码： 12345678910111213141516171819//计算时间差#include&lt;stdio.h&gt;int main()&#123; int hour1,minute1; int hour2,minute2; scanf(&quot;%d:%d&quot;,&amp;hour1,&amp;minute1); scanf(&quot;%d:%d&quot;,&amp;hour2,&amp;minute2); int t1=hour1*60+minute1; int t2=hour2*60+minute2; int t=t2-t1; printf(&quot;时间差是%d小时%d分。\\n&quot;,t/60,t%60);&#125; 2） 源代码： 12345678910111213141516171819202122#include&lt;stdio.h&gt;int main()&#123; int hour1,minute1; int hour2,minute2; scanf(&quot;%d:%d&quot;,&amp;hour1,&amp;minute1); scanf(&quot;%d:%d&quot;,&amp;hour2,&amp;minute2); int ih=hour2-hour1; int im=minute2-minute1; if(im&lt;0)&#123; im=60+im; ih--; &#125; printf(&quot;时间差是%d小时%d分。\\n&quot;,ih,im);&#125;"},{"title":"进制转换","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:01:12.000Z","comments":true,"path":"未整理/C实例/进制转换.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2.html","excerpt":"","text":"1234567891011121314151617181920212223十进制转换为二进制**&#x2F;&#x2F;%**和**&#x2F;**的应用。**%**为模运算符，或称求余运算符，**%**两侧均应为整型数据；**&#x2F;**为除法运算符，两个整数相除的结果为整数，运算的两个数中有一个数为实数，则结果是**double**型。**#include&lt;stdio.h&gt;****#include&lt;stdlib.h&gt;****void main()&#123;**** int i,j,n,m;**** int a[16]&#x3D;&#123;**** 0**** &#125;;**** system(“cls”);**** printf(“**请输入一个十进制数**(0~32767):\\n”);**** scanf(“%d”,&amp;n);**** for(m&#x3D;0;m&lt;15;m++)&#123;**** I&#x3D;n%2;**** j&#x3D;n&#x2F;2;**** n&#x3D;j;**** a[m]&#x3D;I;**** &#125;**** for(m&#x3D;15;m&gt;&#x3D;0;m—)&#123;**** printf(“%d”,a[m]);**** if(m%4&#x3D;&#x3D;0)**** printf(“ “);**** &#125;**** printf(“\\n”);****&#125;** 12345678910111213141516171819202122232425？**n**进制转换为十进制**#include&lt;stdio.h&gt;****#include&lt;string.h&gt;****void main()&#123;**** long t1;**** int i,n,t,t3;**** char a[100];**** printf(“please input a number:\\n”);**** gets(a);**** strupr(a);**** t1&#x3D;0;**** printf(“**请输入进制**n(2**或**8**或**16)**：**\\n”);**** scanf(“%d”,&amp;n);**** for(I&#x3D;0;i&lt;t3;i++)&#123;**** if(a[I]-‘0’&gt;&#x3D;n&amp;&amp;a[I]-‘A’||a[I]-‘A’+10&gt;&#x3D;n)&#123;**** printf(“**输入有误！！**”);**** exit(0);**** &#125;**** if(a[I]&gt;&#x3D;‘0’&amp;&amp;a[I]&lt;&#x3D;‘9’)**** t&#x3D;a[I]-‘0’;**** else if(n&gt;&#x3D;11&amp;&amp;(a[I]&gt;&#x3D;‘A’&amp;&amp;a[I]&lt;&#x3D;‘A’+n-10))**** t&#x3D;a[I]-‘A’+10;**** t1&#x3D;t1*n+t;**** &#125;**** printf(“**十进制形式是**%1d\\n”,t1);****&#125;**"},{"title":"走迷宫小游戏","date":"2018-12-31T16:00:00.000Z","updated":"2021-03-12T03:02:16.000Z","comments":true,"path":"未整理/C实例/走迷宫小游戏.html","permalink":"http://example.com/%E6%9C%AA%E6%95%B4%E7%90%86/C%E5%AE%9E%E4%BE%8B/%E8%B5%B0%E8%BF%B7%E5%AE%AB%E5%B0%8F%E6%B8%B8%E6%88%8F.html","excerpt":"","text":""}],"posts":[{"title":"剑指Offer_18_删除链表的节点","slug":"《剑指Offer(第2版)》/《剑指Offer(第2版)》_链表/剑指Offer_18_删除链表的节点","date":"2021-05-30T16:00:00.000Z","updated":"2021-07-03T10:15:24.016Z","comments":true,"path":"2021/05/31/《剑指Offer(第2版)》/《剑指Offer(第2版)》_链表/剑指Offer_18_删除链表的节点/","link":"","permalink":"http://example.com/2021/05/31/%E3%80%8A%E5%89%91%E6%8C%87Offer(%E7%AC%AC2%E7%89%88)%E3%80%8B/%E3%80%8A%E5%89%91%E6%8C%87Offer(%E7%AC%AC2%E7%89%88)%E3%80%8B_%E9%93%BE%E8%A1%A8/%E5%89%91%E6%8C%87Offer_18_%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E8%8A%82%E7%82%B9/","excerpt":"","text":"题目1描述：123456789给定单向链表的头指针和一个节点指针，定义一个函数在O(1)时间内删除该节点链表节点与函数的定义如下：struct ListNode &#123; int m_nValue; ListNode* m_pNext;&#125;;void DeleteNode(ListNode** pListHead,ListNode* pToBeDeleted); 解法1：在单向链表中删除一个节点，常规的做法是从链表的头节点开始，顺序遍历查找要删除的节点，并在链表中删除该节点，这种思路由于需要顺序查找，时间复杂度自然就是O(n)了；之所以需要从头开始查找，是因为我们需要得到将被删除的节点的前一个节点。在单向链表中，节点中没有指向前一个节点的指针，所以只好从链表的头节点开始顺序查找 12345678910111213141516171819202122232425262728293031323334353637383940//我们可以很方便的得到要删除的节点的下一个节点，如果我们把下一个节点的内容复制到需要删除的节点上覆盖原有的内容，再把下一个节点删除，那是不是就相当于把当前需要删除的节点删除了？//有一个问题：如果要删除的节点位于链表的尾部，那么它就没有下一个节点，我们仍需要从链表的头节点开始，顺序遍历得到该节点的前序节点，并完成删除操作void DeleteNode(ListNode** pListHead, ListNode* pToBeDeleted) &#123; if(pListHead == NULL || pToBeDeleted == NULL) return; //要删除的结点不是尾结点 if(pToBeDeleted-&gt;m_pNext != NULL) &#123; ListNode* pNext = pToBeDeleted-&gt;m_pNext; pToBeDeleted-&gt;m_nValue = pNext-&gt;m_nValue; pToBeDeleted-&gt;m_pNext = pNext-&gt;m_pNext; delete pNext; pNext = NULL; &#125; //链表只有一个结点，删除头结点（也是尾结点） else if(*pListHead == pToBeDeleted) &#123; delete pToBeDeleted; pToBeDeleted = NULL; *pListHead = NULL; //如果链表中只有一个节点，而我们又要删除链表的头节点（也是尾节点），那么此时我们在删除节点之后，还需要把链表的头节点设置为NULL &#125; //链表中有多个结点，删除尾结点 else &#123; ListNode* pNode = *pListHead; while(pNode-&gt;m_pNext != pToBeDeleted) &#123; pNode = pNode-&gt;m_pNext; &#125; pNode-&gt;m_pNext = NULL; delete pToBeDeleted; pToBeDeleted = NULL; &#125;&#125; ⭐️值得注意的是，上述代码仍然不是完美的代码，因为它基于一个假设：要删除的节点的确在链表中，我们需要O(n)的时间才能判断链表中是否包含某一节点。受到O(1)时间的限制，我们不得不把确保节点在链表中的责任推给了函数DeleteNode的调用者。在面试的时候，我们可以和面试官讨论这个假设。 ❗️LeetCode_83_删除排序链表中的重复元素 题目2_1描述：12345678910111213存在一个按升序排列的链表，给你这个链表的头节点 head ，请你删除所有重复的元素，使每个元素只出现一次。返回同样按升序排列的结果链表。示例：输入：head &#x3D; [1,1,2]输出：[1,2]输入：head &#x3D; [1,1,2,3,3]输出：[1,2,3]提示：1. 链表中节点数目在范围 [0, 300] 内2. -100 &lt;&#x3D; Node.val &lt;&#x3D; 1003. 题目数据保证链表已经按升序排列 解法1：123456789101112131415161718192021222324252627282930/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) &#123;&#125; * ListNode(int x) : val(x), next(nullptr) &#123;&#125; * ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* deleteDuplicates(ListNode* head) &#123; if (head == NULL) return NULL; ListNode* cur = head; while (cur-&gt;next != NULL) &#123; if (cur-&gt;val == cur-&gt;next-&gt;val) &#123; cur-&gt;next = cur-&gt;next-&gt;next; &#125; else &#123; cur = cur-&gt;next; &#125; &#125; return head; &#125;&#125;; ❗️LeetCode_82_删除排序链表中的重复元素2 题目2_2描述：12345678910111213存在一个按升序排列的链表，给你这个链表的头节点 head ，请你删除链表中所有存在数字重复情况的节点，只保留原始链表中没有重复出现的数字。返回同样按升序排列的结果链表。示例：输入：head &#x3D; [1,2,3,3,4,4,5]输出：[1,2,5]输入：head &#x3D; [1,1,1,2,3]输出：[2,3]提示：1. 链表中节点数目在范围 [0, 300] 内2. -100 &lt;&#x3D; Node.val &lt;&#x3D; 1003. 题目数据保证链表已经按升序排列 解法1：1234567891011121314151617181920212223242526272829303132333435363738/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) &#123;&#125; * ListNode(int x) : val(x), next(nullptr) &#123;&#125; * ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* deleteDuplicates(ListNode* head) &#123; if (head == NULL) return NULL; //创建哑节点，让它的指针指向链表的头节点，这样在删除节点的时候，就不需要再判断删除的是否是头结点了 //dummy-&gt;val = 0, dummy-&gt;next = head; ListNode* dummy = new ListNode(0, head); ListNode* cur = dummy; while (cur-&gt;next != NULL &amp;&amp; cur-&gt;next-&gt;next != NULL) &#123; if (cur-&gt;next-&gt;val == cur-&gt;next-&gt;next-&gt;val) &#123; int x = cur-&gt;next-&gt;val; //x表示要删除的节点的值 while (cur-&gt;next != NULL &amp;&amp; cur-&gt;next-&gt;val == x) &#123; cur-&gt;next = cur-&gt;next-&gt;next; &#125; &#125; else &#123; cur = cur-&gt;next; &#125; &#125; return dummy-&gt;next; //如果链表中只有一个节点，直接返回头节点 &#125;&#125;; ❗️LeetCode_237_删除链表中的节点 题目3_1描述：123456789101112131415给定单向链表的头指针和一个要删除的节点的值，定义一个函数删除该节点。返回删除后的链表的头节点。示例1:输入: head &#x3D; [4,5,1,9], val &#x3D; 5输出: [4,1,9]解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.示例2:输入: head &#x3D; [4,5,1,9], val &#x3D; 1输出: [4,5,9]解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.说明：1.题目保证链表中节点的值互不相同2.若使用 C 或 C++ 语言，你不需要 free 或 delete 被删除的节点 解法1：12345678910111213141516171819202122232425262728/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* deleteNode(ListNode* head, int val) &#123; if (head -&gt; val == val) return head -&gt; next; ListNode *pre = head, *cur = head -&gt; next; while(cur != NULL &amp;&amp; cur -&gt; val != val) &#123; pre = cur; cur = cur-&gt;next; &#125; //注意这里不能加上条件：cur != NULL &amp;&amp; cur-&gt;next != NULL //[-3,5,-99] -99 if(cur != NULL) pre -&gt; next = cur -&gt; next; return head; &#125;&#125;; 解法2：12345678910111213141516/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: void deleteNode(ListNode* node) &#123; node -&gt; val = node -&gt; next -&gt; val; node -&gt; next = node -&gt; next -&gt; next; &#125;&#125;; ❗️LeetCode_203_移除链表元素 题目3_2描述：12345678910111213141516给你一个链表的头节点 head 和一个整数 val ，请你删除链表中所有满足 Node.val &#x3D;&#x3D; val 的节点，并返回新的头节点 。示例：输入：head &#x3D; [1,2,6,3,4,5,6], val &#x3D; 6输出：[1,2,3,4,5]输入：head &#x3D; [], val &#x3D; 1输出：[]输入：head &#x3D; [7,7,7,7], val &#x3D; 7输出：[]提示：1. 列表中的节点数目在范围 [0, 10^4] 内2. 1 &lt;&#x3D; Node.val &lt;&#x3D; 503. 0 &lt;&#x3D; val &lt;&#x3D; 50 解法1：12345678910111213141516171819202122232425262728293031/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) &#123;&#125; * ListNode(int x) : val(x), next(nullptr) &#123;&#125; * ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* removeElements(ListNode* head, int val) &#123; if (head == NULL) return NULL; ListNode* dummyHead = new ListNode(0, head); ListNode* temp = dummyHead; while (temp-&gt;next != NULL) &#123; if (temp-&gt;next-&gt;val == val) &#123; temp-&gt;next = temp-&gt;next-&gt;next; &#125; else &#123; temp = temp-&gt;next; &#125; &#125; return dummyHead-&gt;next; //返回头节点 &#125;&#125;; ❗️LeetCode_19_删除链表的倒数第N个节点 题目4描述：1234567891011121314151617181920给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。示例:输入：head &#x3D; [1,2,3,4,5], n &#x3D; 2输出：[1,2,3,5]输入：head &#x3D; [1], n &#x3D; 1输出：[]输入：head &#x3D; [1,2], n &#x3D; 1输出：[1]输入：head &#x3D; [1,2], n &#x3D; 2输出：[2]提示：1. 链表中结点的数目为 sz2. 1 &lt;&#x3D; sz &lt;&#x3D; 303. 0 &lt;&#x3D; Node.val &lt;&#x3D; 1004. 1 &lt;&#x3D; n &lt;&#x3D; sz 解法1：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) &#123;&#125; * ListNode(int x) : val(x), next(nullptr) &#123;&#125; * ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125; * &#125;; */class Solution &#123;public: //得到链表的长度 int getLength(ListNode* head) &#123; int length = 0; while (head != NULL) &#123; ++length; head = head-&gt;next; &#125; return length; &#125; ListNode* removeNthFromEnd(ListNode* head, int n) &#123; ListNode* dummy = head; int length = getLength(head); //链表的长度 if (length &lt; n || length == 0) return NULL; else if (length == 1 &amp;&amp; n == 1) return NULL; else if (length == n) return dummy-&gt;next; //删除链表的头节点 ListNode* cur = dummy; for (int i = 1; i &lt; length - n; ++i) &#123; cur = cur-&gt;next; &#125; cur-&gt;next = cur-&gt;next-&gt;next; return dummy; &#125;&#125;;","categories":[{"name":"《剑指Offer(第2版)》","slug":"《剑指Offer-第2版-》","permalink":"http://example.com/categories/%E3%80%8A%E5%89%91%E6%8C%87Offer-%E7%AC%AC2%E7%89%88-%E3%80%8B/"}],"tags":[{"name":"《剑指Offer(第2版)》_链表","slug":"《剑指Offer-第2版-》-链表","permalink":"http://example.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer-%E7%AC%AC2%E7%89%88-%E3%80%8B-%E9%93%BE%E8%A1%A8/"}]},{"title":"剑指Offer_24_反转链表","slug":"《剑指Offer(第2版)》/《剑指Offer(第2版)》_链表/剑指Offer_24_反转链表","date":"2021-05-29T16:00:00.000Z","updated":"2021-07-03T10:15:39.542Z","comments":true,"path":"2021/05/30/《剑指Offer(第2版)》/《剑指Offer(第2版)》_链表/剑指Offer_24_反转链表/","link":"","permalink":"http://example.com/2021/05/30/%E3%80%8A%E5%89%91%E6%8C%87Offer(%E7%AC%AC2%E7%89%88)%E3%80%8B/%E3%80%8A%E5%89%91%E6%8C%87Offer(%E7%AC%AC2%E7%89%88)%E3%80%8B_%E9%93%BE%E8%A1%A8/%E5%89%91%E6%8C%87Offer_24_%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/","excerpt":"","text":"❗️LeetCode_206_反转链表 题目描述：1234567891011121314定义一个函数，输入一个链表的头节点，反转该链表并输出反转后链表的头节点示例：输入: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出: 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL限制：0 &lt;&#x3D; 节点个数 &lt;&#x3D; 5000链表节点定义如下：struct ListNode &#123; int m_nKey; ListNode* m_pNext;&#125;; 解法1：循环1234567891011121314151617181920212223ListNode* ReverseList(ListNode* pHead)&#123; ListNode* pReversedHead = nullptr; //反转后的链表头节点 ListNode* pNode = pHead; //pNode初始化时指向头节点 ListNode* pPrev = nullptr; while(pNode != nullptr) &#123; //通过后面的代码可以看到节点1、节点2之间的指针断了，所以需要有一个指针提前保存节点2 ListNode* pNext = pNode-&gt;m_pNext; if(pNext == nullptr) pReversedHead = pNode; pNode-&gt;m_pNext = pPrev; //这一行代码极容易理解错，pNode的下一个节点指向的是一个空节点，注意区分‘pPrev = pNode-&gt;m_pNext;’ //NULL &lt;- 1 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL pPrev = pNode; //pPrev指向节点1 pNode = pNext; //pNode指向节点2 &#125; return pReversedHead;&#125; 解法2：递归123456789101112131415161718192021222324252627/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* reverseList(ListNode* head) &#123; if (head == NULL || head-&gt;next == NULL) &#123; return head; &#125; //递归实现 ListNode* newHead = reverseList(head-&gt;next); //递归到最里层的时候：newHead此时指向5 //递归到最里层的时候：head此时指向4，head-&gt;next指4-&gt;5，head-&gt;next-&gt;next = head指5-&gt;4 head-&gt;next-&gt;next = head; head-&gt;next = NULL; //4指向NULL return newHead; &#125;&#125;;","categories":[{"name":"《剑指Offer(第2版)》","slug":"《剑指Offer-第2版-》","permalink":"http://example.com/categories/%E3%80%8A%E5%89%91%E6%8C%87Offer-%E7%AC%AC2%E7%89%88-%E3%80%8B/"}],"tags":[{"name":"《剑指Offer(第2版)》_链表","slug":"《剑指Offer-第2版-》-链表","permalink":"http://example.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer-%E7%AC%AC2%E7%89%88-%E3%80%8B-%E9%93%BE%E8%A1%A8/"}]},{"title":"剑指Offer_06_从尾到头打印链表","slug":"《剑指Offer(第2版)》/《剑指Offer(第2版)》_链表/剑指Offer_06_从尾到头打印链表","date":"2021-05-28T16:00:00.000Z","updated":"2021-07-03T10:15:55.778Z","comments":true,"path":"2021/05/29/《剑指Offer(第2版)》/《剑指Offer(第2版)》_链表/剑指Offer_06_从尾到头打印链表/","link":"","permalink":"http://example.com/2021/05/29/%E3%80%8A%E5%89%91%E6%8C%87Offer(%E7%AC%AC2%E7%89%88)%E3%80%8B/%E3%80%8A%E5%89%91%E6%8C%87Offer(%E7%AC%AC2%E7%89%88)%E3%80%8B_%E9%93%BE%E8%A1%A8/%E5%89%91%E6%8C%87Offer_06_%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/","excerpt":"","text":"题目1描述：12345678输入一个链表的头节点，从尾到头反过来打印出每个节点的值链表节点定义如下：struct ListNode &#123; int m_nKey; ListNode* m_pNext;&#125;; 解法1：反转链表看到这道题后，很多人的第一反应是将链表中链接节点的指针反转过来，改变链表的方向，然后就可以从头到尾输出了，但该方法会改变原来链表的结构，是否允许在打印链表的时候修改链表的结构？这取决于面试官的要求，因此在面试的时候我们要询问清楚面试官的要求。 ⭐️在面试中，如果我们打算修改输入的数据，最好先问面试官是不是允许修改 解法2：栈通常打印是一个只读操作，我们不希望打印时修改内容，假设面试官也要求这个题目不能改变链表的结构 1234567891011121314151617181920212223//栈：后进先出//每经过一个节点的时候，把该节点放到一个栈中，当遍历完整个链表后，再从栈顶开始逐个输出节点的值，此时输出的节点的顺序已经反转过来了void PrintListReversingly_Iteratively(ListNode* pHead)&#123; std::stack&lt;ListNode*&gt; nodes; //定义一个栈，栈名为nodes ListNode* pNode = pHead; //声明一个指针指向头节点 //只要该指针不为空，就将该指针指向的节点压入栈中，然后再将该指针指向下一个节点 while(pNode != nullptr) &#123; nodes.push(pNode); pNode = pNode-&gt;m_pNext; &#125; //只要栈不为空，就一直不断的进行下列操作 while(!nodes.empty()) &#123; pNode = nodes.top(); //pNode永远指向栈顶元素 printf(&quot;%d\\t&quot;, pNode-&gt;m_nValue); nodes.pop(); //出栈操作 &#125;&#125; 解法3：递归递归在本质上就是一个栈结构，于是我们又想到了用递归来实现 12345678910111213//要实现反过来输出链表，我们每访问到一个节点的时候，先递归输出它后面的节点，再输出该节点自身，这样链表的输出结果就反过来了void PrintListReversingly_Recursively(ListNode* pHead)&#123; if(pHead != nullptr) &#123; if (pHead-&gt;m_pNext != nullptr) &#123; PrintListReversingly_Recursively(pHead-&gt;m_pNext); &#125; printf(&quot;%d\\t&quot;, pHead-&gt;m_nValue); &#125;&#125; ⭐️递归的代码很简洁，但有一个问题：当链表非常长的时候，就会导致函数调用的层级很深，从而有可能导致函数调用栈溢出，显然用栈基于循环实现的代码鲁棒性要好一些 题目2描述：12345678输入一个链表的头节点，从尾到头反过来返回每个节点的值（用数组返回）。示例 1：输入：head &#x3D; [1,3,2]输出：[2,3,1]限制：0 &lt;&#x3D; 链表长度 &lt;&#x3D; 10000 解法1：递归1234567891011121314151617181920212223242526272829/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123; vector&lt;int&gt; res;public: //注意:返回值为引用，减少大量内存拷贝 vector&lt;int&gt;&amp; reversePrint(ListNode* head) &#123; //不可以加上条件：head-&gt;next == NULL if (head == NULL) &#123; return res; &#125; //递归实现 reversePrint(head -&gt; next); res.push_back(head -&gt; val); return res; &#125;&#125;; 解法2：栈1234567891011121314151617181920212223242526272829303132/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: vector&lt;int&gt; reversePrint(ListNode* head) &#123; stack&lt;int&gt; nodes; //定义一个栈 vector&lt;int&gt; res; //定义一个容器 ListNode* pNode = head; //遍历链表，并把链表的值压入栈中 while(pNode != NULL) &#123; nodes.push(pNode-&gt;val); pNode = pNode-&gt;next; &#125; //只要栈不为空，就把栈顶元素放入容器 while(!nodes.empty()) &#123; res.push_back(nodes.top()); nodes.pop(); &#125; return res; &#125;&#125;;","categories":[{"name":"《剑指Offer(第2版)》","slug":"《剑指Offer-第2版-》","permalink":"http://example.com/categories/%E3%80%8A%E5%89%91%E6%8C%87Offer-%E7%AC%AC2%E7%89%88-%E3%80%8B/"}],"tags":[{"name":"《剑指Offer(第2版)》_链表","slug":"《剑指Offer-第2版-》-链表","permalink":"http://example.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer-%E7%AC%AC2%E7%89%88-%E3%80%8B-%E9%93%BE%E8%A1%A8/"}]},{"title":"剑指Offer_22_链表中倒数第k个节点","slug":"《剑指Offer(第2版)》/《剑指Offer(第2版)》_链表/剑指Offer_22_链表中倒数第k个节点","date":"2021-05-27T16:00:00.000Z","updated":"2021-07-03T10:15:10.827Z","comments":true,"path":"2021/05/28/《剑指Offer(第2版)》/《剑指Offer(第2版)》_链表/剑指Offer_22_链表中倒数第k个节点/","link":"","permalink":"http://example.com/2021/05/28/%E3%80%8A%E5%89%91%E6%8C%87Offer(%E7%AC%AC2%E7%89%88)%E3%80%8B/%E3%80%8A%E5%89%91%E6%8C%87Offer(%E7%AC%AC2%E7%89%88)%E3%80%8B_%E9%93%BE%E8%A1%A8/%E5%89%91%E6%8C%87Offer_22_%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%80%92%E6%95%B0%E7%AC%ACk%E4%B8%AA%E8%8A%82%E7%82%B9/","excerpt":"","text":"题目1描述：12345输入一个链表，输出该链表中倒数第k个节点。为了符合大多数人的习惯，本题从1开始计数，即链表的尾节点是倒数第1个节点。例如，一个链表有 6 个节点，从头节点开始，它们的值依次是 1、2、3、4、5、6。这个链表的倒数第 3 个节点是值为 4 的节点。示例：给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 k &#x3D; 2.返回链表 4-&gt;5. 解法1：12345678910111213141516171819202122232425262728293031323334353637383940/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* getKthFromEnd(ListNode* head, int k) &#123; if (head == NULL || k == 0) return NULL; ListNode *pAhead = head; ListNode *pBehind = NULL; for (int i = 0;i &lt; k-1;++i) &#123; //如果链表的节点数少于k，那么在for循环中遍历链表可能会出现指向NULL的next if (pAhead -&gt; next != NULL) &#123; pAhead = pAhead -&gt; next; &#125; else &#123; return NULL; &#125; &#125; pBehind = head; while (pAhead -&gt; next != NULL) &#123; pAhead = pAhead -&gt; next; pBehind = pBehind -&gt; next; &#125; return pBehind; &#125;&#125;; ❗️LeetCode_876_链表的中间节点 题目2描述：1给定一个头结点为 head 的非空单链表，返回链表的中间结点。如果有两个中间结点，则返回第二个中间结点。 解法1：1234567891011121314151617181920212223242526272829//这道题目其实是上面题目的特殊示例，完全可以用上面的方法解决，但是因为没有给出k值，所以需要遍历一遍链表求出链表的长度。针对此题更简单的解题思路是：我们可以定义两个指针，同时从链表的头节点出发，一个指针一次走一步，另一个指针一次走两步，当走得快的指针走到链表的末尾时，走的慢的指针正好在链表的中间/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) &#123;&#125; * ListNode(int x) : val(x), next(nullptr) &#123;&#125; * ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* middleNode(ListNode* head) &#123; if (head == NULL) return NULL; ListNode* fast = head; ListNode* slow = head; while(fast != NULL &amp;&amp; fast-&gt;next != NULL) &#123; fast = fast-&gt;next-&gt;next; slow = slow-&gt;next; &#125; return slow; &#125;&#125;;","categories":[{"name":"《剑指Offer(第2版)》","slug":"《剑指Offer-第2版-》","permalink":"http://example.com/categories/%E3%80%8A%E5%89%91%E6%8C%87Offer-%E7%AC%AC2%E7%89%88-%E3%80%8B/"}],"tags":[{"name":"《剑指Offer(第2版)》_链表","slug":"《剑指Offer-第2版-》-链表","permalink":"http://example.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer-%E7%AC%AC2%E7%89%88-%E3%80%8B-%E9%93%BE%E8%A1%A8/"}]},{"title":"剑指Offer_23_链表中环的入口节点","slug":"《剑指Offer(第2版)》/《剑指Offer(第2版)》_链表/剑指Offer_23_链表中环的入口节点","date":"2021-05-26T16:00:00.000Z","updated":"2021-07-04T02:00:23.207Z","comments":true,"path":"2021/05/27/《剑指Offer(第2版)》/《剑指Offer(第2版)》_链表/剑指Offer_23_链表中环的入口节点/","link":"","permalink":"http://example.com/2021/05/27/%E3%80%8A%E5%89%91%E6%8C%87Offer(%E7%AC%AC2%E7%89%88)%E3%80%8B/%E3%80%8A%E5%89%91%E6%8C%87Offer(%E7%AC%AC2%E7%89%88)%E3%80%8B_%E9%93%BE%E8%A1%A8/%E5%89%91%E6%8C%87Offer_23_%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%8E%AF%E7%9A%84%E5%85%A5%E5%8F%A3%E8%8A%82%E7%82%B9/","excerpt":"","text":"❗️LeetCode_141_环形链表、LeetCode_142_环形链表2 题目描述：1如果一个链表中包含环，如何找出环的入口节点？ 解法1：快慢指针（Floyd判圈法） 第一步是如何确定一个链表中包含环并返回两个指针相遇的节点，受到面试题22的启发，我们可以用两个指针来解决这个问题：定义两个指针，同时从链表的头节点出发，一个指针一次走一步，另一个指针一次走两步。如果走得快的指针追上了走的慢的指针，那么链表就包含环，如果走的快的指针走到了链表的末尾都没有追上第一个指针，那么链表就不包含环 123456789101112131415161718192021222324252627282930313233/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: //该函数返回两个指针相遇的节点 ListNode* MeetingNode(ListNode *head) &#123; if (head == NULL) return NULL; ListNode* slow = head; //定义慢指针 ListNode* fast = head; //定义快指针 if (slow-&gt;next == NULL) return NULL; //如果链表中只有一个节点，那就没有环 while (fast != NULL &amp;&amp; fast-&gt;next != NULL) &#123; fast = fast-&gt;next-&gt;next; slow = slow-&gt;next; if (fast == slow) return fast; //fast或slow指针指向的节点就是它们相遇的节点 &#125; return NULL; &#125;&#125;; 第二步是如何找到环的入口节点 12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode *detectCycle(ListNode *head) &#123; if (head == NULL) return NULL; ListNode* slow = head; //定义慢指针 ListNode* fast = head; //定义快指针 bool hasCycle = false; if (slow-&gt;next == NULL) return NULL; //如果链表中只有一个节点，那就没有环 while (fast != NULL &amp;&amp; fast-&gt;next != NULL) &#123; fast = fast-&gt;next-&gt;next; slow = slow-&gt;next; //fast或slow指针指向的节点就是它们相遇的节点 if (fast == slow) &#123; hasCycle = true; //该链表有环 break; //跳出循环 &#125; &#125; //如果有环，找到入环开始的结点 if (hasCycle) &#123; ListNode *p = head; while (p != slow) &#123; p = p -&gt;next; slow = slow-&gt;next; &#125; return p; //p指针指向的节点就是环的入口节点 &#125; else return NULL; &#125;&#125;; 12345678910111213141516171819202122232425262728293031323334//代码更简洁/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode *detectCycle(ListNode *head) &#123; ListNode* slow = head,*fast = head; //判断是否存在环路 do &#123; if (fast == NULL || fast-&gt;next == NULL) return NULL; fast = fast-&gt;next-&gt;next; slow = slow-&gt;next; &#125; while (fast != slow); //如果存在，查找环路节点 fast = head; while (fast != slow) &#123; slow = slow-&gt;next; fast = fast-&gt;next; &#125; return fast; &#125;&#125;;","categories":[{"name":"《剑指Offer(第2版)》","slug":"《剑指Offer-第2版-》","permalink":"http://example.com/categories/%E3%80%8A%E5%89%91%E6%8C%87Offer-%E7%AC%AC2%E7%89%88-%E3%80%8B/"}],"tags":[{"name":"《剑指Offer(第2版)》_链表","slug":"《剑指Offer-第2版-》-链表","permalink":"http://example.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer-%E7%AC%AC2%E7%89%88-%E3%80%8B-%E9%93%BE%E8%A1%A8/"}]},{"title":"剑指Offer_25_合并两个排序的链表","slug":"《剑指Offer(第2版)》/《剑指Offer(第2版)》_链表/剑指Offer_25_合并两个排序的链表","date":"2021-05-25T16:00:00.000Z","updated":"2021-07-04T08:43:26.449Z","comments":true,"path":"2021/05/26/《剑指Offer(第2版)》/《剑指Offer(第2版)》_链表/剑指Offer_25_合并两个排序的链表/","link":"","permalink":"http://example.com/2021/05/26/%E3%80%8A%E5%89%91%E6%8C%87Offer(%E7%AC%AC2%E7%89%88)%E3%80%8B/%E3%80%8A%E5%89%91%E6%8C%87Offer(%E7%AC%AC2%E7%89%88)%E3%80%8B_%E9%93%BE%E8%A1%A8/%E5%89%91%E6%8C%87Offer_25_%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/","excerpt":"","text":"❗️LeetCode_21_合并两个有序链表 题目描述：1234567输入两个递增排序的链表，合并这两个链表并使新链表中的节点仍然是递增排序的。示例：输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4限制：0 &lt;&#x3D; 链表长度 &lt;&#x3D; 1000 解法1：递归1234567891011121314151617181920212223242526272829303132/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) &#123; if (l1 == NULL) &#123; return l2; &#125; else if (l2 == NULL) &#123; return l1; &#125; ListNode *pMergedHead = NULL; //递归 if (l1-&gt;val &lt; l2-&gt;val) &#123; pMergedHead = l1; pMergedHead-&gt;next = mergeTwoLists(l1-&gt;next,l2); &#125; else &#123; pMergedHead = l2; pMergedHead-&gt;next = mergeTwoLists(l1,l2-&gt;next); &#125; return pMergedHead; &#125;&#125;; 解法2：迭代12345678910111213141516171819202122232425262728293031323334353637/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) &#123;&#125; * ListNode(int x) : val(x), next(nullptr) &#123;&#125; * ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) &#123; ListNode* preHead = new ListNode(-1); ListNode* prev = preHead; while (l1 != nullptr &amp;&amp; l2 != nullptr) &#123; if (l1-&gt;val &lt;= l2-&gt;val) &#123; prev-&gt;next = l1; l1 = l1-&gt;next; &#125; else &#123; prev-&gt;next = l2; l2 = l2-&gt;next; &#125; prev = prev-&gt;next; &#125; //合并后l1和l2最多只有一个还未被合并完，我们直接将链表末尾指向未合并完的链表即可 //l1现在如果指向空，prev-&gt;next指向l2，否则指向l1 prev-&gt;next = l1 == nullptr ? l2 : l1; return preHead-&gt;next; &#125;&#125;;","categories":[{"name":"《剑指Offer(第2版)》","slug":"《剑指Offer-第2版-》","permalink":"http://example.com/categories/%E3%80%8A%E5%89%91%E6%8C%87Offer-%E7%AC%AC2%E7%89%88-%E3%80%8B/"}],"tags":[{"name":"《剑指Offer(第2版)》_链表","slug":"《剑指Offer-第2版-》-链表","permalink":"http://example.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer-%E7%AC%AC2%E7%89%88-%E3%80%8B-%E9%93%BE%E8%A1%A8/"}]},{"title":"剑指Offer_52_两个链表的第一个公共节点","slug":"《剑指Offer(第2版)》/《剑指Offer(第2版)》_链表/剑指Offer_52_两个链表的第一个公共节点","date":"2021-05-24T16:00:00.000Z","updated":"2021-07-04T09:28:19.658Z","comments":true,"path":"2021/05/25/《剑指Offer(第2版)》/《剑指Offer(第2版)》_链表/剑指Offer_52_两个链表的第一个公共节点/","link":"","permalink":"http://example.com/2021/05/25/%E3%80%8A%E5%89%91%E6%8C%87Offer(%E7%AC%AC2%E7%89%88)%E3%80%8B/%E3%80%8A%E5%89%91%E6%8C%87Offer(%E7%AC%AC2%E7%89%88)%E3%80%8B_%E9%93%BE%E8%A1%A8/%E5%89%91%E6%8C%87Offer_52_%E4%B8%A4%E4%B8%AA%E9%93%BE%E8%A1%A8%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%85%AC%E5%85%B1%E8%8A%82%E7%82%B9/","excerpt":"","text":"❗️LeetCode_160_相交链表 ❗️注意本题与剑指Offer_68_树中两个节点的最低公共祖先有联系 题目描述：1234567891011输入两个链表，找出它们的第一个公共节点。输入：intersectVal &#x3D; 8, listA &#x3D; [4,1,8,4,5], listB &#x3D; [5,0,1,8,4,5], skipA &#x3D; 2, skipB &#x3D; 3输出：Reference of the node with value &#x3D; 8输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。注意：1. 如果两个链表没有交点，返回 null.2. 在返回结果后，两个链表仍须保持原有的结构。3. 可假定整个链表结构中没有循环。4. 程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。 解法1：用蛮力法，在第一个链表上顺序遍历每个节点，每遍历到一个节点，就在第二个链表上顺序遍历每个节点。如果在第二个链表上有一个节点和第一个链表上的节点一样，则说明两个链表在这个节点上重合，于是就找到了它们的公共节点。如果第一个链表的长度为m，第二个链表的长度为n，那么显然该方法的时间复杂度是O(mn) 解法2：如果两个链表有公共节点，那么公共节点出现在两个链表的尾部，如果我们从两个链表的尾部开始往前比较，那么最后一个相同的节点就是我们要找的节点。于是我们就能想到用栈的特点来解决这个问题：分别把两个链表的节点放入两个栈里，这样两个链表的尾节点就位于两个栈的栈顶，接下来比较两个栈顶的节点是否相同，如果相同，则把栈顶弹出接着比较下一个栈顶，直到找到最后一个相同的节点。空间复杂度为O(m+n)，时间复杂度也是O(m+n)，和蛮力法相比，时间效率得到了提高，相当于用空间消耗换取了时间效率 ⭐️问题：当两个链表的长度不相同时，如果我们从头开始遍历，那么到达尾节点的时间就不一致 解法3：首先遍历两个链表得到它们的长度，就能知道哪个链表比较长，以及长的链表比短的链表多几个节点。在第二次遍历的时候，在较长的链表上先走若干步，接着同时在两个链表上遍历，找到的第一个相同的节点就是它们的第一个公共节点。时间复杂度为O(m+n)，但我们不再需要辅助栈，因此提高了空间效率 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: //返回链表的长度 unsigned int GetListLength(ListNode* pHead) &#123; unsigned int nLength = 0; ListNode* pNode = pHead; while (pNode != NULL) &#123; ++nLength; pNode = pNode -&gt; next; &#125; return nLength; &#125; ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) &#123; unsigned int nLength1 = GetListLength(headA); //headA的长度 unsigned int nLength2 = GetListLength(headB); //headB的长度 int nLengthDif = nLength1 - nLength2; //两个链表之差（假设headA &gt; headB） ListNode* pListHeadLong = headA; ListNode* pListHeadShort = headB; if (nLength2 &gt; nLength1) &#123; pListHeadLong = headB; pListHeadShort = headA; nLengthDif = nLength2 - nLength1; &#125; //先在长链表上走几步，再同时在两个链表上遍历 for (int i = 0;i &lt; nLengthDif;i++) &#123; pListHeadLong = pListHeadLong -&gt; next; &#125; while (pListHeadLong != NULL &amp;&amp; pListHeadShort != NULL &amp;&amp; pListHeadLong != pListHeadShort) &#123; pListHeadLong = pListHeadLong -&gt; next; pListHeadShort = pListHeadShort -&gt;next; &#125; //得到第一个公共结点 ListNode* pFirstCommonNode = pListHeadLong; return pFirstCommonNode; &#125;&#125;; 解法4：12345678910111213141516171819202122232425/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) &#123; ListNode* l1 = headA,*l2 = headB; //假设链表A的头节点到相交点的距离是a，链表B的头节点到相交点的距离是b，相交点到链表终点的距离为c //我们使用两个指针，分别指向两个链表的头节点，并以相同的速度前进，若到达链表结尾，则移动到另一条链表的头节点继续前进。按照这种前进方法，两个指针会在a+b+c次前进后同时到达相交节点 while (l1 != l2) &#123; l1 = l1 ? l1-&gt;next : headB; l2 = l2 ? l2-&gt;next : headA; &#125; return l1; &#125;&#125;;","categories":[{"name":"《剑指Offer(第2版)》","slug":"《剑指Offer-第2版-》","permalink":"http://example.com/categories/%E3%80%8A%E5%89%91%E6%8C%87Offer-%E7%AC%AC2%E7%89%88-%E3%80%8B/"}],"tags":[{"name":"《剑指Offer(第2版)》_链表","slug":"《剑指Offer-第2版-》-链表","permalink":"http://example.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer-%E7%AC%AC2%E7%89%88-%E3%80%8B-%E9%93%BE%E8%A1%A8/"}]},{"title":"本地项目上传至GitHub","slug":"Apple、Linux/macOS、Ubuntu Server/本地项目上传至GitHub","date":"2021-05-10T16:00:00.000Z","updated":"2021-06-21T13:33:21.160Z","comments":true,"path":"2021/05/11/Apple、Linux/macOS、Ubuntu Server/本地项目上传至GitHub/","link":"","permalink":"http://example.com/2021/05/11/Apple%E3%80%81Linux/macOS%E3%80%81Ubuntu%20Server/%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E4%B8%8A%E4%BC%A0%E8%87%B3GitHub/","excerpt":"","text":"首次使用 配置SSH ⭐️cd 项目文件夹 ⭐️git init ⭐️ssh-keygen -t rsa -C “&#x32;&#x36;&#54;&#x38;&#56;&#x30;&#x32;&#x35;&#x37;&#x30;&#x40;&#113;&#x71;&#46;&#99;&#x6f;&#109;“ ⭐️pbcopy &lt; ~/.ssh/id_rsa.pub #将ssh代码复制到剪贴板 ⭐️回到GitHub界面，将刚才生成的ssh配置到GitHub里 ⭐️ssh -T &#103;&#x69;&#116;&#64;&#x67;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#x6d; #验证是否添加ssh成功了 开始上传代码 ⭐️git clone 仓库地址 ⭐️cd 仓库 ⭐️git add –all ⭐️git commit -m “第1次上传” ⭐️git push 以后使用 ⭐️cd 项目文件夹 ⭐️执行步骤2","categories":[{"name":"Apple、Linux","slug":"Apple、Linux","permalink":"http://example.com/categories/Apple%E3%80%81Linux/"}],"tags":[{"name":"macOS、Ubuntu Server","slug":"macOS、Ubuntu-Server","permalink":"http://example.com/tags/macOS%E3%80%81Ubuntu-Server/"}]},{"title":"Swift介绍","slug":"开发语言/Swift/Swift介绍","date":"2020-12-30T16:00:00.000Z","updated":"2021-06-05T11:41:35.604Z","comments":true,"path":"2020/12/31/开发语言/Swift/Swift介绍/","link":"","permalink":"http://example.com/2020/12/31/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Swift/Swift%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"Swift介绍Swift是一种支持多编程范式和编译式的开源编程语言，苹果于2014年WWDC发布 Swift结合了C和Objective-C的优点并且不受C兼容性的限制 2015年6月8日，苹果于WWDC 2015上宣布，Swift将开放源代码，包括编译器和标准库 PlaygroundSwift的playground就像是一个可交互的文档，它是用来练手学Swift的，写一句代码出一行结果，可以实时查看代码的结果，是学习Swift语言的利器 playground创建iOS程序默认代码如下： 123import UIKitvar greeting = &quot;Hello, playground&quot; 创建macOS程序默认代码： 123import Cocoavar greeting = &quot;Hello, playground&quot; Swift基本语法Swift引入我们可以使用 import 语句来引入任何的 Objective-C 框架（或 C 库）到 Swift 程序中。例如 import cocoa 语句导入了使用了 Cocoa 库和API，我们可以在 Swift 程序中使用他们。Cocoa 本身由 Objective-C 语言写成，Objective-C 又是 C 语言的严格超集，所以在 Swift 应用中我们可以很简单的混入 C 语言代码，甚至是 C++ 代码。 Swift标记Swift程序由多种标记组成，标记可以是单词、标识符、常量、字符串或符号 print(&quot;test&quot;) Swift注释Swift的注释与C语言极其相似，单行注释以两个反斜杠开头 多行注释以/*开始，以*/结束 与C语言的多行注释有所不同的是，Swift的多行注释可以嵌套在其他多行注释内部，多行注释的嵌套使你可以更快捷方便的注释代码块，即使代码块中已经有了注释 12345678910//这是一行注释/* 这也是一条注释 但跨越多行 *//* 这是第一个多行注释的开头 /* 这是嵌套的第二个多行注释 */ 这是第一个多行注释的结尾 */ 分号与其他语言不同的是，Swift不要求在每行语句的结尾使用分号(;)，但当你在同一行书写多条语句时，必须用分号隔开 123import UIKitvar greeting = &quot;Hello, playground&quot;; print(greeting) 标识符标识符就是给变量、常量、方法、函数、枚举、结构体、类、协议等指定的名字 Swift语言中标识符的命名规则： 区分大小写 标识符首字符可以以下划线(_)或者字母开始，但不能是数字 标识符中其他字符可以是下划线、字母或数字 如果一定要使用关键字作为标识符，可以在关键字前后添加重音符号(`) 1let `class` = &quot;Runoob&quot; 关键字关键字是类似于标识符的保留字符序列，除非用重音符号将其括起来，否则不能用作标识符，关键字是对编译器具有特殊意义的预定义保留标识符 与声明有关的关键字 class deinit enum extension func import init internal let operator private protocol public static struct subscript typealias var 与语句有关的关键字 break case continue default do else fallthrough for if in return switch where while 表达式和类型关键字 as dynamicType false is nil self Self super true _COLUMN_ _FILE_ _FUNCTION_ _LINE_ 在特定上下文中使用的关键字 associativity convenience dynamic didSet final get infix inout lazy left mutating none nonmutating optional override postfix precedence prefix Protocol required right set Type unowned weak willSet Swift空格Swift语言并不是像C/C++、Java那样完全忽视空格，Swift对空格的使用有一定的要求，但是又不像Python对缩进的要求那么严格 在Swift中，运算符不能直接跟在变量或常量的后面 12//推荐使用这种写法let a = 1 + 2 Swift字面量所谓字面量，就是指像特定的数字、字符串或者是布尔值这样，能够直接了当的指出自己的类型并为变量进行赋值的值 123442 // 整型字面量3.14159 // 浮点型字面量&quot;Hello, world!&quot; // 字符串型字面量true // 布尔型字面量 打印输出1print(&quot;Runoob&quot;) //输出Runoob 如果我们想让其不换行输出，只需要将最后一个参数赋值为空字符串即可： 1234567for x in 0...10 &#123; print(&quot;\\(x) &quot;, terminator: &quot;&quot;)&#125;for x in 0...10 &#123; print(&quot;\\(x) &quot;)&#125; 如果你需要接收用户的输入可以使用 readLine() 1let theInput = readLine()","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://example.com/tags/Swift/"}]},{"title":"LeetCode_455_分发饼干","slug":"LeetCode🌟/LeetCode_贪心算法/LeetCode_455_分发饼干","date":"2020-12-30T16:00:00.000Z","updated":"2021-07-03T10:21:09.736Z","comments":true,"path":"2020/12/31/LeetCode🌟/LeetCode_贪心算法/LeetCode_455_分发饼干/","link":"","permalink":"http://example.com/2020/12/31/LeetCode%F0%9F%8C%9F/LeetCode_%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/LeetCode_455_%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2/","excerpt":"","text":"题目描述：123456789101112131415161718192021222324&#x2F;&#x2F;贪心算法或贪心思想采用贪心的策略，保证每次操作都是局部最优的，从而使最后得到的结果是全局最优的假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 j，都有一个尺寸 s[j] 。如果 s[j] &gt;&#x3D; g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。示例：输入: g &#x3D; [1,2,3], s &#x3D; [1,1]输出: 1解释: 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。所以你应该输出1。输入: g &#x3D; [1,2], s &#x3D; [1,2,3]输出: 2解释: 你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。你拥有的饼干数量和尺寸都足以让所有孩子满足。所以你应该输出2.提示：1. 1 &lt;&#x3D; g.length &lt;&#x3D; 3 * 10^42. 0 &lt;&#x3D; s.length &lt;&#x3D; 3 * 10^43. 1 &lt;&#x3D; g[i], s[j] &lt;&#x3D; 2^31 - 1 解法1：贪心算法123456789101112131415161718192021//因为饥饿度最小的孩子最容易吃饱，所以我们先考虑这个孩子。为了尽量使得剩下的饼干可以满足饥饿度更大的孩子，所以我们应该把大于等于这个孩子饥饿度的、且大小最小的饼干给这个孩子。满足了这个孩子之后，我们采取同样的策略，考虑剩下孩子里饥饿度最小的孩子，直到没有满足条件的饼干存在class Solution &#123;public: int findContentChildren(vector&lt;int&gt;&amp; g, vector&lt;int&gt;&amp; s) &#123; sort(g.begin(),g.end()); sort(s.begin(),s.end()); int child = 0,cookie = 0; while (child &lt; g.size() &amp;&amp; cookie &lt; s.size()) &#123; //给剩余孩子里最小饥饿度的孩子分配最小的能饱腹的饼干 if (g[child] &lt;= s[cookie]) ++child; ++cookie; &#125; return child; &#125;&#125;;","categories":[{"name":"LeetCode🌟","slug":"LeetCode🌟","permalink":"http://example.com/categories/LeetCode%F0%9F%8C%9F/"}],"tags":[{"name":"LeetCode_贪心算法","slug":"LeetCode-贪心算法","permalink":"http://example.com/tags/LeetCode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"}]},{"title":"Swift数据类型","slug":"开发语言/Swift/Swift数据类型","date":"2020-12-29T16:00:00.000Z","updated":"2021-06-05T11:42:40.829Z","comments":true,"path":"2020/12/30/开发语言/Swift/Swift数据类型/","link":"","permalink":"http://example.com/2020/12/30/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Swift/Swift%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"在我们使用任何程序语言编程时，需要使用各种数据类型来存储不同的信息，变量的数据类型决定了如何将代表这些值的位存储到计算机的内存中，在声明变量时也可指定它的数据类型，所有变量都有数据类型，以决定能够存储哪种数据 内置数据类型Int一般来说，你不需要专门指定整数的长度，Swift提供了一个特殊的整数类型Int,长度与当前平台的原生字长相同，在32位平台上，Int和Int32长度相同，在64位平台上，Int和Int64长度相同 除非需要特定长度的整数，一般来说使用Int就够了，这可以提高代码一致性和可复用性 UIntSwift也提供了一个特殊的无符号类型UInt，长度与当前平台的原生字长相同，在32位平台上，UInt和UInt32长度相同，在64位平台上，UInt和UInt64长度相同 注意：尽量不要使用UInt，除非真的需要存储一个和当前平台原生字长相同的无符号整数，除了这种情况，最好使用Int，即使你要存储的值已知是非负的。统一使用Int可以提高代码的可复用性，避免不同类型数字之间的转换，并且匹配数字的类型推断 浮点数：Float、Double浮点数是有小数部分的数字 浮点类型比整数类型表示的范围更大，可以存储比Int类型更大或者更小的数字 Double：表示64位浮点数，当需要存储很大或者很高精度的浮点数时使用此类型 Float：表示32位浮点数，精度要求不高的话可以使用此类型 注意：Double精确度很高，至少有15位数字，而Float最少只有6位数字 布尔值：Bool布尔值指逻辑上的值，因为它们只能是真或者假。 Swift有两个布尔常量：true、false 字符串：String字符串是字符的序列集合：Hello,World! 字符：Character字符指的是单个字母：C 可选类型：Optional使用可选类型来处理值可能缺失的情况，可选类型表示有值或没有值 此外，Swift还提供了其他更强大的数据类型，Array、Dictionary、Struct、Class 数值范围不同变量类型内存的存储空间，及变量类型的最大最小值； 类型 大小（字节） 区间值 Int8 1 字节 -128 到 127 UInt8 1 字节 0 到 255 Int32 4 字节 -2147483648 到 2147483647 UInt32 4 字节 0 到 4294967295 Int64 8 字节 -9223372036854775808 到 9223372036854775807 UInt64 8 字节 0 到 18446744073709551615 Float 4 字节 1.2E-38 到 3.4E+38 (~6 digits) Double 8 字节 2.3E-308 到 1.7E+308 (~15 digits) 类型别名类型别名对当前的类型定义了另一个名字，类型别名通过使用typealias关键字来定义 123456import UIKittypealias Feet = Intvar distance: Feet = 100print(distance) 类型安全Swift是一个类型安全type safe的语言，由于Swift是类型安全的，所以它会在编译你的代码时进行类型检查type checks，并把不匹配的类型标记为错误，这可以让你在开发的时候尽早发现并修复错误 类型推断如果没有显式指定类型，Swift会使用类型推断type inference来选择合适的类型 12345678import UIKitlet meaningOfLine = 42 // meaningOfLine会被推测为Int类型let pi = 3.14159 // pi会被推测为Double类型，当推断浮点数的类型时，Swift总是会选择Double而不是Float//如果表达式中同时出现了整数和浮点数，会被推断为Double类型let anotherPi = 3 + 0.14159 但是：在Swift中，任何时候都不会做隐式转换，任何两个类型不同的变量或常量不允许直接计算 Swift变量变量是一种使用方便的占位符，用于引用计算机内存地址，Swift每个变量都指定了特定的类型，该类型决定了变量占用内存的大小，不同的数据类型也决定可存储值的范围 变量的声明变量声明的意思是告诉编译器在内存中的哪个位置上为变量创建多大的存储空间，在使用变量前，你需要使用var关键字声明它 1234567import UIKitvar varA = 42print(varA)var varB: Float = 3.14159print(varB) 变量命名变量名可以由字母、数字和下划线组成，变量名需要以字母或下划线开始 Swift是一个区分大小写的语言，所以字母大写与小写是不一样的 变量名也可以使用简单的Unicode字符 1234567import UIKitvar _var = &quot;Hello,Swift&quot;print(_var)var 你好 = &quot;你好世界&quot;print(你好) 变量输出变量和常量可以使用print函数来输出，在字符串中可以使用括号与反斜线来插入变量 123456import UIKitvar name = &quot;菜鸟教程&quot;var site = &quot;http://www.runoob.com&quot;print(&quot;\\(name)的官网地址为：\\(site)&quot;) Swift可选类型(Optionals)Swift的可选类型，用于处理值缺失的情况，可选表示“那儿有一个值，并且它等于x”或者“那儿没有值” Swift语言定义后缀?作为命名类型Optional的简写，换句话说，以下两种声明是相等的 12var optionalInteger: Int?var optionalInteger: Optional&lt;Int&gt; Optional是一个含有两种情况的枚举，用来表示可能有或可能没有值，任何类型都可以明确声明为可选类型 当声明一个可选类型的时候，要确保用括号给?操作符一个合适的范围，例如声明可选整数数组，应该写成(Int[])?，写成Int[]?会报错 当你声明一个可选变量或者可选属性的时候没有提供初始值，它的值会默认为nil 可选项遵照LogicValue协议，因此可以出现在布尔环境中，在这种情况下，如果可选类型T?包含类型为T的任何值，这个可选类型等于true，反之为false 如果一个可选类型的实例包含一个值，你可以用后缀操作符!来访问这个值，使用操作符!去获取值为nil的可选变量会有运行时错误 123456789import UIKitvar myString: String? = nilif myString != nil &#123; print(myString)&#125; else &#123; print(&quot;字符串为nil&quot;)&#125; 可选类型类似于Objective-C中指针的nil值，但是nil只对类(class)有用，而可选类型对所有的类型都可用，并且更安全 强制解析当你确定可选类型确实包含值之后，你可以在可选的名字后面加一个感叹号!来获取值，这个感叹号表示“我知道这个可选有值，请使用它”，这被称为可选值的强制解析 注意：使用!来获取一个不存在的可选值会导致运行时错误，使用!来强制解析值之前，一定要确定可选包含一个非nil的值 自动解析❓可以在声明可选变量时使用感叹号!替换问号?，这样可选变量在使用时就不需要再加一个感叹号!来获取值，它会自动解析 可选绑定使用可选绑定来判断可选类型是否包含值，如果包含就把值赋给一个临时常量或变量，可选绑定可以用在if和while语句中来对可选类型的值进行判断并把值赋给一个常量或者变量 Swift常量常量一旦设定，在程序运行时就无法改变其值 123456let constA = 12print(constA)//常量定义时必须初始值let constB: Float = 3.14159print(constB) Swift字面量所谓字面量，就是指像特定的数字、字符串或者布尔值这样，能够直截了当的指出自己的类型并为变量进行赋值的值 123let aNumber = 3 //整型字面量let aString = &quot;Hello&quot; //字符串字面量let aBool = true //布尔值字面量 整型字面量整型字面量可以是一个十进制无前缀、二进制0b、八进制0o或十六进制0x常量 1234let decimalInteger = 17 // 17 - 十进制表示let binaryInteger = 0b10001 // 17 - 二进制表示let octalInteger = 0o21 // 17 - 八进制表示let hexadecimalInteger = 0x11 // 17 - 十六进制表示 浮点型字面量浮点型字面量有整数部分，小数点，小数部分及指数部分 除非特别指定，浮点型字面量的默认推导类型为 Swift 标准库类型中的 Double，表示64位浮点数 浮点型字面量默认用十进制表示（无前缀），也可以用十六进制表示（加前缀 0x） 123let decimalDouble = 12.1875 //十进制浮点型字面量let exponentDouble = 1.21875e1 //十进制浮点型字面量 1.21875 * 10^1let hexadecimalDouble = 0xC.3p0 //十六进制浮点型字面量 12.3 * 2^0 浮点型字面量允许使用下划线_来增强数字的可读性，下划线会被系统忽略，因此不会影响字面量的值 同样的，也可以在数字前加0，并不会影响字面量的值 字符串型字面量字符串型字面量由被包在双引号中的一串字符组成 字符串型字面量中不能包含未转义的双引号 （”）、未转义的反斜线（\\）、回车符或换行符 转义字符 含义 \\0 空字符 \\\\ 反斜线 \\ \\b 退格(BS) ，将当前位置移到前一列 \\f 换页(FF)，将当前位置移到下页开头 \\n 换行符 \\r 回车符 \\t 水平制表符 \\v 垂直制表符 \\&#39; 单引号 \\&quot; 双引号 \\000 1到3位八进制数所代表的任意字符 \\xhh... 1到2位十六进制所代表的任意字符 布尔型字面量布尔型字面量的默认类型是Bool 布尔值字面量有三个值，它们是Swift的保留关键字：true表示真、false表示假、nil表示没有值","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://example.com/tags/Swift/"}]},{"title":"LeetCode_135_分发糖果","slug":"LeetCode🌟/LeetCode_贪心算法/LeetCode_135_分发糖果","date":"2020-12-29T16:00:00.000Z","updated":"2021-07-03T10:20:46.679Z","comments":true,"path":"2020/12/30/LeetCode🌟/LeetCode_贪心算法/LeetCode_135_分发糖果/","link":"","permalink":"http://example.com/2020/12/30/LeetCode%F0%9F%8C%9F/LeetCode_%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/LeetCode_135_%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C/","excerpt":"","text":"题目描述123456789101112131415161718老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。你需要按照以下要求，帮助老师给这些孩子分发糖果：1. 每个孩子至少分配到 1 个糖果。2. 评分更高的孩子必须比他两侧的邻位孩子获得更多的糖果。那么这样下来，老师至少需要准备多少颗糖果呢？示例：输入：[1,0,2]输出：5解释：你可以分别给这三个孩子分发 2、1、2 颗糖果。输入：[1,2,2]输出：4解释：你可以分别给这三个孩子分发 1、2、1 颗糖果。 第三个孩子只得到 1 颗糖果，这已满足上述两个条件。 解法1：贪心算法123456789101112131415161718192021222324252627//贪心策略：在每次遍历中，只考虑并更新相邻一侧的大小关系class Solution &#123;public: int candy(vector&lt;int&gt;&amp; ratings) &#123; int size = ratings.size(); if (size &lt; 2) return size; vector&lt;int&gt; num(size,1); //定义一个长度为size的容器，num中每个值初始值都为1 //把所有孩子的糖果数初始化为1，先从左到右遍历一遍，如果右边孩子的评分比左边的高，则右边孩子的糖果数更新为左边孩子的糖果数加1；再从右往左遍历一遍，如果左边孩子的评分比右边的高，且左边孩子当前的糖果数不大于右边孩子的糖果数，则左边孩子的糖果数更新为右边孩子的糖果数加1 for (int i = 1;i &lt; size;++i) &#123; if (ratings[i] &gt; ratings[i - 1]) num[i] = num[i - 1] + 1; &#125; for (int i = size - 1;i &gt; 0;--i) &#123; if (ratings[i] &lt; ratings[i - 1]) num[i - 1] = max(num[i - 1],num[i] + 1); //注意不可以这样写：[1,3,4,5,2] //if (ratings[i] &lt; ratings[i - 1]) num[i - 1] = num[i] + 1; &#125; //accumulate函数将它的一个内部变量设置为指定的初始值，然后在此初值上累加输入范围内所有元素的值。 accumulate算法返回累加的结果，其返回类型就是其第三个实参的类型。 return accumulate(num.begin(),num.end(),0); //求和 &#125;&#125;;","categories":[{"name":"LeetCode🌟","slug":"LeetCode🌟","permalink":"http://example.com/categories/LeetCode%F0%9F%8C%9F/"}],"tags":[{"name":"LeetCode_贪心算法","slug":"LeetCode-贪心算法","permalink":"http://example.com/tags/LeetCode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"}]},{"title":"Swift运算符","slug":"开发语言/Swift/Swift运算符","date":"2020-12-28T16:00:00.000Z","updated":"2021-06-05T11:43:22.696Z","comments":true,"path":"2020/12/29/开发语言/Swift/Swift运算符/","link":"","permalink":"http://example.com/2020/12/29/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Swift/Swift%E8%BF%90%E7%AE%97%E7%AC%A6/","excerpt":"","text":"运算符是一个符号，用于告诉编译器执行一个数学或逻辑运算 算术运算符+、-、*、/、% 注意：Swift3中已经取消了++、-- 比较运算符==、!=、&gt;、&lt;、&gt;=、&lt;= 逻辑运算符&amp;&amp;：逻辑与，如果运算符两侧都为TRUE则为TRUE ||：逻辑或，如果运算符两侧至少有一个为TRUE则为TRUE !：逻辑非，布尔值取反 位运算符位运算符用来对二进制位进行操作 ~ 取反、&amp; 按位与、| 按位或、^ 按位异或、&lt;&lt; 按位左移、&gt;&gt; 按位右移 运算符 描述 图解 &amp; 按位与。按位与运算符对两个数进行操作，然后返回一个新的数，这个数的每个位都需要两个输入数的同一位都为1时才为1。 | 按位或。按位或运算符|比较两个数，然后返回一个新的数，这个数的每一位设置1的条件是两个输入数的同一位都不为0(即任意一个为1，或都为1)。 ^ 按位异或. 按位异或运算符^比较两个数，然后返回一个数，这个数的每个位设为1的条件是两个输入数的同一位不同，如果相同就设为0。 ~ 按位取反运算符~对一个操作数的每一位都取反。 &lt;&lt; 按位左移。左移操作符（&lt;&lt;）将操作数的所有位向左移动指定的位数。 下图展示了11111111 &lt;&lt; 1（11111111 左移一位）的结果。蓝色数字表示被移动位，灰色表示被丢弃位，空位用橙色的0填充。 &gt;&gt; 按位右移。右移操作符（&gt;&gt;）将操作数的所有位向右移动指定的位数。 下图展示了11111111 &gt;&gt; 1（11111111 右移一位）的结果。蓝色数字表示被移动位，灰色表示被丢弃位，空位用橙色的0填充。 赋值运算符 运算符 描述 实例 = 简单的赋值运算，指定右边操作数赋值给左边的操作数。 C = A + B 将 A + B 的运算结果赋值给 C += 相加后再赋值，将左右两边的操作数相加后再赋值给左边的操作数。 C += A 相当于 C = C + A -= 相减后再赋值，将左右两边的操作数相减后再赋值给左边的操作数。 C -= A 相当于 C = C - A *= 相乘后再赋值，将左右两边的操作数相乘后再赋值给左边的操作数。 C *= A 相当于 C = C * A /= 相除后再赋值，将左右两边的操作数相除后再赋值给左边的操作数。 C /= A 相当于 C = C / A %= 求余后再赋值，将左右两边的操作数求余后再赋值给左边的操作数。 C %= A 相当于 C = C % A &lt;&lt;= 按位左移后再赋值 C &lt;&lt;= 2 相当于 C = C &lt;&lt; 2 &gt;&gt;= 按位右移后再赋值 C &gt;&gt;= 2 相当于 C = C &gt;&gt; 2 &amp;= 按位与运算后赋值 C &amp;= 2 相当于 C = C &amp; 2 ^= 按位异或运算符后再赋值 C ^= 2 相当于 C = C ^ 2 |= 按位或运算后再赋值 C |= 2 相当于 C = C | 2 区间运算符 运算符 描述 实例 闭区间运算符 闭区间运算符（a…b）定义一个包含从a到b(包括a和b)的所有值的区间，b必须大于等于a。 ‌ 闭区间运算符在迭代一个区间的所有值时是非常有用的，如在for-in循环中： 1…5 区间值为 1, 2, 3, 4 和 5 半开区间运算符 半开区间（a..&lt;b）定义一个从a到b但不包括b的区间。 之所以称为半开区间，是因为该区间包含第一个值而不包括最后的值。 1..&lt; 5 区间值为 1, 2, 3, 和 4 其他运算符 一元运算符对单一操作对象操作（如-a）。一元运算符分前置运算符和后置运算符，前置运算符需紧跟在操作对象之前（如!b），后置运算符需紧跟在操作对象之后（例如c!） 备注：在Java／C没有类似c！的语法， 在Swift中用在Optional类型取值 二元运算符操作两个操作对象（如2 + 3），是中置的，因为它们出现在两个操作对象之间 三元运算符操作三个操作对象，和 C 语言一样，Swift 只有一个三元运算符，就是三目运算符（a ? b : c） 运算符优先级逗号操作符具有最低的优先级 相同优先级中，按结合顺序计算。大多数运算是从左至右计算，只有三个优先级是从右至左结合的，它们是单目运算符、条件运算符、赋值运算符 基本的优先级需要记住： 指针最优，单目运算优于双目运算。如正负号。 先乘除（模），后加减。 先算术运算，后移位运算，最后位运算。请特别注意：1 &lt;&lt; 3 + 2 &amp; 7 等价于 (1 &lt;&lt; (3 + 2))&amp;7 逻辑运算最后计算 优先级从高到低： 运算符 实例 位运算符 &gt;&gt; &amp;&lt;&lt; &amp;&gt;&gt; &gt;&gt; 乘法运算符 &amp;* % &amp; * / 加法运算符 | &amp;+ &amp;- + - ^ 区间运算符 ..&lt; … 类型转换运算符 is as nil 的聚合运算 ?? 比较运算符 != &gt; &lt; &gt;= &lt;= === == 逻辑与运算符 &amp;&amp; 逻辑或运算符 || 波浪箭头 ~&gt; 三元运算符 ?: 箭头函数 ( ) 赋值运算符 |= %= /= &amp;&lt;&lt;= &amp;&gt;&gt;= &amp;= *= &gt;&gt;= &lt;&lt;= ^= += -=","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://example.com/tags/Swift/"}]},{"title":"LeetCode_435_无重叠区间","slug":"LeetCode🌟/LeetCode_贪心算法/LeetCode_435_无重叠区间","date":"2020-12-28T16:00:00.000Z","updated":"2021-07-03T10:20:17.945Z","comments":true,"path":"2020/12/29/LeetCode🌟/LeetCode_贪心算法/LeetCode_435_无重叠区间/","link":"","permalink":"http://example.com/2020/12/29/LeetCode%F0%9F%8C%9F/LeetCode_%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/LeetCode_435_%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4/","excerpt":"","text":"题目描述：12345678910111213141516171819给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。注意:1. 可以认为区间的终点总是大于它的起点。2. 区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。示例：输入: [ [1,2], [2,3], [3,4], [1,3] ]输出: 1解释: 移除 [1,3] 后，剩下的区间没有重叠。输入: [ [1,2], [1,2], [1,2] ]输出: 2解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。输入: [ [1,2], [2,3] ]输出: 0解释: 你不需要移除任何区间，因为它们已经是无重叠的了。 解法1：贪心算法12345678910111213141516171819202122232425262728293031class Solution &#123;public: int eraseOverlapIntervals(vector&lt;vector&lt;int&gt;&gt;&amp; intervals) &#123; if (intervals.empty()) return 0; int n = intervals.size(); //选择的区间结尾越小，余留给其他区间的空间就越大，就越能保留更多的区间。 //因此我们采取的贪心策略为，优先保留结尾小且不相交的区间 //先把区间按照结尾的大小进行增序排序，每次选择结尾最小且和前一个选择的区间不重叠的区间 sort(intervals.begin(),intervals.end(),[](vector&lt;int&gt;a,vector&lt;int&gt;b) &#123; //注意：需要根据实际情况判断按区间开头排序还是按区间结尾排序 return a[1] &lt; b[1]; &#125;); //C++中的Lambda表达式 int total = 0,prev = intervals[0][1]; for (int i = 1;i &lt; n;++i) &#123; if (intervals[i][0] &lt; prev) &#123; ++total; &#125; else &#123; prev = intervals[i][1]; &#125; &#125; return total; &#125;&#125;;","categories":[{"name":"LeetCode🌟","slug":"LeetCode🌟","permalink":"http://example.com/categories/LeetCode%F0%9F%8C%9F/"}],"tags":[{"name":"LeetCode_贪心算法","slug":"LeetCode-贪心算法","permalink":"http://example.com/tags/LeetCode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"}]},{"title":"Swift语句","slug":"开发语言/Swift/Swift语句","date":"2020-12-27T16:00:00.000Z","updated":"2021-06-05T11:43:59.539Z","comments":true,"path":"2020/12/28/开发语言/Swift/Swift语句/","link":"","permalink":"http://example.com/2020/12/28/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Swift/Swift%E8%AF%AD%E5%8F%A5/","excerpt":"","text":"Swift条件语句条件语句通过设定一个或多个条件来执行程序，在条件为真时执行指定的语句，在条件为false时执行另外指定的语句 if 语句 if else 语句 if…else if…else 语句 内嵌 if 语句 switch 语句 a ? b : c 1234567891011121314import UIKitlet oName: String? = &quot;john&quot;let oAge: Int? = 20if oName != nil &amp;&amp; oAge != nil &#123; print(&quot;\\(oName!), \\(oAge!)&quot;)&#125;//if let 可以设置数值，进入分支后，name、age可以保证一定有值//if let 语句中不能使用&amp;&amp; ||条件if let name = oName, let age = oAge &#123; print(&quot;\\(name), \\(age)&quot;)&#125; 1234567891011121314151617import UIKitlet oName: String? = &quot;john&quot;let oAge: Int? = 20func demo() &#123; //guard是和if let刚好相反的指令 guard let name = oName, let age = oAge else &#123; return &#125; //代码执行到此，name和age一定有值 print(&quot;\\(name), \\(age)&quot;)&#125;demo() Swift循环语句有的时候，我们可能需要多次执行同一块代码。一般情况下，语句是按顺序执行的：函数中的第一个语句先执行，接着是第二个语句，依此类推。编程语言提供了更为复杂执行路径的多种控制结构。循环语句允许我们多次执行一个语句或语句组 循环类型 for in for 循环：该循环方式在Swift3中已经弃用 while 循环 repeat while 循环：类似 while 语句，区别在于判断循环条件之前，先执行一次循环的代码块 循环控制语句循环控制语句改变你代码的执行顺序，通过它你可以实现代码的跳转 控制语句 描述 continue 语句 告诉一个循环体立刻停止本次循环迭代，重新开始下次循环迭代。 break 语句 中断当前循环。 fallthrough 语句 如果在一个case执行完后，继续执行下面的case，需要使用fallthrough(贯穿)关键字。","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://example.com/tags/Swift/"}]},{"title":"LeetCode_605_种花问题","slug":"LeetCode🌟/LeetCode_贪心算法/LeetCode_605_种花问题","date":"2020-12-27T16:00:00.000Z","updated":"2021-07-03T10:19:50.677Z","comments":true,"path":"2020/12/28/LeetCode🌟/LeetCode_贪心算法/LeetCode_605_种花问题/","link":"","permalink":"http://example.com/2020/12/28/LeetCode%F0%9F%8C%9F/LeetCode_%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/LeetCode_605_%E7%A7%8D%E8%8A%B1%E9%97%AE%E9%A2%98/","excerpt":"","text":"题目描述：12345678910111213141516假设有一个很长的花坛，一部分地块种植了花，另一部分却没有。可是，花不能种植在相邻的地块上，它们会争夺水源，两者都会死去。给你一个整数数组 flowerbed 表示花坛，由若干 0 和 1 组成，其中 0 表示没种植花，1 表示种植了花。另有一个数 n ，能否在不打破种植规则的情况下种入 n 朵花？能则返回 true ，不能则返回 false。示例：输入：flowerbed &#x3D; [1,0,0,0,1], n &#x3D; 1输出：true输入：flowerbed &#x3D; [1,0,0,0,1], n &#x3D; 2输出：false提示：1. 1 &lt;&#x3D; flowerbed.length &lt;&#x3D; 2 * 10^42. flowerbed[i] 为 0 或 13. flowerbed 中不存在相邻的两朵花4. 0 &lt;&#x3D; n &lt;&#x3D; flowerbed.length 解法1：贪心算法123456789101112131415161718192021222324252627class Solution &#123;public: bool canPlaceFlowers(vector&lt;int&gt;&amp; flowerbed, int n) &#123; //贪心思想：只要能种，那么都种上 if (n == 0) return true; int res = 0; for (int i = 0;i &lt; flowerbed.size();i++) &#123; //可以种花 //注意：“i == 0 || flowerbed[i - 1] == 0”的顺序不能颠倒 //“i == flowerbed.size() - 1 || flowerbed[i + 1] == 0”的顺序不能颠倒 if (flowerbed[i] == 0 &amp;&amp; (i == 0 || flowerbed[i - 1] == 0) &amp;&amp; (i == flowerbed.size() - 1 || flowerbed[i + 1] == 0)) &#123; flowerbed[i] = 1; res++; &#125; &#125; return res &gt;= n; &#125;&#125;;","categories":[{"name":"LeetCode🌟","slug":"LeetCode🌟","permalink":"http://example.com/categories/LeetCode%F0%9F%8C%9F/"}],"tags":[{"name":"LeetCode_贪心算法","slug":"LeetCode-贪心算法","permalink":"http://example.com/tags/LeetCode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"}]},{"title":"Swift字符串和字符","slug":"开发语言/Swift/Swift字符串和字符","date":"2020-12-26T16:00:00.000Z","updated":"2021-06-05T11:44:30.533Z","comments":true,"path":"2020/12/27/开发语言/Swift/Swift字符串和字符/","link":"","permalink":"http://example.com/2020/12/27/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Swift/Swift%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E7%AC%A6/","excerpt":"","text":"Swift 字符串Swift字符串是一系列字符的集合，它的数据类型为String 创建字符串可以通过使用字符串字面量或String类的实例来创建一个字符串 123456789import UIKit//使用字符串字面量var stringA = &quot;Hello,World!&quot;print(stringA)//String实例化var stringB = String(&quot;Hello,World!&quot;)print(stringB) 空字符串可以使用字符串属性isEmpty来判断字符串是否为空 字符串常量可以将一个字符串赋值给一个变量或常量，变量是可修改的，常量是不可修改的 123456import UIKit//变量是可修改的，常量是不可修改的var stringA = &quot;hello &quot;stringA += &quot;world&quot;print(stringA) 字符串中插入值字符串插值是一种构建新字符串的方式，可以在其中包含常量、变量、字面量和表达式。插入的字符串字面量的每一项都在以反斜线为前缀的圆括号中 12345678import UIKitvar varA = 20let constA = 100var varC: Float = 20.0var stringA = &quot;\\(varA) 乘以 \\(constA) 等于 \\(varC * 100)&quot;print(stringA) 字符串连接字符串可以通过+连接 12345let constA = &quot;hello &quot;let constB = &quot;world&quot;var stringA = constA + constBprint(stringA) 字符串长度1234import UIKitvar varA = &quot;www.baidu.com&quot;print(&quot;\\(varA), 长度为\\(varA.count)&quot;) 字符串比较可以使用==来比较两个字符串是否相等 Unicode字符串Unicode 是一个国际标准，用于文本的编码，Swift 的 String 类型是基于 Unicode建立的。你可以循环迭代出字符串中 UTF-8 与 UTF-16 的编码 字符串函数及运算符 序号 函数/运算符 &amp; 描述 1 isEmpty 判断字符串是否为空，返回布尔值 2 hasPrefix(prefix: String) 检查字符串是否拥有特定前缀 3 hasSuffix(suffix: String) 检查字符串是否拥有特定后缀 4 Int(String) 转换字符串数字为整型。 实例: let myString: String = &quot;256&quot; let myInt: Int? = Int(myString) 5 String.count 计算字符串的长度 6 utf8 您可以通过遍历 String 的 utf8 属性来访问它的 UTF-8 编码 7 utf16 您可以通过遍历 String 的 utf8 属性来访问它的 utf16 编码 8 unicodeScalars 您可以通过遍历String值的unicodeScalars属性来访问它的 Unicode 标量编码 9 + 连接两个字符串，并返回一个新的字符串 10 += 连接操作符两边的字符串并将新字符串赋值给左边的操作符变量 11 == 判断两个字符串是否相等 12 &lt; 比较两个字符串，对两个字符串的字母逐一比较 13 != 比较两个字符串\b是否不相等 Swift 字符(Character)Swift的字符是一个单一的字符串字面量，数据类型为Character 12345678import UIKit//如果你想在Character类型的常量中存储更多的字符，则程序执行会报错let char1: Character = &quot;A&quot;let char2: Character = &quot;B&quot;print(char1)print(char2) 空字符变量Swift中不能创建空的Character类型变量或常量 遍历字符串中的字符Swift 的 String 类型表示特定序列的 Character（字符） 类型值的集合。 每一个字符值代表一个 Unicode 字符 12345import UIKitfor ch in &quot;baidu&quot; &#123; print(ch)&#125; 字符串连接字符12345678import UIKitvar varA: String = &quot;Hello &quot;let varB: Character = &quot;G&quot;varA.append(varB)print(varA)","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://example.com/tags/Swift/"}]},{"title":"Swift数组和字典","slug":"开发语言/Swift/Swift数组和字典","date":"2020-12-25T16:00:00.000Z","updated":"2021-06-05T11:45:02.252Z","comments":true,"path":"2020/12/26/开发语言/Swift/Swift数组和字典/","link":"","permalink":"http://example.com/2020/12/26/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Swift/Swift%E6%95%B0%E7%BB%84%E5%92%8C%E5%AD%97%E5%85%B8/","excerpt":"","text":"Swift 数组Swift 数组使用有序列表存储同一类型的多个值。相同的值可以多次出现在一个数组的不同位置中。 Swift 数组会强制检测元素的类型，如果类型不同则会报错，Swift 数组应该遵循像Array这样的形式，其中Element是这个数组中唯一允许存在的数据类型。 如果创建一个数组，并赋值给一个变量，则创建的集合就是可以修改的。这意味着在创建数组后，可以通过添加、删除、修改的方式改变数组里的项目。如果将一个数组赋值给常量，数组就不可更改，并且数组的大小和内容都不可以修改。 创建数组123456789import UIKit//创建了一个类型为Int，数量为3，初始值为0的空数组var someInts1 = [Int](repeating: 0, count: 3)var someInts2: [Int] = []//创建了含有三个元素的数组var someInts3: [Int] = [10,20,30] 访问数组我们可以根据数组的索引来访问数组的元素，index索引从0开始，即索引0对应第一个元素，索引1对应第二个元素 12345678import UIKit//创建了一个类型为Int，数量为3，初始值为10的空数组var someInts = [Int](repeating: 10, count: 3)print(someInts[0])print(someInts[1])print(someInts[2]) 修改数组你可以使用append()方法或者赋值运算符+=在数组末尾添加元素 遍历数组 合并数组可以使用加法操作符（+）来合并两种已存在的相同类型数组。新数组的数据类型会从两个数组的数据类型中推断出来 ![image-20210527173142243](/Users/liaojialong/Library/Application Support/typora-user-images/image-20210527173142243.png) count属性可以使用count属性来计算数组元素的个数 isEmpty属性可以通过只读属性isEmpty来判断数组是否为空，返回布尔值 Swift 字典Swift 字典用来存储无序的相同类型数据的集合，Swift 字典会强制检测元素的类型，如果类型不同则会报错。 Swift 字典每个值（value）都关联唯一的键（key），键作为字典中的这个值数据的标识符。 和数组中的数据项不同，字典中的数据项并没有具体顺序。我们在需要通过标识符（键）访问数据的时候使用字典，这种方法很大程度上和我们在现实世界中使用字典查字义的方法一样。 Swift 字典的key没有类型限制可以是整型或字符串，但必须是唯一的。 如果创建一个字典，并赋值给一个变量，则创建的字典就是可以修改的。这意味着在创建字典后，可以通过添加、删除、修改的方式改变字典里的项目。如果将一个字典赋值给常量，字典就不可修改，并且字典的大小和内容都不可以修改 创建字典12345678import UIKit//创建一个空字典，键的类型为Int，值的类型为Stringvar someDict1 = [Int: String]()var someDict2: [Int: String] = [:]var someDict3: [Int: String] = [1: &quot;One&quot;, 2: &quot;Two&quot;, 3: &quot;Three&quot;] 访问字典 修改字典我们可以使用 updateValue(forKey: ) 增加或更新字典的内容。如果 key 不存在，则添加值，如果存在则修改 key 对应的值。 也可以通过指定的key来修改字典的值 移除Key-Value对我们可以使用 removeValueForKey() 方法来移除字典 key-value 对。如果 key 存在该方法返回移除的值，如果不存在返回 nil 也可以通过指定键的值为nil来移除key-value对 遍历字典 字典转换为数组可以提取字典的键值(key-value)对，并转换为独立的数组 count 属性可以使用只读的count属性来计算字典有多少个键值对 isEmpty 属性可以通过只读属性 isEmpty 来判断字典是否为空，返回布尔值","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://example.com/tags/Swift/"}]},{"title":"Swift函数和闭包","slug":"开发语言/Swift/Swift函数和闭包","date":"2020-12-24T16:00:00.000Z","updated":"2021-06-05T11:47:30.402Z","comments":true,"path":"2020/12/25/开发语言/Swift/Swift函数和闭包/","link":"","permalink":"http://example.com/2020/12/25/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Swift/Swift%E5%87%BD%E6%95%B0%E5%92%8C%E9%97%AD%E5%8C%85/","excerpt":"","text":"Swift函数Swift函数用来完成特定任务的独立的代码块 函数声明：告诉编译器函数的名字、返回类型及参数 函数定义：提供了函数的实体 函数定义和调用Swift 定义函数使用关键字 func。 定义函数的时候，可以指定一个或多个输入参数和一个返回值类型。 每个函数都有一个函数名来描述它的功能。通过函数名以及对应类型的参数值来调用这个函数。函数的参数传递的顺序必须与参数列表相同。 函数的实参传递的顺序必须与形参列表相同，**-&gt;** 后定义函数的返回值类型。 函数参数函数可以接受一个或者多个参数，这些参数被包含在函数的括号中，以逗号分隔 不带参数的函数 元组作为函数的返回值函数返回值类型可以是字符串，整型，浮点型等。 元组与数组类似，不同的是，元组中的元素可以是任意类型，使用的是圆括号。 你可以用元组（tuple）类型让多个值作为一个复合值从函数中返回。 1234567891011121314151617181920import UIKit//在一个Int数组中找出最小值和最大值func minMax(array: [Int]) -&gt; (min: Int, max: Int) &#123; var currentMin = array[0] var currentMax = array[0] for value in array[1..&lt;array.count] &#123; if value &lt; currentMin &#123; currentMin = value &#125; else if value &gt; currentMax &#123; currentMax = value &#125; &#125; return (currentMin, currentMax)&#125;let bounds = minMax(array: [8, -6, 2, 109, 3, 71])print(&quot;最小值为 \\(bounds.min) ，最大值为 \\(bounds.max)&quot;) 123456789101112131415161718192021222324252627import UIKit//如果你不确定返回的元组一定不为nil，那么你可以返回一个可选的元组类型//注意：可选元组类型如(Int, Int)?与元组包含可选类型如(Int?, Int?)是不同的.可选的元组类型，整个元组是可选的，而不只是元组中的每个元素值。//前面的minMax(_:)函数返回了一个包含两个Int值的元组。但是函数不会对传入的数组执行任何安全检查，如果array参数是一个空数组，如上定义的minMax(_:)在试图访问array[0]时会触发一个运行时错误。为了安全地处理这个&quot;空数组&quot;问题，将minMax(_:)函数改写为使用可选元组返回类型，并且当数组为空时返回nilfunc minMax(array: [Int]) -&gt; (min: Int, max: Int)? &#123; if array.isEmpty &#123; return nil &#125; var currentMin = array[0] var currentMax = array[0] for value in array[1..&lt;array.count] &#123; if value &lt; currentMin &#123; currentMin = value &#125; else if value &gt; currentMax &#123; currentMax = value &#125; &#125; return (currentMin, currentMax)&#125;let bounds = minMax(array: [8, -6, 2, 109, 3, 71])print(&quot;最小值为 \\(bounds!.min) ，最大值为 \\(bounds!.max)&quot;) 没有返回值的函数1234567import UIKitfunc runoob(site: String) &#123; print(&quot;菜鸟教程官网： \\(site)&quot;)&#125;runoob(site: &quot;http://www.runoob.com&quot;) 函数参数名称函数参数都有一个外部参数名和一个局部参数名 局部参数名在函数的实现内部使用 外部参数名可以在局部参数名前指定外部参数名，中间以空格分隔，外部参数名用于在函数调用时传递给函数的参数。 可变参数可变参数可以接受零个或多个值。函数调用时，你可以用可变参数来指定函数参数，其数量是不确定的。可变参数通过在变量类型名后面加入（…）的方式来定义。 常量、变量、I/O参数一般默认在函数中定义的参数都是常量参数，也就是这个参数你只可以查询使用，不能改变它的值。如果想要声明一个变量参数，可以在参数定义前加 inout 关键字，这样就可以改变这个参数的值了。 函数类型及使用每个函数都有种特定的函数类型，由函数的参数类型和返回类型组成 使用函数类型 函数类型作为参数类型，函数类型作为返回类型 函数嵌套函数嵌套指的是函数内定义一个新的函数，外部的函数可以调用函数内定义的函数。 Swift闭包闭包是自包含的功能代码块，可以在代码中使用或者用来作为参数传值，全局函数和嵌套函数其实就是特殊的闭包 闭包的形式： 全局函数 嵌套函数 闭包表达式 有名字但不能捕获任何值。 有名字，也能捕获封闭函数内的值。 无名闭包，使用轻量级语法，可以根据上下文环境捕获值。 Swift中的闭包有很多优化的地方: 根据上下文推断参数和返回值类型 从单行表达式闭包中隐式返回（也就是闭包体只有一行代码，可以省略return） 可以使用简化参数名，如$0, $1(从0开始，表示第i个参数…) 提供了尾随闭包语法(Trailing closure syntax) 语法 闭包表达式闭包表达式是一种利用简洁语法构建内联闭包的方式，闭包表达式提供了一些语法优化，使得撰写闭包变的简单明了 sorted 方法 Swift 标准库提供了名为 sorted(by:) 的方法，会根据您提供的用于排序的闭包函数将已知类型数组中的值进行排序。 排序完成后，sorted(by:) 方法会返回一个与原数组大小相同，包含同类型元素且元素已正确排序的新数组。原数组不会被 sorted(by:) 方法修改。 sorted(by:)方法需要传入两个参数： 已知类型的数组 闭包函数，该闭包函数需要传入与数组元素类型相同的两个值，并返回一个布尔类型值来表明当排序结束后传入的第一个参数排在第二个参数前面还是后面。如果第一个参数值出现在第二个参数值前面，排序闭包函数需要返回 true，反之返回 false。 参数名称缩写Swift自动为内联函数提供了参数名称缩写功能，可以直接通过$0,$1,$2来顺序调用闭包的参数 运算符函数Swift 的String类型定义了关于大于号 (&gt;) 的字符串实现，其作为一个函数接受两个String类型的参数并返回Bool类型的值。 而这正好与sort(_:)方法的第二个参数需要的函数类型相符合。 因此，可以简单地传递一个大于号，Swift可以自动推断出您想使用大于号的字符串函数实现 尾随闭包尾随闭包是一个书写在函数括号之后的闭包表达式，函数支持将其作为最后一个参数调用 捕获值 闭包可以在其定义的上下文中捕获常量或变量。 即使定义这些常量和变量的原域已经不存在，闭包仍然可以在闭包函数体内引用和修改这些值。 Swift最简单的闭包形式是嵌套函数，也就是定义在其他函数的函数体内的函数。 嵌套函数可以捕获其外部函数所有的参数以及定义的常量和变量。 12345678910111213141516171819202122import UIKitfunc makeIncrementor(forIncrement amount: Int) -&gt; () -&gt; Int &#123; var runningTotal = 0 //incrementor函数并没有获取任何参数，但是在函数体内访问了runningTotal和amount变量。这是因为其通过捕获在包含它的函数体内已经存在的runningTotal和amount变量而实现。由于没有修改amount变量，incrementor实际上捕获并存储了该变量的一个副本，而该副本随着incrementor一同被存储。所以我们调用这个函数时会累加 func incrementor() -&gt; Int &#123; runningTotal += amount return runningTotal &#125; return incrementor&#125;let incrementByTen = makeIncrementor(forIncrement: 10)print(incrementByTen()) //返回值为10print(incrementByTen()) //返回值为20print(incrementByTen()) //返回值为30 闭包是引用类型 上面的例子中，incrementByTen是常量，但是这些常量指向的闭包仍然可以增加其捕获的变量值。这是因为函数和闭包都是引用类型。 无论您将函数/闭包赋值给一个常量还是变量，您实际上都是将常量/变量的值设置为对应函数/闭包的引用。 上面的例子中，incrementByTen指向闭包的引用是一个常量，而并非闭包内容本身。这也意味着如果您将闭包赋值给了两个不同的常量/变量，两个值都会指向同一个闭包 123456789101112131415161718192021222324252627282930import UIKitfunc makeIncrementor(forIncrement amount: Int) -&gt; () -&gt; Int &#123; var runningTotal = 0 //incrementor函数并没有获取任何参数，但是在函数体内访问了runningTotal和amount变量。这是因为其通过捕获在包含它的函数体内已经存在的runningTotal和amount变量而实现。由于没有修改amount变量，incrementor实际上捕获并存储了该变量的一个副本，而该副本随着incrementor一同被存储。所以我们调用这个函数时会累加 func incrementor() -&gt; Int &#123; runningTotal += amount return runningTotal &#125; return incrementor&#125;let incrementByTen = makeIncrementor(forIncrement: 10)print(incrementByTen()) //返回值为10print(incrementByTen()) //返回值为20print(incrementByTen()) //返回值为30let alsoIncrementByTen = incrementByTenprint(alsoIncrementByTen()) //返回值也为40//这里的值没有发生改变，是因为函数被调用结束就被释放了，没有用一个常量或变量去引用它，相当于每次调用都是一个新的函数print(makeIncrementor(forIncrement: 20)()) //结果为20print(makeIncrementor(forIncrement: 20)()) //结果为20print(makeIncrementor(forIncrement: 20)()) //结果为20","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://example.com/tags/Swift/"}]},{"title":"Swift枚举和结构体","slug":"开发语言/Swift/Swift枚举和结构体","date":"2020-12-23T16:00:00.000Z","updated":"2021-06-05T11:47:59.386Z","comments":true,"path":"2020/12/24/开发语言/Swift/Swift枚举和结构体/","link":"","permalink":"http://example.com/2020/12/24/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Swift/Swift%E6%9E%9A%E4%B8%BE%E5%92%8C%E7%BB%93%E6%9E%84%E4%BD%93/","excerpt":"","text":"Swift 枚举枚举简单的说也是一种数据类型，只不过是这种数据类型只包含自定义的特定数据，它是一组有共同特性的数据的集合 枚举的功能为： 它声明在类中，可以通过实例化类来访问它的值。 枚举也可以定义构造函数（initializers）来提供一个初始成员值；可以在原始的实现基础上扩展它们的功能。 可以遵守协议（protocols）来提供标准的功能。 语法1234567891011121314151617181920212223242526272829303132import UIKit//定义枚举enum DaysofaWeek &#123; case Sunday //case关键词表示一行新的成员值将被定义 case Monday case TUESDAY case WEDNESDAY case THURSDAY case FRIDAY case Saturday&#125;var weekDay = DaysofaWeek.THURSDAYswitch weekDay &#123; case .Sunday: print(&quot;星期天&quot;)case .Monday: print(&quot;星期一&quot;)case .TUESDAY: print(&quot;星期二&quot;)case .WEDNESDAY: print(&quot;星期三&quot;)case .THURSDAY: print(&quot;星期四&quot;)case .FRIDAY: print(&quot;星期五&quot;)case .Saturday: print(&quot;星期六&quot;)&#125; 注意：和 C 和 Objective-C 不同，Swift 的枚举成员在被创建时不会被赋予一个默认的整型值。在上面的*DaysofaWeek例子中，Sunday，Monday，……和Saturday不会隐式地赋值为0，1，……和6。相反，这些枚举成员本身就有完备的值，这些值是已经明确定义好的DaysofaWeek*类型。 枚举可分为相关值与原始值： 相关值 原始值 不同数据类型 相同数据类型 实例: enum {10,0.8,”Hello”} 实例: enum {10,35,50} 值的创建基于常量或变量 预先填充的值 相关值是当你在创建一个基于枚举成员的新常量或变量时才会被设置，并且每次当你这么做得时候，它的值可以是不同的。 原始值始终是相同的 相关值 原始值原始值可以是字符串，字符，或者任何整型值或浮点型值。每个原始值在它的枚举声明中必须是唯一的。 在原始值为整数的枚举时，不需要显式的为每一个成员赋值，Swift会自动为你赋值。例如，当使用整数作为原始值时，隐式赋值的值依次递增1。如果第一个值没有被赋初值，将会被自动置为0。 Swift 结构体Swift 结构体是构建代码所用的一种通用且灵活的构造体。我们可以为结构体定义属性（常量、变量）和添加方法，从而扩展结构体的功能。 与 C 和 Objective C 不同的是： 结构体不需要包含实现文件和接口。 结构体允许我们创建一个单一文件，且系统会自动生成面向其它代码的外部接口。 结构体总是通过被复制的方式在代码中传递，因此它的值是不可修改的。 123456789101112import UIKitstruct MarkStruct &#123; var mark1: Int = 100 var mark2: Int = 78 var mark3: Int = 98&#125;//结构体实例化var marks = MarkStruct()print(marks.mark1, marks.mark2, marks.mark3) 结构体应用在代码中，你可以使用结构体来定义你的自定义数据类型，结构体实例总是通过值传递来定义你的自定义数据类型 123456789101112131415161718import UIKitstruct ReSolution &#123; var width = 0 var height = 0&#125;// 创建一个结构体let hd = ReSolution(width: 1920, height: 1080)// 结构体赋值,实际上做的是拷贝操作,cinema和hd结构体在内存中各自占用独立的空间var cinema = hd// 修改cinema结构体,不会影响hd结构体cinema.width = 2048print(&quot;cinema is now \\(cinema.width) pixels wide&quot;) // return:2048print(&quot;hd is still \\(hd.width) pixels wide&quot;) // return:1920 与值类型不同，引用类型在被赋予到一个变量、常量或者被传递到一个函数时，操作的并不是其拷贝。因此，引用的是已存在的实例本身而不是其拷贝。类就是引用类型。 1234567891011121314151617181920212223import UIKitclass ResolutionClass &#123; var width = 0 var height = 0 init(width: Int,height: Int) &#123; self.width = width self.height = height &#125;&#125;// 创建一个类对象let hdClass = ResolutionClass(width: 1920, height: 1080)// 类对象赋值,引用同一个内存空间var cinemaClass = hdClass// 修改cinema对象,本质上也是修改hdClass对象cinemaClass.width = 2048print(&quot;cinemaClass is now \\(cinemaClass.width) pixels wide&quot;) // return: 2048print(&quot;hdClass is also \\(hdClass.width) pixels wide&quot;) // return: 2048","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://example.com/tags/Swift/"}]},{"title":"Swift类","slug":"开发语言/Swift/Swift类","date":"2020-12-22T16:00:00.000Z","updated":"2021-06-05T11:48:22.277Z","comments":true,"path":"2020/12/23/开发语言/Swift/Swift类/","link":"","permalink":"http://example.com/2020/12/23/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Swift/Swift%E7%B1%BB/","excerpt":"","text":"Swift类Swift类是构建代码所用的一种通用且灵活的构造体，我们可以为类定义属性(常量、变量)和方法，与其他编程语言所不同的是，Swift并不要求你为自定义类去创建独立的接口和实现文件，你所要做的是在一个单一文件中定义一个类，系统会自动生成面向其他代码的外部接口 类和结构体对比共同点： 定义属性用于存储值 定义方法用于提供功能 定义附属脚本用于访问值 定义构造器用于生成初始化值 通过扩展以增加默认实现的功能 符合协议以对某类提供标准功能 类还具有的附加功能： 继承允许一个类继承另一个类的特征 类型转换允许在运行时检查和解释一个类实例的类型 解构器允许一个类实例释放任何其所被分配的资源 引用计数允许对一个类的多次引用 语法123456789101112import UIKitclass student &#123; var studname: String = &quot;John&quot; var age: Int = 18&#125;//实例化类let studrecord = student()//类的属性可以通过.来访问print(studrecord.studname, studrecord.age) 恒等运算符因为类是引用类型，有可能有多个常量和变量在后台同时引用某一个类实例，为了能够判定两个常量或者变量是否引用同一个类实例，Swift内建了两个恒等运算符 恒等运算符 不恒等运算符 运算符为：=== 运算符为：!== 如果两个常量或者变量引用同一个类实例则返回 true 如果两个常量或者变量引用不同一个类实例则返回 true Swift属性Swift属性将值跟特定的类、结构或枚举关联 属性可分为存储属性和计算属性： 存储属性 计算属性 存储常量或变量作为实例的一部分 计算（而不是存储）一个值 用于类和结构体 用于类、结构体和枚举 存储属性一个存储属性就是存储在特定类或结构体的实例里的一个常量或变量，存储属性可以是变量存储属性，也可以是常量存储属性 可以在定义存储属性的时候指定默认值 也可以在构造过程中设置或修改存储属性的值，甚至修改常量存储属性的值 123456789101112import UIKitstruct Number &#123; var digits: Int let Pi = 3.1415 //代码中Pi在定义存储属性的时候指定默认值，所以不管你什么时候实例化结构体，它都不会改变 //如果你定义的是一个常量存储属性，如果尝试修改它就会报错&#125;var n = Number(digits: 12345)n.digits = 12print(n.digits, n.Pi) 延迟存储属性延迟存储属性是指当第一次被调用的时候才会计算其初始值的属性，在属性声明前使用lazy来标示一个延迟存储属性 注意：必须将延迟存储属性声明成变量，因为属性的值在实例构造完成之前可能无法得到，，而常量属性在构造过程完成之前必须要有初始值，因此无法声明成延迟属性 延迟存储属性一般用于：延迟对象的创建、当属性的值依赖于其他未知类 123456789101112import UIKitclass sample &#123; lazy var no = number()&#125;class number &#123; var name = &quot;Swift&quot;&#125;var firstsample = sample()print(firstsample.no.name) 计算属性除存储属性外，类、结构体和枚举可以定义计算属性，计算属性不直接存储值，而是提供一个getter来获取值，一个可选的setter来间接设置其他属性或变量的值 ![image-20210529110941684](/Users/liaojialong/Library/Application Support/typora-user-images/image-20210529110941684.png) 只读计算属性只有getter没有setter的计算属性就是只读计算属性，只读计算属性总是返回一个值，可以通过.运算符访问，但不能设置新的值 ![image-20210529111909855](/Users/liaojialong/Library/Application Support/typora-user-images/image-20210529111909855.png) 属性观察器属性观察器监控和响应属性值的变化，每次属性被设置值的时候都会调用属性观察器，甚至新的值和现在的值相同的时候也不例外。可以为除了延迟存储属性之外的其他存储属性添加属性观察器，也可以通过重载属性的方式为继承的属性（包括存储属性和计算属性）添加属性观察器。 注意：不需要为无法重载的计算属性添加属性观察器，因为可以通过 setter 直接监控和响应值的变化。 可以为属性添加如下的一个或全部观察器： willSet在设置新的值之前调用 didSet在新的值被设置之后立即调用 willSet和didSet观察器在属性初始化过程中不会被调用 全局变量和局部变量计算属性和属性观察器所描述的模式也可以用于全局变量和局部变量 局部变量 全局变量 在函数、方法或闭包内部定义的变量。 函数、方法、闭包或任何类型之外定义的变量。 用于存储和检索值。 用于存储和检索值。 存储属性用于获取和设置值。 存储属性用于获取和设置值。 也用于计算属性。 也用于计算属性。 类型属性属性可以直接用于类型本身，这种属性称为类型属性 类型属性是作为类型定义的一部分写在类型最外层的花括号&#123;&#125;内。 使用关键字 static 来定义值类型的类型属性，关键字 class 来为类定义类型属性。 123456789101112131415161718192021struct Structname &#123; static var storedTypeProperty = &quot; &quot; static var computedTypeProperty: Int &#123; // 这里返回一个 Int 值 &#125;&#125;enum Enumname &#123; static var storedTypeProperty = &quot; &quot; static var computedTypeProperty: Int &#123; // 这里返回一个 Int 值 &#125;&#125;class Classname &#123; class var computedTypeProperty: Int &#123; // 这里返回一个 Int 值 &#125;&#125;//注意：例子中的计算型类型属性是只读的，但也可以定义可读可写的计算型类型属性，跟实例计算属性的语法类似。 获取和设置类型属性的值类似于实例的属性，类型属性的访问也是通过点运算符(.)来进行。但是，类型属性是通过类型本身来获取和设置，而不是通过实例。 12345678910111213141516171819202122232425262728293031import UIKitstruct StudMarks &#123; static let markCount = 97 static var totalCount = 0 var InternalMarks: Int = 0 &#123; didSet &#123; if InternalMarks &gt; StudMarks.markCount &#123; InternalMarks = StudMarks.markCount &#125; if InternalMarks &gt; StudMarks.totalCount &#123; StudMarks.totalCount = InternalMarks &#125; &#125; &#125;&#125;var stud1Mark1 = StudMarks()var stud1Mark2 = StudMarks()stud1Mark1.InternalMarks = 98print(stud1Mark1.InternalMarks) //97print(StudMarks.markCount) //97print(StudMarks.totalCount) //97stud1Mark2.InternalMarks = 87print(stud1Mark2.InternalMarks) //87print(StudMarks.markCount) //97❓print(StudMarks.totalCount) //97❓ Swift方法","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Swift","slug":"Swift","permalink":"http://example.com/tags/Swift/"}]},{"title":"LeetCode_167_两数之和2-输入有序数组","slug":"LeetCode🌟/LeetCode_双指针/LeetCode_167_两数之和2-输入有序数组","date":"2020-11-29T16:00:00.000Z","updated":"2021-07-04T02:30:42.674Z","comments":true,"path":"2020/11/30/LeetCode🌟/LeetCode_双指针/LeetCode_167_两数之和2-输入有序数组/","link":"","permalink":"http://example.com/2020/11/30/LeetCode%F0%9F%8C%9F/LeetCode_%E5%8F%8C%E6%8C%87%E9%92%88/LeetCode_167_%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C2-%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/","excerpt":"","text":"题目描述：12345678910111213141516171819202122232425若两个指针指向同一数组，遍历方向相同且不会相交，则称为滑动窗口（两个指针包围的区域即为当前的窗口），经常用于区间搜索若两个指针指向同一数组，但是遍历方向相反，则可以用来进行搜索，待搜索的数组往往是排好序的指针函数：返回类型是指针的函数函数指针：指向函数的指针给定一个已按照 升序排列 的整数数组 numbers ，请你从数组中找出两个数满足相加之和等于目标数 target 。函数应该以长度为 2 的整数数组的形式返回这两个数的下标值。numbers 的下标 从 1 开始计数 ，所以答案数组应当满足 1 &lt;&#x3D; answer[0] &lt; answer[1] &lt;&#x3D; numbers.length 。你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。示例：输入：numbers &#x3D; [2,7,11,15], target &#x3D; 9输出：[1,2]解释：2 与 7 之和等于目标数 9 。因此 index1 &#x3D; 1, index2 &#x3D; 2 。输入：numbers &#x3D; [2,3,4], target &#x3D; 6输出：[1,3]输入：numbers &#x3D; [-1,0], target &#x3D; -1输出：[1,2]提示：1. 2 &lt;&#x3D; numbers.length &lt;&#x3D; 3 * 10^42. -1000 &lt;&#x3D; numbers[i] &lt;&#x3D; 10003. numbers 按 递增顺序 排列4. -1000 &lt;&#x3D; target &lt;&#x3D; 10005. 仅存在一个有效答案 解法1：双指针1234567891011121314151617181920212223class Solution &#123;public: vector&lt;int&gt; twoSum(vector&lt;int&gt;&amp; numbers, int target) &#123; int l = 0,r = numbers.size() - 1; //定义一个左指针，一个右指针 int sum; //如果两个指针指向元素的和等于给定值，那么它们就是我们要的结果。 //如果两个指针指向元素的和小于给定值，我们就把左指针向右移一位 //如果两个指针指向元素的和大于给定值，我们就把右指针向左移一位 while (l &lt; r) &#123; sum = numbers[l] + numbers[r]; //对于排好序且有解的数组，双指针一定能遍历到最优解 if (sum == target) break; if (sum &lt; target) ++l; else --r; &#125; return vector&lt;int&gt;&#123;l + 1,r + 1&#125;; &#125;&#125;;","categories":[{"name":"LeetCode🌟","slug":"LeetCode🌟","permalink":"http://example.com/categories/LeetCode%F0%9F%8C%9F/"}],"tags":[{"name":"LeetCode_双指针","slug":"LeetCode-双指针","permalink":"http://example.com/tags/LeetCode-%E5%8F%8C%E6%8C%87%E9%92%88/"}]},{"title":"LeetCode_88_合并两个有序数组","slug":"LeetCode🌟/LeetCode_双指针/LeetCode_88_合并两个有序数组","date":"2020-11-28T16:00:00.000Z","updated":"2021-07-04T02:30:16.976Z","comments":true,"path":"2020/11/29/LeetCode🌟/LeetCode_双指针/LeetCode_88_合并两个有序数组/","link":"","permalink":"http://example.com/2020/11/29/LeetCode%F0%9F%8C%9F/LeetCode_%E5%8F%8C%E6%8C%87%E9%92%88/LeetCode_88_%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/","excerpt":"","text":"题目描述：123456789101112131415给你两个有序整数数组 nums1 和 nums2，请你将 nums2 合并到 nums1 中，使 nums1 成为一个有序数组。初始化 nums1 和 nums2 的元素数量分别为 m 和 n 。你可以假设 nums1 的空间大小等于 m + n，这样它就有足够的空间保存来自 nums2 的元素。示例：输入：nums1 &#x3D; [1,2,3,0,0,0], m &#x3D; 3, nums2 &#x3D; [2,5,6], n &#x3D; 3输出：[1,2,2,3,5,6]输入：nums1 &#x3D; [1], m &#x3D; 1, nums2 &#x3D; [], n &#x3D; 0输出：[1]提示：1. nums1.length &#x3D;&#x3D; m + n2. nums2.length &#x3D;&#x3D; n3. 0 &lt;&#x3D; m, n &lt;&#x3D; 2004. 1 &lt;&#x3D; m + n &lt;&#x3D; 2005. -10^9 &lt;&#x3D; nums1[i], nums2[i] &lt;&#x3D; 10^9 解法1：三指针123456789101112131415161718192021class Solution &#123;public: //a++和++a都是将a加1，但是a++返回值a，++a返回值为a+1 //⭐️如果只是希望增加a的值，而不需要返回值，则推荐使用++a，其运行速度会略快一些 void merge(vector&lt;int&gt;&amp; nums1, int m, vector&lt;int&gt;&amp; nums2, int n) &#123; //因为这两个数组已经排好序，我们可以把两个指针分别放在两个数组的末尾，即nums1的m-1位和nums2的n-1位 //每次将较大的那个数字复制到nums1的后边，然后向前移动一位。因为我们也要定位nums1的末尾，所以我们还需要第三个指针，以便复制 int pos = m-- + n-- -1; while (m &gt;= 0 &amp;&amp; n &gt;= 0) &#123; nums1[pos--] = nums1[m] &gt; nums2[n] ? nums1[m--] : nums2[n--]; &#125; //[0] 0 [1] 1 while (n &gt;= 0) &#123; nums1[pos--] = nums2[n--]; &#125; &#125;&#125;;","categories":[{"name":"LeetCode🌟","slug":"LeetCode🌟","permalink":"http://example.com/categories/LeetCode%F0%9F%8C%9F/"}],"tags":[{"name":"LeetCode_双指针","slug":"LeetCode-双指针","permalink":"http://example.com/tags/LeetCode-%E5%8F%8C%E6%8C%87%E9%92%88/"}]},{"title":"LeetCode_633_平方数之和","slug":"LeetCode🌟/LeetCode_双指针/LeetCode_633_平方数之和","date":"2020-11-27T16:00:00.000Z","updated":"2021-07-04T02:29:47.622Z","comments":true,"path":"2020/11/28/LeetCode🌟/LeetCode_双指针/LeetCode_633_平方数之和/","link":"","permalink":"http://example.com/2020/11/28/LeetCode%F0%9F%8C%9F/LeetCode_%E5%8F%8C%E6%8C%87%E9%92%88/LeetCode_633_%E5%B9%B3%E6%96%B9%E6%95%B0%E4%B9%8B%E5%92%8C/","excerpt":"","text":"题目描述：1234567891011121314151617181920给定一个非负整数 c ，你要判断是否存在两个整数 a 和 b，使得 a^2 + b^2 &#x3D; c 。示例：输入：c &#x3D; 5输出：true解释：1 * 1 + 2 * 2 &#x3D; 5输入：c &#x3D; 3输出：false输入：c &#x3D; 4输出：true输入：c &#x3D; 2输出：true输入：c &#x3D; 1输出：true提示：0 &lt;&#x3D; c &lt;&#x3D; 2^31 - 1 解法1：双指针1234567891011121314151617181920class Solution &#123;public: bool judgeSquareSum(int c) &#123; //双指针 long left = 0; long right = (int)sqrt(c); while (left &lt;= right) &#123; long sum = left * left + right * right; if (sum == c) return true; else if (sum &gt; c) right--; else left++; &#125; return false; &#125;&#125;;","categories":[{"name":"LeetCode🌟","slug":"LeetCode🌟","permalink":"http://example.com/categories/LeetCode%F0%9F%8C%9F/"}],"tags":[{"name":"LeetCode_双指针","slug":"LeetCode-双指针","permalink":"http://example.com/tags/LeetCode-%E5%8F%8C%E6%8C%87%E9%92%88/"}]},{"title":"LeetCode_680_验证回文字符串2","slug":"LeetCode🌟/LeetCode_双指针/LeetCode_680_验证回文字符串2","date":"2020-11-26T16:00:00.000Z","updated":"2021-07-04T02:29:14.173Z","comments":true,"path":"2020/11/27/LeetCode🌟/LeetCode_双指针/LeetCode_680_验证回文字符串2/","link":"","permalink":"http://example.com/2020/11/27/LeetCode%F0%9F%8C%9F/LeetCode_%E5%8F%8C%E6%8C%87%E9%92%88/LeetCode_680_%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B22/","excerpt":"","text":"题目描述：1234567891011给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。示例：输入: &quot;aba&quot;输出: True输入: &quot;abca&quot;输出: True解释: 你可以删除c字符。注意：字符串只包含从 a-z 的小写字母。字符串的最大长度是50000。 解法1：双指针12345678910111213141516171819202122232425class Solution &#123;public: bool validPalindrome(string s) &#123; //双指针遍历 for (int i = 0, j = s.length() - 1; i &lt; j; i++, j--) &#123; //遇到要删除的情况，分成两部分进行判断 if (s[i] != s[j]) &#123; return isPalindrome(s, i + 1, j) || isPalindrome(s, i, j - 1); &#125; &#125; return true; &#125; //判断子字符串是否是回文串 bool isPalindrome(string s, int i, int j) &#123; while (i &lt; j) &#123; if (s[i++] != s[j--]) return false; &#125; return true; &#125;&#125;;","categories":[{"name":"LeetCode🌟","slug":"LeetCode🌟","permalink":"http://example.com/categories/LeetCode%F0%9F%8C%9F/"}],"tags":[{"name":"LeetCode_双指针","slug":"LeetCode-双指针","permalink":"http://example.com/tags/LeetCode-%E5%8F%8C%E6%8C%87%E9%92%88/"}]},{"title":"基础知识","slug":"计算机基础/《汇编语言(第4版)》/基础知识","date":"2020-10-30T16:00:00.000Z","updated":"2021-05-20T09:55:20.197Z","comments":true,"path":"2020/10/31/计算机基础/《汇编语言(第4版)》/基础知识/","link":"","permalink":"http://example.com/2020/10/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8A%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80(%E7%AC%AC4%E7%89%88)%E3%80%8B/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"——————————————————1.1.机器语言1.2.汇编语言的产生1.3.汇编语言的组成1.4.存储器1.5.指令和数据1.6.存储单元1.7.CPU对存储器的读写1.8.地址总线1.9.数据总线1.10.控制总线1.11.内存地址空间(概述)1.12.主板1.13.接口卡1.14.各类存储器芯片1.15.内存地址空间—————————————————— 汇编语言是直接在硬件之上工作的编程语言，首先要了解硬件系统的结构，才能有效的应用汇编语言对其编程 机器语言是机器指令的集合，机器指令展开来讲就是一台机器可以正确执行的命令，电子计算机的机器指令是一列二进制数字，计算机将之转变为一列高低电平，以使计算机的电子器件受到驱动，进行运算 CPU是一种微处理器，每一种微处理器，由于硬件设计和内部结构的不同，就需要不同的电平脉冲来控制，使他工作，所以每一种微处理器都有自己的机器指令集，也就是机器语言———————— 汇编语言的主体是汇编指令 汇编指令和机器指令的差别在于指令的表示方法上，汇编指令是机器指令便于记忆的书写格式，汇编指令是机器指令的助记符 寄存器，简单的讲是CPU中可以存储数据的器件，一个CPU中有多个寄存器，AX是其中一个寄存器的代号，BX是另一个寄存器的代号———————— 汇编语言由以下三类组成：1）汇编指令（机器码的助记符，有对应的机器码）2）伪指令（没有对应的机器码，由编译器执行，计算机并不执行）3）其他符号如+-*/（由编译器识别，没有对应的机器码） 汇编语言的核心是汇编指令，它决定了汇编语言的特性———————— CPU是计算机的核心部件，它控制着整个计算机的运作并进行运算，要想让一个CPU工作，就必须向它提供指令和数据，指令和数据在存储器中存放，也就是平时所说的内存 在一台PC机中内存的作用仅次于CPU，离开了内存，性能再好的CPU也无法工作，磁盘不同于内存，磁盘上的数据或程序如果不读到内存中，就无法被CPU使用———————— 指令和数据是应用上的概念，在内存或磁盘上，指令和数据没有任何区别，都是二进制信息———————— 存储器被划分为若干个存储单元，每个存储单元从0开始顺序编号【电子计算机的最小信息单位是bit（比特），也就是一个二进制位，8个bit组成一个Byte（字节），微型机存储器的存储单位可以存储一个Byte】————————— CPU要想进行数据的读写，必须和外部器件（芯片）进行三类信息的交互：1）地址信息：存储单元的地址2）控制信息：器件的选择，读或写命令3）数据信息：读或写的数据 每一个CPU芯片都有许多管脚，这些管脚和总线相连，也可以说，这些管脚引出总线，一个CPU可以引出三种总线的宽度标志着这个CPU的不同方面的性能：地址总线的宽度决定了CPU的寻址能力数据总线的宽度决定了CPU与其他器件进行数据传送时的一次数据传送量控制总线的宽度决定了CPU对系统中其他器件的控制能力 电子计算机能处理、传输的信息都是电信号，电信号当然要用导线传送，在计算机中专门有连接CPU和其他芯片的导线，通常称为总线物理上：一根根导线的集合逻辑上划分为：1）地址总线：CPU是通过地址总线来指定存储单元的，地址总线上能传送多少个不同的信息，CPU就可以对多少个存储单元进行寻址 一个CPU有N根地址总线，则可以说这个CPU的地址总线的宽度为N，这样的CPU最多可以寻找2的N次方个内存单元 2）数据总线：CPU与内存或其他器件之间的数据传送是通过数据总线来进行的，数据总线的宽度决定了CPU和外界的数据传送速度 8088CPU的数据总线宽度为8，8086CPU的数据总线宽度为16 3）控制总线：CPU对外部器件的控制是通过控制总线来进行的，在这里控制总线是个总称，控制总线是一些不同控制线的集合，有多少根控制总线，就意味着CPU提供了对外部器件的多少种控制，所以，控制总线的宽度决定了CPU对外部器件的控制能力 要让一个计算机或微处理器工作，应向它输入能够驱动它进行工作的电平信号（机器码）—————————— 一个CPU的地址线宽度为10，那么可以寻址1024个内存单元，这1024个可寻到的内存单元就构成了这个CPU的内存地址空间—————————— 在每一台PC机中，都有一个主板，主板上有核心器件和一些主要器件，这些器件通过总线（地址总线、数据总线、控制总线）相连，这些器件有CPU、存储器、外围芯片组、扩展插槽等，扩展插槽上一般插有RAM内存条和各类接口卡—————————— 计算机系统中，所有可用程序控制其互作的设备，必须受到CPU的控制，CPU对外部设备不能直接控制，如显示器、音箱、打印机等，直接控制这些设备进行工作的是插在扩展插槽上的接口卡，扩展插槽通过总线和CPU相连，所以接口卡也通过总线同CPU相连—————————— 各类存储器芯片：1）从读写属性上看分为两类：随机存储器（RAM）和只读存储器（ROM），随机存储器可读可写，但必须带电存储，关机后存储的内容丢失；只读存储器只能读取不能写入，关机后其中的内容不丢失2）从功能和连接上分类： 这些存储器在物理上是独立的器件： 但是它们在以下两点上相同：1）都和CPU的总线相连2）CPU对它们进行读或写的时候都通过控制线发出内存读写命令 不同的计算机系统的内存地址空间分配情况是不同的 内存地址空间的大小受CPU地址总线宽度的限制 对CPU来讲，系统中的所有存储器中的存储单元都处于一个统一的逻辑存储器中，它的容量受CPU寻址能力的限制，这个逻辑存储器即是我们所说的内存地址空间","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《汇编语言(第4版)》","slug":"《汇编语言-第4版-》","permalink":"http://example.com/tags/%E3%80%8A%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E7%AC%AC4%E7%89%88-%E3%80%8B/"}]},{"title":"数据库基本术语","slug":"计算机基础/《MySQL必知必会》/数据库基本术语","date":"2020-10-30T16:00:00.000Z","updated":"2021-05-20T09:49:19.040Z","comments":true,"path":"2020/10/31/计算机基础/《MySQL必知必会》/数据库基本术语/","link":"","permalink":"http://example.com/2020/10/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E6%9C%AC%E6%9C%AF%E8%AF%AD/","excerpt":"","text":"数据库：保存有组织的数据的容器（通常是一个文件或一组文件） 表：某种特定类型数据的结构化清单，数据库中的每个表都有一个名字，用来标识自己，此名字是唯一的，这表示数据库中没有其他表具有相同的名字【虽然在相同数据库中不能两次使用相同的表名，但在不同数据库中却可以使用相同的表名】 模式：关于数据库和表的布局及特性的信息 列：表中的一个字段，所有表都是由一个或多个列组成的 数据类型：所容许的数据的类型，每个表列都有相应的数据类型，它限制（或容许）该列中存储的数据 行：表中的一个记录 主键：一列（或一组列），其值能够唯一区分表中每个行 表中的任何列都可以作为主键，只要他满足以下条件：1）任意两行都不具有相同的主键值2）每个行都必须具有一个主键值（主键列不允许NULL值） ps aux | grep mysql /usr/local/mysql/bin/mysql -u root -p 关键字：作为MySQL语言组成部分的一个保留字，绝不要用关键字命名一个表或列 SQL语句不区分大小写！！","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"操作系统的概念、功能和目标","slug":"计算机基础/操作系统原理/操作系统的概念、功能和目标","date":"2020-10-30T16:00:00.000Z","updated":"2021-06-05T11:07:47.693Z","comments":true,"path":"2020/10/31/计算机基础/操作系统原理/操作系统的概念、功能和目标/","link":"","permalink":"http://example.com/2020/10/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A6%82%E5%BF%B5%E3%80%81%E5%8A%9F%E8%83%BD%E5%92%8C%E7%9B%AE%E6%A0%87/","excerpt":"","text":"操作系统的概念操作系统是指控制和管理整个计算机系统的硬件和软件资源，并合理的组织调度计算机的工作和资源的分配；以提供给用户和其他软件方便的接口和环境；它是计算机系统中最基本的系统软件 操作系统是系统资源的管理者 向上层提供方便易用的服务 是最接近硬件的一层软件 操作系统的功能和目标 作为系统资源的管理者(目标：安全、高效) 处理机管理 存储器管理 文件管理 设备管理 向上层提供方便易用的服务 封装思想：操作系统把一些丑陋的硬件功能封装成简单易用的服务，使用户能更方便的使用计算机，用户无需关心底层硬件的原理，只需要对操作系统发出命令即可 GUI：图形化用户接口，很多现代操作系统都提供GUI，用户可以使用形象的图形界面进行操作，而不再需要记忆复杂的命令、参数 命令接口 联机命令接口，联机命令接口 = 交互式命令接口，特点是用户说一句，系统跟着做一句 脱机命令接口，脱机命令接口 = 批处理命令接口，特点是用户说一堆，系统跟着做一堆 程序接口：可以在程序中进行系统调用来使用程序接口，普通用户不能直接使用程序接口，只能通过程序代码间接使用，系统调用类似于函数调用，是应用程序请求操作系统服务的唯一方式 作为最接近硬件的层次 需要实现对硬件机器的拓展，没有任何软件支持的计算机称为裸机，在裸机上安装的操作系统可以提供资源管理功能和方便用户的服务功能，将裸机改造成功能更强、使用更方便的机器，通常把覆盖了软件的机器称为扩充机器，又称为虚拟机 操作系统对硬件机器的扩展：将CPU、内存、磁盘、显示器、键盘等硬件合理的组织起来，让各种硬件能够相互协调配合，实现更多更复杂的功能","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"LeetCode_69_x的平方根","slug":"LeetCode🌟/LeetCode_查找算法/LeetCode_69_x的平方根","date":"2020-10-30T16:00:00.000Z","updated":"2021-07-04T15:58:08.967Z","comments":true,"path":"2020/10/31/LeetCode🌟/LeetCode_查找算法/LeetCode_69_x的平方根/","link":"","permalink":"http://example.com/2020/10/31/LeetCode%F0%9F%8C%9F/LeetCode_%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/LeetCode_69_x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/","excerpt":"","text":"题目描述：1234567891011121314二分查找也常被称为二分法或者折半查找，每次查找时通过将待查找区间分成两部分并只取一部分继续查找，将查找的复杂度大大减少。对于一个长度为O(n)的数组，二分查找的时间复杂度为O(logn)二分查找也可以看作双指针的一种特殊情况，但我们一般会将二者区分。双指针类型的题，指针通常是一步一步移动的，而在二分查找里，指针每次移动半个区间长度实现 int sqrt(int x) 函数。计算并返回 x 的平方根，其中 x 是非负整数。由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。示例：输入: 4输出: 2输入: 8输出: 2说明: 8 的平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。 解法1：二分查找123456789101112131415161718192021222324class Solution &#123;public: int mySqrt(int x) &#123; if (x == 0) return 0; int l = 1,r = x,mid,sqrt; while (l &lt;= r) &#123; //求一串排列数的中间值的时候：最好用‘l + (r - l) / 2’ //用‘(l + r) / 2’会很容易造成溢出 //比如传入x = 2147483647的情况 mid = l + (r - l) / 2; sqrt = x / mid; if (sqrt == mid) return mid; else if (mid &gt; sqrt) r = mid - 1; else l = mid + 1; &#125; return r; &#125;&#125;;","categories":[{"name":"LeetCode🌟","slug":"LeetCode🌟","permalink":"http://example.com/categories/LeetCode%F0%9F%8C%9F/"}],"tags":[{"name":"LeetCode_查找算法","slug":"LeetCode-查找算法","permalink":"http://example.com/tags/LeetCode-%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"}]},{"title":"寄存器(CPU工作原理)","slug":"计算机基础/《汇编语言(第4版)》/寄存器(CPU工作原理)","date":"2020-10-29T16:00:00.000Z","updated":"2021-05-20T09:55:41.562Z","comments":true,"path":"2020/10/30/计算机基础/《汇编语言(第4版)》/寄存器(CPU工作原理)/","link":"","permalink":"http://example.com/2020/10/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8A%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80(%E7%AC%AC4%E7%89%88)%E3%80%8B/%E5%AF%84%E5%AD%98%E5%99%A8(CPU%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86)/","excerpt":"","text":"—————————————————2.1.通用寄存器2.2.字在寄存器中的存储2.3.几条汇编指令2.4.物理地址2.5.16位结构的CPU2.6.8086CPU给出物理地址的方法2.7.“段地址*16+偏移地址=物理地址”的本质含义2.8.段的概念2.9.段寄存器2.10.CS和IP2.11.修改CS、IP的指令2.12.代码段————————————————— 一个典型的CPU由运算器、控制器、寄存器(CPU工作原理)等器件组成，这些器件靠内部总线相连 内部总线实现CPU内部各个器件之间的联系，外部总线实现CPU和主板上其他器件的联系 在CPU中：1）运算器进行信息处理2）寄存器进行信息存储3）控制器控制各种器件进行工作4）内部总线连接各种器件，在他们之间进行数据的传送 对于一个汇编程序员来说，CPU中的主要部件是寄存器，寄存器是CPU中程序员可以用指令读写的部件，程序员通过改变各种寄存器中的内容来实现对CPU的控制 8086CPU有14个寄存器，它们的名称为：AX，BX，CX，DX，SI，DI，SP，BP，CS，IP，SS，DS，ES，PSW 8086CPU所有的寄存器都是16位的，可以存放两个字节，AX、BX、CX、DX通常用来存放一般性数据被称为通用寄存器 一个16位寄存器可以存储一个16位的数据，所能存储的数据的最大值为2^16-1 8086上一代CPU中的寄存器都是8位的，为保证兼容性，这四个通用寄存器都可以分为两个独立的8位寄存器使用AX可以分为AH和ALBX可以分为BH和BLCX可以分为CH和CLDX可以分为DH和DL————————— 出于对兼容性的考虑，8086CPU可以一次性处理以下两种尺寸的数据：1）字节：记为byte，一个字节由8个bit组成，可以存在8位寄存器中2）字：记为word，一个字由两个字节组成，这两个字节分别称为这个字的高位字节和低位字节 为了区分不同的进制，在十六进制表示的数据的后面加H，在二进制表示的数据的后面加B————————— 在写一条汇编指令或一个寄存器的名称时不区分大小写：————————— CPU访问内存单元时，要给出内存单元的地址，所有的内存单元构成的存储空间是一个一维的线性空间，每一个内存单元在这个空间中都有唯一的地址，我们将这个唯一的地址称为物理地址 CPU通过地址总线送入存储器的，必须是一个内存单元的物理地址。在CPU向地址总线上发出物理地址之前，必须要在内部先形成这个物理地址，不同的CPU可以有不同的形成物理地址的方式————————— 概括来讲，16位结构描述了一个CPU具有下面几方面的结构特性：1）运算器一次最多可以处理16位的数据2）寄存器的最大宽度为16位3）寄存器和运算器之间的通路为16位————————— 8086CPU给出物理地址的方法： 8086CPU有20位地址总线，又是16位结构，采用一种在内部用两个16位地址合成的方法来形成一个20位的物理地址 当8086CPU要读写内存时：1）CPU中的相关部件提供两个16位的地址，一个称为段地址，另一个称为偏移地址2）段地址和偏移地址通过内部总线送入一个称为地址加法器的部件3）地址加法器将两个16位地址合成为一个20位的物理地址4）地址加法器通过内部总线将20位物理地址送入输入输出控制电路5）输入输出控制电路将20位物理地址送上地址总线6）20位物理地址被地址总线传送到存储器 —————————— “段地址16+偏移地址=物理地址”的本质含义是：CPU在访问内存时，用一个基础地址（段地址16）和一个相对于基础地址的偏移地址相加，给出内存单元的物理地址—————————— 在编程时可以根据需要，将若干地址连续的内存单元看作一个段，用段地址16定位段的起始地址（基础地址），用偏移地址定位段中的内存单元1）段地址16必然是16的倍数，所以一个段的起始地址也一定是16的倍数2）偏移地址为16位，16位地址的寻址能力为64KB，所以一个段的长度最大为64KB—————————— 段地址在8086CPU的段寄存器中存放，8086CPU有4个段寄存器：CS，DS，SS，ES—————————— CS和IP是8086CPU中两个最关键的寄存器，它们指示了CPU当前要读取指令的地址，CS为代码段寄存器，IP为指令指针寄存器 在8086PC机中，任意时刻，设CS中的内容为M，IP中的内容为N，8086CPU将从内存M*16+N单元开始，读取一条指令并执行 8086CPU读取、执行一条指令的过程： 1）从CS：IP指向的内存单元读取指令，读取的指令进入指令缓冲器2）IP=IP+所读取指令的长度，从而指向下一条指令3）执行指令，转到步骤1），重复这个过程 CPU将CS：IP指向的内存单元中的内容看作指令————————— 程序员可以通过改变CS、IP中的内容来控制CPU执行目标指令 8086CPU大部分寄存器的值，都可以用mov指令来改变，mov指令被称为传送指令，但是mov指令不能用于设置CS、IP的值；能够改变CS、IP的内容的指令被统称为转移指令（jmp指令） 若想仅修改IP的内容，可用形如“jmp 某一合法寄存器”的指令完成： ——————————","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《汇编语言(第4版)》","slug":"《汇编语言-第4版-》","permalink":"http://example.com/tags/%E3%80%8A%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E7%AC%AC4%E7%89%88-%E3%80%8B/"}]},{"title":"SHOW语句HELP SHOW","slug":"计算机基础/《MySQL必知必会》/SHOW语句HELP SHOW","date":"2020-10-29T16:00:00.000Z","updated":"2021-05-20T09:50:16.518Z","comments":true,"path":"2020/10/30/计算机基础/《MySQL必知必会》/SHOW语句HELP SHOW/","link":"","permalink":"http://example.com/2020/10/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/SHOW%E8%AF%AD%E5%8F%A5HELP%20SHOW/","excerpt":"","text":"SHOW语句【HELP SHOW;】： 可使用的数据库名： USE选择数据库（必须先使用USE打开数据库，才能读取其中的数据） SHOW TABLES；返回当前选择的数据库内可用表的列表 SHOW COLUMNS FROM…….【DESCRIBE…..】（从某个表中查找）","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"操作系统的四个特征","slug":"计算机基础/操作系统原理/操作系统的四个特征","date":"2020-10-29T16:00:00.000Z","updated":"2021-06-05T11:08:50.507Z","comments":true,"path":"2020/10/30/计算机基础/操作系统原理/操作系统的四个特征/","link":"","permalink":"http://example.com/2020/10/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%9B%9B%E4%B8%AA%E7%89%B9%E5%BE%81/","excerpt":"","text":"操作系统的特征 并发 共享 虚拟 异步 并发和共享是操作系统两个最基本的特征，二者互为存在条件 并发并发是指两个或多个事件在同一时间间隔内发生，这些事件宏观上是同时发生的，但微观上是交替发生的 并行是指两个或多个事件在同一时刻同时发生 操作系统的并发性是指计算机系统中“同时”运行着多个程序，这些程序宏观上看是同时运行着的，而微观上看是交替运行的，操作系统就是伴随着“多道程序技术”而出现的，因此操作系统和程序并发是一起诞生的 单核CPU同一时刻只能执行一个程序，各个程序只能并发的执行 多核CPU同一时刻可以同时执行多个程序，多个程序可以并行的执行 即使是对于4核CPU来说，只要有4个以上的程序需要“同时”运行，那么并发性依然是必不可少的，因此并发性是操作系统一个最基本的特性 共享共享即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用 互斥共享方式：系统中的某些资源，虽然可以提供给多个进程使用，但一个时间段内只允许一个进程访问该资源【摄像头】 同时共享方式：系统中的某些资源，允许一个时间段内由多个进程“同时”对它们进行访问，所谓的“同时”往往是宏观上的，而在微观上，这些进程可能是交替的对该资源进行访问（即分时共享）【硬盘资源】 并发和共享的关系并发性指计算机系统中同时存在着多个运行着的程序 共享性是指系统中的资源可供内存中多个并发执行的进程共同使用 123456使用QQ发送文件A，同时使用微信发送文件B1.两个进程正在并发执行（并发性）2.需要共享的访问硬盘资源（共享性）如果失去并发性，则系统中只有一个程序正在运行，则共享性失去存在的意义如果失去共享性，则QQ和微信不能同时访问硬盘资源，就无法实现同时发送文件，也就无法并发 虚拟虚拟是指把一个物理上的实体变成若干个逻辑上的对应物，物理实体是实际存在的，而逻辑上对应物是用户感受到的 空分复用技术：如虚拟存储器技术 时分复用技术：如虚拟处理器技术 显然，如果失去了并发性，则一个时间段内系统中只需运行一道程序，那么就失去了实现虚拟性的意义了，因此，没有并发性，就谈不上虚拟性 异步异步是指，在多道程序环境下，允许多个程序并发执行，但由于资源有限，进程的执行不是一贯到底的，而是走走停停，以不可预知的速度向前推进，这就是进程的异步性 如果失去了并发性，即系统只能串行的运行各个程序，，那么每个程序的执行会一贯到底，只有系统拥有并发性，才有可能导致异步性","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"LeetCode_34_在排序数组中查找元素的第一个和最后一个位置","slug":"LeetCode🌟/LeetCode_查找算法/LeetCode_34_在排序数组中查找元素的第一个和最后一个位置","date":"2020-10-29T16:00:00.000Z","updated":"2021-07-04T15:58:43.904Z","comments":true,"path":"2020/10/30/LeetCode🌟/LeetCode_查找算法/LeetCode_34_在排序数组中查找元素的第一个和最后一个位置/","link":"","permalink":"http://example.com/2020/10/30/LeetCode%F0%9F%8C%9F/LeetCode_%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/LeetCode_34_%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/","excerpt":"","text":"题目描述：1234567891011121314151617给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。如果数组中不存在目标值 target，返回 [-1, -1]。示例：输入：nums &#x3D; [5,7,7,8,8,10], target &#x3D; 8输出：[3,4]输入：nums &#x3D; [5,7,7,8,8,10], target &#x3D; 6输出：[-1,-1]输入：nums &#x3D; [], target &#x3D; 0输出：[-1,-1]提示：1. 0 &lt;&#x3D; nums.length &lt;&#x3D; 10^52. -10^9 &lt;&#x3D; nums[i] &lt;&#x3D; 10^93. nums 是一个非递减数组4. -10^9 &lt;&#x3D; target &lt;&#x3D; 10^9 解法1：二分查找123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051//这道题可以看作是自己实现C++里的lower_bound和upper_bound函数class Solution &#123;public: vector&lt;int&gt; searchRange(vector&lt;int&gt;&amp; nums, int target) &#123; if (nums.empty()) return vector&lt;int&gt;&#123;-1,-1&#125;; //二分查找尤其要注意边界值，尽量使用左闭右闭的写法 int lower = lower_bound(nums,target); int upper = upper_bound(nums,target) - 1; //注意这里需要减1 //[5,7,7,8,8,10] 6 if (lower == nums.size() || nums[lower] != target) &#123; return vector&lt;int&gt;&#123;-1,-1&#125;; &#125; return vector&lt;int&gt;&#123;lower,upper&#125;; &#125; //查找元素的第一个位置 int lower_bound(vector&lt;int&gt; &amp;nums,int target) &#123; int l = 0,r = nums.size() - 1,mid; while (l &lt;= r) &#123; mid = (l + r) / 2; if (nums[mid] &gt;= target) r = mid - 1; else l = mid + 1; &#125; return l; &#125; //查找元素的最后一个位置 int upper_bound(vector&lt;int&gt; &amp;nums,int target) &#123; int l = 0,r = nums.size() - 1,mid; while (l &lt;= r) &#123; mid = (l + r) / 2; if (nums[mid] &gt; target) r = mid - 1; else l = mid + 1; &#125; return l; &#125;&#125;;","categories":[{"name":"LeetCode🌟","slug":"LeetCode🌟","permalink":"http://example.com/categories/LeetCode%F0%9F%8C%9F/"}],"tags":[{"name":"LeetCode_查找算法","slug":"LeetCode-查找算法","permalink":"http://example.com/tags/LeetCode-%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"}]},{"title":"实验1、查看CPU和内存，用机器指令和汇编指令编程","slug":"计算机基础/《汇编语言(第4版)》/实验1、查看CPU和内存，用机器指令和汇编指令编程","date":"2020-10-28T16:00:00.000Z","updated":"2021-05-20T09:55:51.444Z","comments":true,"path":"2020/10/29/计算机基础/《汇编语言(第4版)》/实验1、查看CPU和内存，用机器指令和汇编指令编程/","link":"","permalink":"http://example.com/2020/10/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8A%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80(%E7%AC%AC4%E7%89%88)%E3%80%8B/%E5%AE%9E%E9%AA%8C1%E3%80%81%E6%9F%A5%E7%9C%8BCPU%E5%92%8C%E5%86%85%E5%AD%98%EF%BC%8C%E7%94%A8%E6%9C%BA%E5%99%A8%E6%8C%87%E4%BB%A4%E5%92%8C%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A8%8B/","excerpt":"","text":"Debug是DOS、Windows都提供的实模式（8086方式）程序的调试工具，使用它可以查看CPU各种寄存器的内容、内存的情况和在机器码级跟踪程序的运行 Debug功能：1）R：查看、改变CPU寄存器的内容2）D：查看内存中的内容3）E：改写内存中的内容4）U：将内存中的机器指令翻译成汇编指令5）T：执行一条机器指令6）A：以汇编指令的格式在内存中写入一条机器指令 1）使用R命令查看、修改CPU中各个寄存器的内容： 2）用Debug的D命令查看内存中的内容 a.中间是从指定地址开始的128个内存单元的内容，用十六进制的格式输出，每行的输出从16的整数倍的地址开始，最多输出16个单元的内容b.左边是每行的起始地址c.右边是每个内存单元中的数据对应的可显示的ASCII码字符 直接使用D命令，将列出Debug预设的地址处的内容在使用“d 段地址：偏移地址”之后，接着使用D命令，可列出后续的内容也可以指定D命令的查看范围：“d 段地址：起始偏移地址 结尾偏移地址”只想查看内存单元10000H中的内容： 3）用Debug的E命令改写内存中的内容 也可以采用提问的方式一个一个的改写内存中的内容： 可以用E命令向内存中写入字符、字符串 4）用E命令向内存中写入机器码，用U命令查看内存中机器码的含义，用T命令执行内存中的机器码 向内存中写入机器码： 查看写入的或内存中原有的机器码所对应的汇编指令： U命令的显示输出分为3部分：每一条机器指令的地址、机器指令、机器指令所对应的汇编指令 T命令可以执行一条或多条指令，简单的使用T命令，可以执行CS：IP指向的指令 若要用T命令控制CPU执行我们写到1000:0的指令，必须先让CS：IP指向1000:0 5）用Debug的A命令以汇编指令的形式在内存中写入机器指令 简单的使用A命令，可以从一个预设的地址开始输入指令","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《汇编语言(第4版)》","slug":"《汇编语言-第4版-》","permalink":"http://example.com/tags/%E3%80%8A%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E7%AC%AC4%E7%89%88-%E3%80%8B/"}]},{"title":"检索数据SELECT语句","slug":"计算机基础/《MySQL必知必会》/检索数据SELECT语句","date":"2020-10-28T16:00:00.000Z","updated":"2021-05-20T09:47:04.438Z","comments":true,"path":"2020/10/29/计算机基础/《MySQL必知必会》/检索数据SELECT语句/","link":"","permalink":"http://example.com/2020/10/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AESELECT%E8%AF%AD%E5%8F%A5/","excerpt":"","text":"检索数据【SELECT语句】： 检索单个列： 从db表中检索一个名为Host的列：从db表中检索多个列：从db表中检索所有列： 检索不同的行？？ 限制结果：LIMIT 1；【指示MySQL返回不多于1行】LIMIT 1，2；【第一个数为开始位置，第二个数为要检索的行数】1）所以，带一个值的LIMIT总是从第一行开始，给出的数为返回的行数。带两个值的LIMIT可以指定从行号为第一个值的位置开始2）检索出来的第一行为行0而不是行1，因此，LIMIT 1，1将检索出第二行而不是第一行3）LIMIT中指定要检索的行数为检索的最大行数，如果没有足够的行（例如，给出LIMIT 10，5，但只有13行），MySQL将只返回它能返回的那么多行 使用完全限定的表名：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"操作系统的发展与分类","slug":"计算机基础/操作系统原理/操作系统的发展与分类","date":"2020-10-28T16:00:00.000Z","updated":"2021-06-05T11:09:24.324Z","comments":true,"path":"2020/10/29/计算机基础/操作系统原理/操作系统的发展与分类/","link":"","permalink":"http://example.com/2020/10/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%91%E5%B1%95%E4%B8%8E%E5%88%86%E7%B1%BB/","excerpt":"","text":"手工操作阶段 批处理阶段 单道批处理系统（操作系统的雏形） 引入脱机输入/输出技术（用外围机+磁带完成），并由监督程序负责控制作业的输入、输出 主要优点：缓解了一定程度的人机速度矛盾，资源利用率有所提升 主要缺点：内存中仅能有一道程序运行，只有该程序运行结束之后才能调入下一道程序，CPU有大量的时间是在空闲等待I/O完成，资源利用率依然很低 多道批处理系统（操作系统开始出现） 每次往内存中读入多道程序，操作系统正式诞生，用于支持多道程序并发运行 分时操作系统计算机以时间片为单位轮流为各个用户/作业服务，各个用户可通过终端与计算机进行交互 主要优点：用户请求可以被即时响应，解决了人机交互问题，允许多个用户同时使用一台计算机，并且用户对计算机的操作相互独立，感受不到别人的存在 主要缺点：不能优先处理一些紧急任务，操作系统对各个用户/作业都是完全公平的，循环的为每个用户/作业服务一个时间片，不区分任务的紧急性 实时操作系统主要优点：能够优先响应一些紧急任务，某些紧急任务不需时间片排队 在实时操作系统的控制下，计算机系统接收到外部信号后及时进行处理，并且要在严格的时限内处理完事件，实时操作系统的主要特点是及时性和可靠性 硬实时系统：必须在绝对严格的规定时间内完成处理（导弹控制系统、自动驾驶系统） 软实时系统：能接受偶尔违反时间规定（12306火车订票系统） 网络操作系统是伴随着计算机网络的发展而诞生的，能把网络中各个计算机有机的结合起来，实现数据传送等功能，实现网络中各种资源的共享（如文件共享）和各台计算机之间的通信 Windows NT就是一种典型的网络操作系统，网站服务器可以使用 分布式操作系统主要特点是分布性和并行性，系统中的各台计算机地位相同，任何工作都可以分布在这些计算机上，由它们并行、协同完成这个任务 个人计算机操作系统方便个人使用","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"LeetCode_81_搜索旋转排序数组2","slug":"LeetCode🌟/LeetCode_查找算法/LeetCode_81_搜索旋转排序数组2","date":"2020-10-28T16:00:00.000Z","updated":"2021-07-04T15:59:16.790Z","comments":true,"path":"2020/10/29/LeetCode🌟/LeetCode_查找算法/LeetCode_81_搜索旋转排序数组2/","link":"","permalink":"http://example.com/2020/10/29/LeetCode%F0%9F%8C%9F/LeetCode_%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/LeetCode_81_%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%842/","excerpt":"","text":"题目描述：123456789101112131415161718已知存在一个按非降序排列的整数数组 nums ，数组中的值不必互不相同。在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;&#x3D; k &lt; nums.length）上进行了 旋转 ，使数组变为 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]（下标 从 0 开始 计数）。例如， [0,1,2,4,4,4,5,6,6,7] 在下标 5 处经旋转后可能变为 [4,5,6,6,7,0,1,2,4,4] 。给你 旋转后 的数组 nums 和一个整数 target ，请你编写一个函数来判断给定的目标值是否存在于数组中。如果 nums 中存在这个目标值 target ，则返回 true ，否则返回 false 。示例：输入：nums &#x3D; [2,5,6,0,0,1,2], target &#x3D; 0输出：true输入：nums &#x3D; [2,5,6,0,0,1,2], target &#x3D; 3输出：false提示：1. 1 &lt;&#x3D; nums.length &lt;&#x3D; 50002. -10^4 &lt;&#x3D; nums[i] &lt;&#x3D; 10^43. 题目数据保证 nums 在预先未知的某个下标上进行了旋转4. -10^4 &lt;&#x3D; target &lt;&#x3D; 10^4 解法1：二分查找12345678910111213141516171819202122232425262728293031323334353637383940class Solution &#123;public: bool search(vector&lt;int&gt;&amp; nums, int target) &#123; int start = 0,end = nums.size() - 1; while (start &lt;= end) &#123; int mid = (start + end) / 2; if (nums[mid] == target) return true; //注意：因为数组存在重复数字，如果中点和左端的数字相同，我们并不能确定是左区间全部相同还是右区间完全相同。在这种情况下，我们可以简单的将左端点右移一位，然后继续进行二分查找 if (nums[start] == nums[mid]) &#123; ++start; //[1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,1,1,1,1] 2 &#125; //对于当前的中点，如果它指向的值小于等于右端，那么说明右区间是排好序的，反之说明左区间是排好序的 else if (nums[mid] &lt;= nums[end]) &#123; //右区间是增序的 if (target &gt; nums[mid] &amp;&amp; target &lt;= nums[end]) &#123; start = mid + 1; &#125; else &#123; end = mid - 1; &#125; &#125; else &#123; //左区间是增序的 if (target &gt;= nums[start] &amp;&amp; target &lt; nums[mid]) &#123; end = mid - 1; &#125; else &#123; start = mid + 1; &#125; &#125; &#125; return false; &#125;&#125;;","categories":[{"name":"LeetCode🌟","slug":"LeetCode🌟","permalink":"http://example.com/categories/LeetCode%F0%9F%8C%9F/"}],"tags":[{"name":"LeetCode_查找算法","slug":"LeetCode-查找算法","permalink":"http://example.com/tags/LeetCode-%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"}]},{"title":"寄存器(内存访问)","slug":"计算机基础/《汇编语言(第4版)》/寄存器(内存访问)","date":"2020-10-27T16:00:00.000Z","updated":"2021-05-20T09:55:31.009Z","comments":true,"path":"2020/10/28/计算机基础/《汇编语言(第4版)》/寄存器(内存访问)/","link":"","permalink":"http://example.com/2020/10/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8A%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80(%E7%AC%AC4%E7%89%88)%E3%80%8B/%E5%AF%84%E5%AD%98%E5%99%A8(%E5%86%85%E5%AD%98%E8%AE%BF%E9%97%AE)/","excerpt":"","text":"寄存器(内存访问)： ——————————————————3.1.内存中字的存储3.2.DS和[address]3.3.字的传送3.4.mov、add、sub指令3.5.数据段3.6.栈3.7.CPU提供的栈机制3.8.栈顶超界的问题3.9.push、pop指令3.10.栈段—————————————————— CPU中，用16位寄存器来存储一个字，高8位存放高位字节，低八位存放低位字节。在内存中存储时，由于内存单元是字节单位（一个单元存放一个字节），则一个字要用两个地址连续的内存单元来存放，这个字的低位字节存放在低地址单元中，高位字节存放在高地址单元中 将起始地址为N的字单元简称为N地址字单元 任何两个地址连续的内存单元，N号单元和N+1号单元，可以将它们看成两个内存单元，也可看成一个地址为N的字单元中的高位字节单元和低位字节单元—————————— CPU要读写一个内存单元的时候，必须先给出这个内存单元的地址，在8086PC中，内存地址由段地址和偏移地址组成，8086CPU中有一个DS寄存器，通常用来存放要访问数据的段地址 可以使用mov指令将一个内存单元中的内容送入一个寄存器中：mov 寄存器名，内存单元地址 “[…]”表示一个内存单元，“[…]”中的0表示内存单元的偏移地址，指令执行时，8086CPU自动取ds中的数据为内存单元的段地址 8086CPU不支持将数据直接送入段寄存器的操作，ds是一个段寄存器，所以mov ds,1000H这条指令是非法的—————————— 8086CPU是16位结构，有16根数据线，所以可以一次性传送16位的数据，也就是说可以一次性传送一个字，只要在mov指令中给出16位的寄存器就可以进行16位数据的传送了 —————————— mov 寄存器，段寄存器mov 内存单元，段寄存器mov 段寄存器，内存单元 mov、add、sub是具有两个操作对象的指令，jmp是具有一个操作对象的指令—————————— 我们可以将一组长度为N（N&lt;=64KB）、地址连续、起始地址为16的倍数的内存单元当作专门存储数据的内存空间，从而定义了一个数据段 —————————— 栈是一种具有特殊的访问方式的存储空间，最后进入这个空间的数据，最先出去，栈的这种操作规则被称为：LIFO（Last In First Out，后进先出）—————————— 8086CPU提供相关的指令来以栈的方式访问内存空间，这意味着，在基于8086CPU编程的时候，可以将一段内存当作栈来使用：PUSH（入栈）和POP（出栈），8086CPU的入栈和出栈操作都是以字为单位进行的 CS、IP中存放着当前指令的段地址和偏移地址8086CPU中，有两个寄存器，段寄存器SS和寄存器SP，栈顶的段地址存放在SS中，偏移地址存放在SP中，任意时刻，SS：SP指向栈顶元素，push指令和pop指令执行时，CPU从SS和SP中得到栈顶的地址 —————————————— 当栈满的时候再使用push指令入栈，或栈空的时候再使用pop指令出栈，都将发生栈顶越界问题 —————————————— push和pop指令是可以在寄存器和内存之间传送数据的 栈空间也是内存空间的一部分，它只是一段可以以一种特殊的方式进行访问的内存空间 注意：push、pop等栈操作指令，修改的只是SP，也就是说，栈顶的变化范围最大为0～FFFFH 提供SS、SP指示栈顶，改变SP后写内存的入栈指令，读内存后改变SP的出栈指令，这就是8086CPU提供的栈操作机制————————————————— 在编程时，可以根据需要，将一组内存单元定义为一个段，我们可以将长度为N（N&lt;=64KB）的一组地址连续、起始地址为16的倍数的内存单元，当作栈空间来用，从而定义了一个栈段","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《汇编语言(第4版)》","slug":"《汇编语言-第4版-》","permalink":"http://example.com/tags/%E3%80%8A%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E7%AC%AC4%E7%89%88-%E3%80%8B/"}]},{"title":"排序检索数据","slug":"计算机基础/《MySQL必知必会》/排序检索数据","date":"2020-10-27T16:00:00.000Z","updated":"2021-05-20T09:47:26.455Z","comments":true,"path":"2020/10/28/计算机基础/《MySQL必知必会》/排序检索数据/","link":"","permalink":"http://example.com/2020/10/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E6%8E%92%E5%BA%8F%E6%A3%80%E7%B4%A2%E6%95%B0%E6%8D%AE/","excerpt":"","text":"排序检索数据 子句：SQL语句由子句构成，有些子句是必须的，而有的是可选的。一个子句通常由一个关键字和所提供的数据组成。 1）指示MySQL对列以字母顺序排序SELECT 列名FROM 表名ORDER BY 列名; 2）先按价格，再按名称排序：SELECT prodid,prodprice,prod_nameFROM productsORDER BY prodprice,prodname; 3）按价格以降序排序SELECT prodid,prodprice,prod_nameFROM productsORDER BY prod_price DESC; 4）先按价格以降序排序，再对产品名排序SELECT prodid,prodprice,prod_nameFROM productsORDER BY prodprice DESC,prodname;DESC关键字只应用到直接位于其前面的列名，在上例中，只对prodprice列指定DESC，对prodname列不指定。因此，prodprice列以降序排序，而prodname列（在每个价格内）仍然按标准的升序排序 5）prod_price DESC保证行是按照由最昂贵到最便宜检索的，而LIMIT 1告诉MySQL仅返回一行SELECT prod_priceFROM productsORDER BY prod_price DESCLIMIT 1;","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"操作系统的运行机制","slug":"计算机基础/操作系统原理/操作系统的运行机制","date":"2020-10-27T16:00:00.000Z","updated":"2021-06-05T11:09:56.833Z","comments":true,"path":"2020/10/28/计算机基础/操作系统原理/操作系统的运行机制/","link":"","permalink":"http://example.com/2020/10/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6/","excerpt":"","text":"一条高级语言的代码翻译过来可能会对应多条机器指令 程序运行的过程其实就是CPU执行一条一条的机器指令的过程 二进制机器指令就是处理器CPU能识别、执行的最基本命令 内核程序、应用程序我们普通程序员写的程序就是“应用程序” 微软、苹果有一帮人负责实现操作系统，他们写的是“内核程序” 有很多内核程序组成了“操作系统内核”，或简称“内核（Kernel）”，内核是操作系统最重要最核心的部分，也是最接近硬件的部分，甚至可以说，一个操作系统只要有内核就够了，操作系统的功能未必都在内核中，如图形化用户界面GUI 两种指令特权指令操作系统内核作为“管理者”，有时会让CPU执行一些“特权指令”，如“内存清零指令”。这些指令影响重大，只允许“管理者”，即操作系统内核来使用 非特权指令应用程序只能使用“非特权指令”，如加法指令、减法指令等 在CPU设计和生产的时候就划分了特权指令和非特权指令，因此CPU执行一条指令前就能判断出其类型 问题：CPU能判断出指令类型，但是它怎么区分此时正在运行的是内核程序还是应用程序？ 两种处理器状态内核态（核心态、管态）处于内核态时，说明此时正在运行的是内核程序，此时可以执行特权指令 用户态（目态）处于用户态时，说明此时正在运行的是应用程序，此时只能执行非特权指令 CPU中有一个寄存器叫程序状态字寄存器（PSW），其中有个二进制位，1表示“内核态”，0表示“用户态” 内核态、用户态的切换 刚开机时，CPU为“内核态”，操作系统内核程序先上CPU运行 开机完成后，用户可以启动某个应用程序，操作系统内核程序在合适的时候主动让出CPU，让该应用程序上CPU运行，应用程序运行在“用户态”（操作系统内核在让出CPU之前，会用一条特权指令把PSW的标志位设置为“用户态”） 此时，一位黑客在应用程序中植入了一条特权指令，企图破坏系统 CPU发现接下来要执行的这条指令是特权指令，但是自己又处于“用户态”，这个非法事件会引发一个中断信号，CPU检测到中断信号后，会立即变为“核心态”，并停止运行当前的应用程序，转而运行处理中断信号的内核程序 “中断”使操作系统再次夺回CPU的控制权，操作系统会对引发中断的事件进行处理，处理完了再把CPU使用权交给别的应用程序 内核态 -&gt; 用户态：执行一条特权指令，修改PSW的标志位为“用户态”，这个动作意味着操作系统将主动让出CPU使用权 用户态 -&gt; 内核态：由“中断”引发，硬件自动完成变态过程，触发中断信号意味着操作系统将强行夺回CPU的使用权（除了非法使用特权指令之外，还有很多事件会触发中断信号，一个共性是，但凡需要操作系统介入的地方，都会触发中断信号）","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"实验2、用机器指令和汇编指令编程","slug":"计算机基础/《汇编语言(第4版)》/实验2、用机器指令和汇编指令编程","date":"2020-10-26T16:00:00.000Z","updated":"2021-05-20T09:56:03.393Z","comments":true,"path":"2020/10/27/计算机基础/《汇编语言(第4版)》/实验2、用机器指令和汇编指令编程/","link":"","permalink":"http://example.com/2020/10/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8A%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80(%E7%AC%AC4%E7%89%88)%E3%80%8B/%E5%AE%9E%E9%AA%8C2%E3%80%81%E7%94%A8%E6%9C%BA%E5%99%A8%E6%8C%87%E4%BB%A4%E5%92%8C%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E7%BC%96%E7%A8%8B/","excerpt":"","text":"1）D命令也提供了一种符合CPU机理的格式：“d 段寄存器：偏移地址”，以段寄存器中的数据为段地址SA，列出从SA：偏移地址开始的内存区间中的数据 查看从ds:0开始的内存区间中的内容： 查看当前代码段和栈段中的内容： 2）在E、A、U命令中使用段寄存器 3）在Debug中，用A命令写一段程序 在用T命令执行mov ss,ax的时候，它的下一条指令mov sp,10也紧接着执行了不单是mov ss,ax，对于如mov ss,bx mov ss,[0] pop ss等指令都会发生这种情况，这些指令的共性是都是修改栈段寄存器SS的指令 Debug的T命令在执行修改寄存器SS的指令时，下一条指令也紧接着被执行","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《汇编语言(第4版)》","slug":"《汇编语言-第4版-》","permalink":"http://example.com/tags/%E3%80%8A%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E7%AC%AC4%E7%89%88-%E3%80%8B/"}]},{"title":"过滤数据","slug":"计算机基础/《MySQL必知必会》/过滤数据","date":"2020-10-26T16:00:00.000Z","updated":"2021-05-20T09:46:41.526Z","comments":true,"path":"2020/10/27/计算机基础/《MySQL必知必会》/过滤数据/","link":"","permalink":"http://example.com/2020/10/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E8%BF%87%E6%BB%A4%E6%95%B0%E6%8D%AE/","excerpt":"","text":"过滤数据 1）只返回prod_price值为2.50的行SELECT prodname,prodpriceFROM productsWHERE prod_price=2.50; 2） 3）MySQL在执行匹配时默认不区分大小写，所以fuses与Fuses匹配SELECT prodname,prodpriceFROM productsWHERE prod_name=‘fuses’;【注意单引号】 4）SELECT prodname,prodpriceFROM productsWHERE prod_price&lt;10; 5)列出不是由供应商1003制造的所有产品SELECT vendid,prodnameFROM productsWHERE vend_id&lt;&gt;1003; 6）检索价格在5美元和10美元之间的所有产品SELECT prodname,prodpriceFROM productsWHERE prod_price BETWEEN 5 AND 10; 7）NULL：无值，它与字段包含0、空字符串或仅仅包含空格不同这条语句返回没有价格（空prod_price字段，不是价格为0）的所有产品SELECT prod_nameFROM productsWHERE prod_price IS NULL;","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"中断和异常","slug":"计算机基础/操作系统原理/中断和异常","date":"2020-10-26T16:00:00.000Z","updated":"2021-06-05T11:10:26.307Z","comments":true,"path":"2020/10/27/计算机基础/操作系统原理/中断和异常/","link":"","permalink":"http://example.com/2020/10/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E4%B8%AD%E6%96%AD%E5%92%8C%E5%BC%82%E5%B8%B8/","excerpt":"","text":"中断的作用“中断”是让操作系统内核夺回CPU使用权的唯一途径，中断会让CPU由用户态变为内核态 如果没有“中断”机制，那么一旦应用程序上CPU运行，CPU就会一直运行这个应用程序，既如此，何来并发。 中断的类型内中断（也称“异常”） 陷阱、陷入（trap）：由陷入指令引发，是应用程序故意引发的 故障（fault）：由错误条件引起的，可能被内核程序修复。内核程序修复故障后会把CPU使用权还给应用程序，让它继续执行下去（缺页故障） 终止（abort）：由致命错误引起，内核程序无法修复该错误，因此一般不再将CPU使用权还给引发终止的应用程序（整数除0，非法使用特权指令） 与当前执行的指令有关，中断信号来源于CPU内部 若当前执行的指令是非法的，则会引发一个中断信号 试图在用户态下执行特权指令 执行除法指令时发现除数为0 有时候应用程序想请求操作系统内核的服务，此时会执行一条特殊的指令：陷入指令，该指令会引发一个内部中断信号，执行陷入指令，意味着应用程序主动的将CPU控制权还给操作系统内核，“系统调用”就是通过陷入指令完成的（注意陷入指令并不是特权指令）（陷入指令 = trap指令 = 访管指令） 外中断（也称“中断”）与当前执行的指令无关，中断信号来源于CPU外部 时钟中断：由时钟部件发来的中断信号，时钟部件每隔一个时间片会给CPU发送一个时钟中断信号（多个应用程序的并发运行） I/O中断：由输入/输出设备发来的中断信号（打印机） 中断机制的基本原理检查中断信号： 内中断：CPU在执行指令时会检查是否有异常发生 外中断：每一条指令执行结束时，CPU都会例行检查是否有外中断信号需要处理 不同的中断信号，需要用不同的中断处理程序来处理。当CPU检测到中断信号后，会根据中断信号的类型去查询“中断向量表”，以此来找到相应的中断处理程序在内存中的存放位置","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"第一个程序","slug":"计算机基础/《汇编语言(第4版)》/第一个程序","date":"2020-10-25T16:00:00.000Z","updated":"2021-05-20T09:55:09.345Z","comments":true,"path":"2020/10/26/计算机基础/《汇编语言(第4版)》/第一个程序/","link":"","permalink":"http://example.com/2020/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8A%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80(%E7%AC%AC4%E7%89%88)%E3%80%8B/%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/","excerpt":"","text":"———————————————————4.1.一个源程序从写出到执行的过程4.2.源程序4.3.编辑源程序4.4.编译4.5.连接4.6：1.exe的执行4.7.谁将可执行文件中的程序装载进入内存并使它运行？4.8.程序执行过程的跟踪——————————————————— 1）编写汇编源程序：使用文本编辑器，用汇编语言编写汇编源程序，这一步工作的结果是产生了一个存储源程序的文本文件2）对源程序进行编译连接：使用汇编语言编译程序对源程序文件中的源程序进行编译，产生目标文件；再用连接程序对目标文件进行连接，生成可在操作系统中直接运行的可执行文件 可执行文件包含两部分内容：程序（从源程序中的汇编指令翻译过来的机器码）和数据（源程序中定义的数据）、相关的描述信息（比如程序有多大、要占用多少内存空间） 这一步工作的结果，产生了一个可在操作系统中运行的可执行文件 3）执行可执行文件中的程序，在操作系统中，执行可执行文件中的程序，操作系统依照可执行文件中的描述信息，将可执行文件中的机器码和数据加载入内存，并进行相关的初始化（比如设置CS：IP指向第一条要执行的指令），然后由CPU执行程序——————————————— 1）伪指令：在汇编语言源程序中，包含两种指令，一种是汇编指令，一种是伪指令。汇编指令是有对应的机器码的指令，可以被编译为机器指令，最终为CPU所执行。而伪指令没有对应的机器指令，最终不被CPU所执行，伪指令是由编译器来执行的指令，编译器根据伪指令来进行相关的编译工作 segment和ends是一对成对使用的伪指令，功能是定义一个段end是一个汇编程序的结束标记，标记整个程序的结束assume假设某一段寄存器和程序中的某一个用segment…ends定义的段相关联2）源程序中的“程序” 3）标号：一个标号指代了一个地址，比如codesg在segment的前面，作为一个段的名称，这个段的名称最终将被编译、连接程序处理为一个段的段地址4）程序的结构5）程序返回：一个程序结束后，将CPU的控制权交还给使它得以运行的程序，称这个过程为程序返回 6）语法错误和逻辑错误程序在编译时被编译器发现的错误是语法错误在源程序编译后，在运行时发生的错误是逻辑错误，语法错误容易发现，也容易解决，而逻辑错误通常不容易被发现—————————————— 编辑源程序： 可以用任意的文本编辑器来编辑源程序，只要最终将其存储为纯文本文件即可 ——————————————— 编译：在编译过程中，我们提供了一个输入，即源程序文件，最多可以得到3个输出：目标文件（.obj）、列表文件（.lst）、交叉引用文件（.crf），这3个输出文件中，目标文件是我们最终要得到的结果，而另外两个只是中间结果 ——————————————— 连接：连接的作用： 最终生成3个文件：———————————————— 1.exe的执行：———————————————— 在DOS中直接执行1.exe时，是正在运行的command，将1.exe中的程序加载入内存，command设置CPU的CS：IP指向程序的第一条指令（即程序的入口），从而使程序得以运行，程序运行结束后，返回到command中，CPU继续运行command ———————————————— 程序执行过程的跟踪（Debug）： 为了观察程序的运行过程，可以使用Debug，Debug可以将程序加载入内存，设置CS：IP指向程序的入口，但Debug并不放弃对CPU的控制 CX中存放的是程序的长度，1.exe中程序的机器码共有15个字节 DS的值为075A，则PSP的地址为075A：0，程序的地址为076A：0（即075A+10:0） 源程序中的指令是mov ax,0123H，在Debug中记为mov ax,0123，这是因为Debug默认所有数据都用十六进制表示 可以用U命令看一下其他指令： T命令单步执行程序中的每一条指令： 到了int 21，我们要用P命令执行：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《汇编语言(第4版)》","slug":"《汇编语言-第4版-》","permalink":"http://example.com/tags/%E3%80%8A%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E7%AC%AC4%E7%89%88-%E3%80%8B/"}]},{"title":"数据过滤","slug":"计算机基础/《MySQL必知必会》/数据过滤","date":"2020-10-25T16:00:00.000Z","updated":"2021-05-20T09:49:08.956Z","comments":true,"path":"2020/10/26/计算机基础/《MySQL必知必会》/数据过滤/","link":"","permalink":"http://example.com/2020/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E6%95%B0%E6%8D%AE%E8%BF%87%E6%BB%A4/","excerpt":"","text":"数据过滤 操作符：用来联结或改变WHERE子句中的子句的关键字，也称为逻辑操作符 1）AND:用在WHERE子句中的关键字，用来指示检索满足所有给定条件的行SELECT prodid,prodname,prod_priceFROM productsWHERE vendid=1003 AND prodprice&lt;=10; 2)OR：用来表示检索匹配任一给定条件的行SELECT prodname,prodpriceFROM productsWHERE vendid=1002 OR vendid=1003; 3）SELECT prodname,prodpriceFROM productsWHERE vendid=1002 OR vendid=1003 AND prod_price&gt;=10; SELECT prodname,prodpriceFROM productsWHERE (vendid=1002 OR vendid=1003) AND prod_price&gt;=10; 4)IN WHERE子句中用来指定要匹配值的清单的关键字，功能与OR相当SELECT prodname,prodpriceFROM productsWHERE vend_id IN(1002,1003)ORDER BY prod_name; 5）NOT WHERE子句中用来否定后跟条件的关键字SELECT prodname,prodpriceFROM productsWHERE vend_id NOT IN(1002,1003)ORDER BY prod_name;","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"系统调用","slug":"计算机基础/操作系统原理/系统调用","date":"2020-10-25T16:00:00.000Z","updated":"2021-06-05T11:10:54.864Z","comments":true,"path":"2020/10/26/计算机基础/操作系统原理/系统调用/","link":"","permalink":"http://example.com/2020/10/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/","excerpt":"","text":"什么是系统调用，有何作用？操作系统作为用户和计算机硬件之间的接口，需要向上提供一些简单易用的服务，主要包括命令接口和程序接口，其中程序接口由一组系统调用组成 “系统调用”是操作系统提供给应用程序（程序员/编程人员）使用的接口，可以理解为一种可供应用程序调用的特殊函数，应用程序可以通过系统调用来请求获得操作系统内核的服务 系统调用与库函数的区别 系统调用（按功能分类） 设备管理：完成设备的请求/释放/启动等功能 文件管理：完成文件的读/写/创建/删除等功能 进程控制：完成进程的创建/撤销/阻塞/唤醒等功能 进程通信：完成进程之间的消息传递/信号传递等功能 内存管理：完成内存的分配/回收等功能 什么功能要用到系统调用（Word和WPS同时使用打印机）应用程序通过系统调用请求操作系统的服务，而系统中的各种共享资源都由操作系统内核统一掌管，因此凡是与共享资源有关的操作（如存储分配、I/O操作、文件管理等），都必须通过系统调用的方式向操作系统内核提出服务请求，由操作系统内核代为完成，这样可以保证系统的稳定性和安全性，防止用户进行非法操作 系统调用的过程 传递系统调用参数 执行陷入指令（用户态） 执行相应的内请求核程序处理系统调用（核心态） 返回应用程序 注意： 陷入指令是在用户态执行的，执行陷入指令之后立即引发一个内中断，使CPU进入核心态 发出系统调用请求是在用户态，而对系统调用的相应处理在核心态下进行","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"BX和loop指令","slug":"计算机基础/《汇编语言(第4版)》/[BX]和loop指令","date":"2020-10-24T16:00:00.000Z","updated":"2021-05-20T09:54:58.629Z","comments":true,"path":"2020/10/25/计算机基础/《汇编语言(第4版)》/[BX]和loop指令/","link":"","permalink":"http://example.com/2020/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8A%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80(%E7%AC%AC4%E7%89%88)%E3%80%8B/[BX]%E5%92%8Cloop%E6%8C%87%E4%BB%A4/","excerpt":"","text":"——————————————————————————5.1.[BX]5.2.Loop指令5.3.在Debug中跟踪用loop指令实现的循环程序5.4.Debug和汇编编译器masm对指令的不同处理5.5.loop和[bx]的联合应用5.6.段前缀5.7.一段安全的空间5.8.段前缀的使用—————————————————————————— 要完整的描述一个内存单元，需要两种信息：内存单元的地址、内存单元的长度（类型） 用[0]表示一个内存单元时，0表示单元的偏移地址，段地址默认在ds中，单元的长度（类型）可以由具体指令中的其他操作对象（比如说寄存器）指出 [bx]同样也表示一个内存单元，它的偏移地址在bx中 loop：循环 用一个描述性的符号“（）”来表示一个寄存器或一个内存单元中的内容，（）中的内存单元的地址为物理地址 （）中的元素可以有3种类型：寄存器名、段寄存器名、内存单元的物理地址（一个20位数据） 约定符号idata表示常量—————————————————— ——————————————— loop指令的格式是：loop 标号CPU执行loop指令的时候，要进行两步操作：(cx)=(cx)-1、判断cx中的值，不为零则转至标号处执行程序，如果为零则向下执行【通常，我们用loop指令来实现循环功能，cx中存放循环次数】 assume cs:codecode segment mov ax,2 mov cx,11s: add ax,ax loop s mov ax,4c00h int 21h code endsend 1）在cx中存放循环次数2）loop指令中的标号所标识地址要在前面3）要循环执行的程序段，要写在标号和loop指令的中间—————————————— 在Debug中跟踪用loop指令实现的循环程序： 1）标号s前的指令我们已经确定在逻辑上完全正确，不想再一步一步跟踪了（g IP，直接跳转到IP值处） 2）循环也不想再一步一步跟踪了（遇到loop，直接p） ——————————————————— Debug和汇编编译器masm对指令的不同处理：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《汇编语言(第4版)》","slug":"《汇编语言-第4版-》","permalink":"http://example.com/tags/%E3%80%8A%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E7%AC%AC4%E7%89%88-%E3%80%8B/"}]},{"title":"用通配符进行过滤","slug":"计算机基础/《MySQL必知必会》/用通配符进行过滤","date":"2020-10-24T16:00:00.000Z","updated":"2021-05-20T09:49:39.988Z","comments":true,"path":"2020/10/25/计算机基础/《MySQL必知必会》/用通配符进行过滤/","link":"","permalink":"http://example.com/2020/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E7%94%A8%E9%80%9A%E9%85%8D%E7%AC%A6%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4/","excerpt":"","text":"用通配符进行过滤 通配符：用来匹配值的一部分的特殊字符搜索模式：由字面值、通配符或两者组合构成的搜索条件 1）%表示任何字符出现的任意次数，下列找出所有以词jet起头的产品，%告诉MySQL接受jet之后的任意字符，不管它有多少字符SELECT prodid,prodnameFROM productsWHERE prod_name LIKE ‘jet%’; 2）搜索模式’%anvil%’表示匹配任何位置包含文本anvil的值，而不论它之前或之后出现什么字符SELECT prodid,prodnameFROM productsWHERE prod_name LIKE ‘%anvil%’; 3）下划线只匹配单个字符而不是多个字符SELECT prodid,prodnameFROM productsWHERE prodname LIKE ‘ ton anvil’; SELECT prodid,prodnameFROM productsWHERE prod_name LIKE ‘% ton anvil’;与%能匹配0个字符不一样，_总是匹配一个字符，不能多也不能少","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"操作系统的体系结构","slug":"计算机基础/操作系统原理/操作系统的体系结构","date":"2020-10-24T16:00:00.000Z","updated":"2021-06-05T11:11:25.100Z","comments":true,"path":"2020/10/25/计算机基础/操作系统原理/操作系统的体系结构/","link":"","permalink":"http://example.com/2020/10/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/","excerpt":"","text":"操作系统： 非内核功能（GUI） 内核（时钟管理、中断处理、原语(设备驱动、CPU切换等)、进程管理、存储器管理、设备管理等） 原语是一种特殊的程序，具有原子性，也就是说，这段程序的运行必须一气呵成，不可被“中断” 操作系统的内核内核是操作系统最基本、最核心的部分，实现操作系统内核功能的那些程序就是内核程序 现在，应用程序想要请求操作系统的服务，这个服务的处理同时涉及到进程管理、存储管理、设备管理（变态的过程是有成本的，要消耗不少时间，频繁的变态会降低系统性能）： 大内核/单内核/宏内核（Linux、UNIX）将操作系统的主要功能模块都作为系统内核，运行在核心态 优点：高性能 缺点：内核代码庞大，结构混乱，难以维护 微内核（Windows NT）只把最基本的功能保留在内核 优点：内核功能少，结构清晰，方便维护 缺点：需要频繁的在核心态和用户态之间切换，性能低","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"Markdown教程","slug":"Apple、Linux/macOS、Ubuntu Server/Markdown教程","date":"2020-10-24T16:00:00.000Z","updated":"2021-06-21T13:33:54.944Z","comments":true,"path":"2020/10/25/Apple、Linux/macOS、Ubuntu Server/Markdown教程/","link":"","permalink":"http://example.com/2020/10/25/Apple%E3%80%81Linux/macOS%E3%80%81Ubuntu%20Server/Markdown%E6%95%99%E7%A8%8B/","excerpt":"","text":"—————————————————————————— Markdown介绍Markdown是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档 Markdown编写的文档可以导出HTML、Word、图像、PDF、Epub等多种格式的文档 Markdown编写的文档后缀为.md、.markdown macOS系统推荐使用Typora编辑器 Markdown标题使用#号可表示1～6级标题，一级标题对应一个#号，二级标题对应两个#号，以此类推 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 Markdown段落格式字体Markdown可以使用以下几种字体： 斜体文本斜体文本粗体文本粗体文本粗斜体文本粗斜体文本 分隔线可以在一行中用三个以上的星号、减号来建立一个分隔线，行内不能有其他东西 删除线如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线~~即可：删除的文本 下划线下划线可以通过HTML的&lt;u&gt;标签来实现：带下划线文本 脚注脚注是对文本的补充说明 王者荣耀^ 注释 Markdown列表Markdown支持有序列表和无序列表无序列表使用星号*、加号+或者减号-作为列表标记，这些标记后面要添加一个空格，然后再填写内容 第一项 第二项 第一项 第二项 第一项 第二项 有序列表使用数字并加上.号来表示 第一项 第二项 列表嵌套列表嵌套只需在子列表中的选项前面添加四个空格即可 第一项 第一项嵌套的第一个元素 第一项嵌套的第二个元素 第二项 第二项嵌套的第一个元素 第二项嵌套的第二个元素 Markdown区块区块引用Markdown区块引用是在段落开头使用&gt;符号，然后后面紧跟一个空格符号 区块引用一 区块引用二 区块嵌套另外区块也是可以嵌套的，一个&gt;符号是最外层，两个&gt;符号是第一层嵌套，以此类推 最外层 第一层嵌套 第二层嵌套 区块中使用列表 区块中使用列表 第一项 第二项 第一项 第二项 列表中使用区块如果要在列表项目内放进区块，那么就需要在&gt;前添加四个空格的缩进 第一项 区块一 区块二 第二项 Markdown代码如果是段落上的一个函数或片段的代码可以用反引号把它包起来 print(&#39;hello&#39;) 代码区块可以指定一种语言 12345#include&lt;stdio.h&gt;int main() &#123; printf(&quot;hello&quot;);&#125; Markdown链接[链接名称](链接地址) &lt;链接地址&gt; 百度 https://www.baidu.com 高级链接我们可以通过变量来设置一个链接，变量赋值在文档末尾进行 123456这个链接用 1 作为网址变量 [Google][1]这个链接用 runoob 作为网址变量 [Runoob][runoob]然后在文档的结尾为变量赋值（网址） [1]: http:&#x2F;&#x2F;www.google.com&#x2F; [runoob]: http:&#x2F;&#x2F;www.runoob.com&#x2F; 这个链接用 1 作为网址变量 Google这个链接用 runoob 作为网址变量 Runoob然后在文档的结尾为变量赋值（网址） Markdown图片123![alt 属性文本](图片地址)![alt 属性文本](图片地址 &quot;可选标题&quot;) Markdown还没办法指定图片的高度和宽度，如果需要的话，可以使用普通的标签 Markdown表格Markdown制作表格使用|来分隔不同的单元格 | 表头 | 表头 | 表头 表头 单元格 单元格 单元格 单元格 Markdown高级技巧支持的HTML元素不在Markdown涵盖范围之内的标签，都可以直接在文档里面用HTML撰写，目前支持的HTML元素有&lt;kbd&gt;、&lt;b&gt;、&lt;i&gt;、&lt;em&gt;、&lt;sup&gt;、&lt;sub&gt;、&lt;br&gt;等 使用Ctrl + Alt + Del 重启电脑 转义Markdown使用了很多特殊符号来表示特定的意义，如果需要显示特定的符号则需要使用转义字符，Markdown使用反斜杠转义特殊字符 文本加粗 ** 正常显示星号 ** Markdown支持以下这些符号前面加上反斜杠来帮助插入普通的符号： 123456789101112\\ 反斜线&#96; 反引号* 星号_ 下划线&#123;&#125; 花括号[] 方括号() 小括号# 井字号+ 加号- 减号. 英文句点! 感叹号 公式当你需要在编辑器中插入数学公式时，可以使用两个美元符$$包裹TeX或LaTeX格式的数学公式来实现，提交后，问答和文章页会根据需要加载Mathjax对数学公式进行渲染 12345678$$\\mathbf&#123;V&#125;_1 \\times \\mathbf&#123;V&#125;_2 &#x3D; \\begin&#123;vmatrix&#125; \\mathbf&#123;i&#125; &amp; \\mathbf&#123;j&#125; &amp; \\mathbf&#123;k&#125; \\\\\\frac&#123;\\partial X&#125;&#123;\\partial u&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial u&#125; &amp; 0 \\\\\\frac&#123;\\partial X&#125;&#123;\\partial v&#125; &amp; \\frac&#123;\\partial Y&#125;&#123;\\partial v&#125; &amp; 0 \\\\\\end&#123;vmatrix&#125;$&#123;$tep1&#125;&#123;\\style&#123;visibility:hidden&#125;&#123;(x+1)(x+1)&#125;&#125;$$ $$\\mathbf{V}_1 \\times \\mathbf{V}_2 = \\begin{vmatrix}\\mathbf{i} &amp; \\mathbf{j} &amp; \\mathbf{k} \\\\frac{\\partial X}{\\partial u} &amp; \\frac{\\partial Y}{\\partial u} &amp; 0 \\\\frac{\\partial X}{\\partial v} &amp; \\frac{\\partial Y}{\\partial v} &amp; 0 \\\\end{vmatrix}${$tep1}{\\style{visibility:hidden}{(x+1)(x+1)}}$$","categories":[{"name":"Apple、Linux","slug":"Apple、Linux","permalink":"http://example.com/categories/Apple%E3%80%81Linux/"}],"tags":[{"name":"macOS、Ubuntu Server","slug":"macOS、Ubuntu-Server","permalink":"http://example.com/tags/macOS%E3%80%81Ubuntu-Server/"}]},{"title":"用正则表达式进行搜索","slug":"计算机基础/《MySQL必知必会》/用正则表达式进行搜索","date":"2020-10-23T16:00:00.000Z","updated":"2021-05-20T09:49:51.269Z","comments":true,"path":"2020/10/24/计算机基础/《MySQL必知必会》/用正则表达式进行搜索/","link":"","permalink":"http://example.com/2020/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%BF%9B%E8%A1%8C%E6%90%9C%E7%B4%A2/","excerpt":"","text":"用正则表达式进行搜索 正则表达式是用来匹配文本的特殊的串（字符集合），正则表达式的作用是匹配文本，将一个模式（正则表达式）与一个文本串进行比较 1）检索列prod_name包含文本1000的所有行SELECT prod_nameFROM productsWHERE prod_name REGEXP ‘1000’ORDER BY prod_name; 2）SELECT prod_nameFROM productsWHERE prod_name REGEXP ‘.000’ORDER BY prod_name; 3）|为正则表达式的OR操作符，它表示匹配其中之一，使用|从功能上类似于在SELECT语句中使用OR语句，多个OR条件可并入单个正则表达式SELECT prod_nameFROM productsWHERE prod_name REGEXP ‘1000|2000’ORDER BY prod_name; 4）[123]定义一组字符，它的意思是匹配1或者2或者3，因此，1 ton 和2 ton都匹配且返回（没有 3 ton）,[123] Ton为[1|2|3] Ton的缩写SELECT prod_nameFROM productsWHERE prod_name REGEXP ‘[123] Ton’ORDER BY prod_name; MySQL假定你的意思是‘1’或‘2’或‘3 ton’，除非你把字符｜括在一个集合中，否则它将应用于整个串SELECT prod_nameFROM productsWHERE prod_name REGEXP ‘1|2|3 Ton’ORDER BY prod_name; [^123]匹配除这些字符外的任何东西 5）SELECT prod_nameFROM productsWHERE prod_name REGEXP ‘[1-5] Ton’ORDER BY prod_name; 6）.匹配任意字符，因此每个行都被检索出来SELECT vend_nameFROM vendorsWHERE vend_name REGEXP ‘.’ORDER BY vend_name; 为了匹配特殊字符，必须用\\为前导。\\-表示查找-，\\.表示查找.SELECT vend_nameFROM vendorsWHERE vend_name REGEXP ‘\\.’ORDER BY vend_name; 7) 8)SELECT prod_nameFROM productsWHERE prod_name REGEXP ‘\\([0-9] sticks?\\)’ORDER BY prod_name; SELECT prod_nameFROM productsWHERE prod_name REGEXP ‘:digit:{4}’ORDER BY prod_name; 9)SELECT prod_nameFROM productsWHERE prod_name REGEXP ‘^[0-9\\.]’ORDER BY prod_name;","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"进程的概念、组成、特征","slug":"计算机基础/操作系统原理/进程的概念、组成、特征","date":"2020-10-23T16:00:00.000Z","updated":"2021-06-05T11:11:54.164Z","comments":true,"path":"2020/10/24/计算机基础/操作系统原理/进程的概念、组成、特征/","link":"","permalink":"http://example.com/2020/10/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E8%BF%9B%E7%A8%8B%E7%9A%84%E6%A6%82%E5%BF%B5%E3%80%81%E7%BB%84%E6%88%90%E3%80%81%E7%89%B9%E5%BE%81/","excerpt":"","text":"进程的概念程序：是静态的，就是个存放在磁盘里的可执行文件，就是一系列的指令集合 进程（Process）：是动态的，是程序的一次执行过程，同一个程序多次执行会对应多个进程 进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位（一个进程被调度，就是指操作系统决定让这个进程上CPU运行） 进程的组成：PCB、程序段、数据段操作系统是进程的管理者，当进程被创建时，操作系统会为该进程分配一个唯一的、不重复的“身份证号”：PID（Process ID，进程ID） 操作系统要记录PID、进程所属用户ID（UID）：基本的进程描述信息，可以让操作系统区分各个进程 还要记录给进程分配了哪些资源（分配了多少内存、正在使用哪些I/O设备、正在使用哪些文件）：可用于实现操作系统对资源的管理 还要记录进程的运行情况（CPU使用时间、磁盘使用情况、网络流量使用情况、进程当前的状态：就绪态/阻塞态/运行态）：可用于实现操作系统对进程的控制、调度 处理机相关信息：PSW、PC等各种寄存器的值，用于实现进程切换 这些信息都被保存在一个数据结构PCB（Process Control Block）中，即进程控制块，操作系统需要对各个并发运行的进程进行管理，但凡管理时所需要的信息，都会被放在PCB中 PCB是进程存在的唯一标志，当进程被创建时，操作系统为其创建PCB，当进程结束时，会回收其PCB 程序段：程序的代码（指令序列） 数据段：运行过程中产生的各种数据（如程序中定义的变量） PCB是给操作系统用的，程序段和数据段是给进程自己用的，与进程自身的运行逻辑有关 一个进程实体（进程映像）由PCB、程序段、数据段组成，进程是动态的，进程实体（进程映像）是静态的，进程实体反映了进程在某一时刻的状态 进程的特征程序是静态的，进程是动态的，相比于程序，进程拥有以下特征： 动态性：进程是程序的一次执行过程，是动态的产生、变化和消亡的，动态性是进程最基本的特征 并发性：内存中有多个进程实体，各进程可并发执行 独立性：进程是能独立运行、独立获得资源、独立接受调度的基本单位 异步性：各进程按各自独立的、不可预知的速度向前推进，操作系统要提供“进程同步机制”来解决异步问题 结构性：每个进程都会配置一个PCB，结构上看，进程由程序段、数据段、PCB组成","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"创建计算字段","slug":"计算机基础/《MySQL必知必会》/创建计算字段","date":"2020-10-22T16:00:00.000Z","updated":"2021-05-20T09:45:45.792Z","comments":true,"path":"2020/10/23/计算机基础/《MySQL必知必会》/创建计算字段/","link":"","permalink":"http://example.com/2020/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E5%88%9B%E5%BB%BA%E8%AE%A1%E7%AE%97%E5%AD%97%E6%AE%B5/","excerpt":"","text":"创建计算字段 计算字段并不实际存在于数据库表中，计算字段是运行时在SELECT语句内创建的 字段：基本上与列的意思相同，经常互换使用，不过数据库列一般称为列，而术语字段通常用在计算字段的连接上 只有数据库知道SELECT语句中哪些列是实际的表列，哪些列是计算字段。从客户机（如应用程序）的角度来看，计算字段的数据是以与其他列的数据相同的方式返回的 拼接：将值联结到一起构成单个值 1）SELECT Concat(vendname，‘ （’，vendcountry，‘）’）FROM vendorsORDER BY vend_name; RTrim()函数去掉值右边的所有空格，通过使用RTrim()，各个列都进行了整理SELECT Concat(RTrim(vendname)，‘ （’，RTrim(vendcountry)，‘）’）FROM vendorsORDER BY vend_name; 2）别名是一个字段或值的替换名，别名用AS关键字赋予SELECT Concat(RTrim(vendname)，‘ （’，RTrim(vendcountry)，‘）’）AS vend_titleFROM vendorsORDER BY vend_name; 3)检索订单号20005中的所有物品SELECT prodid,quantity,itempriceFROM orderitemsWHERE order_num=20005; item_price列包含订单中每项物品的单价，如下汇总物品的价格（单价乘以订购数量）SELECT prod_id, quantity, item_price, quantity*itemprice AS expandedpriceFROM orderitemsWHERE order_num=20005;","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"进程的状态与转换","slug":"计算机基础/操作系统原理/进程的状态与转换","date":"2020-10-22T16:00:00.000Z","updated":"2021-06-05T11:12:23.711Z","comments":true,"path":"2020/10/23/计算机基础/操作系统原理/进程的状态与转换/","link":"","permalink":"http://example.com/2020/10/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E8%BF%9B%E7%A8%8B%E7%9A%84%E7%8A%B6%E6%80%81%E4%B8%8E%E8%BD%AC%E6%8D%A2/","excerpt":"","text":"进程的状态创建状态：进程正在被创建时，它的状态是“创建态”，在这个阶段操作系统会为进程分配资源、初始化PCB 就绪状态：当进程创建完成后，便进入了“就绪态”，处于就绪态的进程已经具备运行条件，但由于没有空闲CPU，就暂时不能运行 运行状态：如果一个进程此时在CPU上运行，那么这个进程处于“运行态”，CPU会执行该进程对应的程序（执行指令序列） 阻塞状态（等待态）：在进程运行过程中，可能会请求等待某个事件的发生（如等待某种系统资源的分配，或者等待其他进程的响应），在这个事件发生之前，进程无法继续往下执行，此时操作系统会让这个进程下CPU，并让它进入“阻塞态”，如果等待的某个事件发生了，进程就会由“阻塞态”变为“就绪态”，当CPU空闲时，会选择一个“就绪态”进程上CPU运行 终止状态：一个进程可以执行exit系统调用，请求操作系统终止该进程，此时该进程会进入“终止态”，操作系统会让该进程下CPU，并回收内存空间等资源，最后还要回收该进程的PCB，当终止进程的工作完成之后，这个进程就彻底消失了（进程运行结束，或运行过程中遇到不可修复的错误） 状态间的转换就绪态 -&gt; 运行态 运行态 -&gt; 就绪态（时间片到，或处理机被抢占） 运行态 -&gt; 阻塞态 阻塞态 -&gt; 就绪态 注意：不能由阻塞态直接转换为运行态，也不能由就绪态直接转换为阻塞态，因为进入阻塞态是进程主动请求的，必然需要进程在运行时才能发出这种请求 三种基本状态：就绪态、运行态、阻塞态，进程的整个生命周期中大部分时间都处于三种基本状态 单核CPU情况下，同一时刻只会有一个进程处于运行态，多核CPU情况下，可能有多个进程处于运行态 进程PCB中，会有一个变量state来表示进程的当前状态：如1表示创建态、2表示就绪态、3表示运行态…为了对同一状态下的各个进程进行统一的管理，操作系统会将各个进程的PCB组织起来 进程的组织方式（各个进程PCB的组织方式）链接方式很多操作系统还会根据阻塞原因不同，再分为多个阻塞队列 索引方式","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"使用数据处理函数","slug":"计算机基础/《MySQL必知必会》/使用数据处理函数","date":"2020-10-21T16:00:00.000Z","updated":"2021-05-20T09:48:33.656Z","comments":true,"path":"2020/10/22/计算机基础/《MySQL必知必会》/使用数据处理函数/","link":"","permalink":"http://example.com/2020/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E4%BD%BF%E7%94%A8%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0/","excerpt":"","text":"使用数据处理函数 1）文本处理函数Upper()SELECT vendname,Upper(vendname) AS vendnameupcaseFROM vendorsORDER BY vend_name; 2)日期和时间处理函数 SELECT custid,ordernumFROM ordersWHERE order_date=‘2005-09-01’;SELECT custid,ordernumFROM ordersWHERE Date(order_date)=‘2005-09-01’; 检索出2005年9月下的所有订单法1:SELECT custid,ordernumFROM ordersWHERE Date(order_date) BETWEEN ‘2005-09-01’ AND ‘2005-09-30’; 法2:SELECT custid,ordernumFROM ordersWHERE Year(orderdate)=2005 AND Month(orderdate)=9; 3)数值处理函数","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"进程控制","slug":"计算机基础/操作系统原理/进程控制","date":"2020-10-21T16:00:00.000Z","updated":"2021-06-05T11:12:52.391Z","comments":true,"path":"2020/10/22/计算机基础/操作系统原理/进程控制/","link":"","permalink":"http://example.com/2020/10/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E8%BF%9B%E7%A8%8B%E6%8E%A7%E5%88%B6/","excerpt":"","text":"进程控制的主要功能是对系统中的所有进程实施有效的管理，它具有创建新进程、撤销已有进程、实现进程状态转换等功能 如何实现进程控制：用“原语”实现，原语的执行具有“原子性”，一气呵成 如果不能“一气呵成”，就有可能导致操作系统中的某些关键数据结构信息不统一的情况，这会影响操作系统进行别的管理工作 假设此时进程2等待的事件发生，则操作系统中，负责进程控制的内核程序至少需要做两件事 将PCB2的state设为1 将PCB2从阻塞队列放到就绪队列 完成了第一步后收到中断信号，那么PCB2的state = 1，但是它却被放在阻塞队列里 如何实现原语的“原子性”可以用“关中断指令”和“开中断指令”这两个特权指令实现原子性，CPU执行了关中断指令之后，就不再例行检查中断信号，直到执行开中断指令之后才会恢复检查，这样，关中断、开中断之间的这些指令序列就是不可被中断的，这就实现了“原子性” 进程控制相关的原语进程的创建 进程的终止 进程的阻塞和唤醒 进程的切换 无论哪个进程控制原语，要做的无非三类事情： 更新PCB中的信息：修改进程状态state、保存/恢复运行环境 将PCB插入合适的队列 分配/回收资源 程序是如何运行的 PSW程序状态字寄存器 PC程序计数器：存放下一条指令的地址 IR指令寄存器：存放当前正在执行的指令 通用寄存器：其他一些必要信息 指令顺序执行的过程中，很多中间结果是放在各种寄存器中的 假设执行完某条指令后，另一个进程开始上CPU运行，另一个进程在运行过程中也会使用各个寄存器 在进程切换时，先在PCB中保存这个进程的运行环境，保存一些必要的寄存器信息，当原来的进程再次投入运行时，可以通过PCB恢复它的运行环境","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"进程通信","slug":"计算机基础/操作系统原理/进程通信","date":"2020-10-20T16:00:00.000Z","updated":"2021-06-05T11:13:21.295Z","comments":true,"path":"2020/10/21/计算机基础/操作系统原理/进程通信/","link":"","permalink":"http://example.com/2020/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1/","excerpt":"","text":"什么是进程通信顾名思义，进程通信就是指进程之间的信息交换 进程是分配系统资源的单位（包括内存地址空间），因此各进程拥有的内存地址空间相互独立，为了保证安全，一个进程不能直接访问另一个进程的地址空间，但是进程之间的信息交换又是必须实现的。为了保证进程间的安全通信，操作系统提供了一些方法 共享存储基于数据结构的共享、基于存储区的共享 消息传递进程间的数据交换以结构化的消息为单位，进程通过操作系统提供的“发送消息/接收消息”两个原语进行数据交换 直接通信方式发送进程要发送的消息直接挂到接收进程的消息缓冲队列上（通过发送消息/接收消息原语） 间接通信方式消息要先发送到中间实体（信箱）中，因此也称“信箱通信方式”（计网中的电子邮件系统） 管道通信“管道”是指用于连接读写进程的一个共享文件，又名pipe文件。其实就是在内存中开辟一个大小固定的缓冲区 管道只能采用半双工通信，某一时间段内只能实现单向的传输。如果要实现双向同时通信，则需要设置两个管道 各进程要互斥的访问管道 数据以字符流的形式写入管道，当管道写满时，写进程的write()系统调用将被阻塞，等待读进程将数据取走。当读进程将数据全部取走后，管道变空，此时读进程的read()系统调用将被阻塞 如果没写满，就不允许读。如果没读空，就不允许写 数据一旦被读出，就从管道中被抛弃，这就意味着读进程最多只能有一个，否则可能会有读错数据的情况","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"汇总数据","slug":"计算机基础/《MySQL必知必会》/汇总数据","date":"2020-10-20T16:00:00.000Z","updated":"2021-05-20T09:46:53.140Z","comments":true,"path":"2020/10/21/计算机基础/《MySQL必知必会》/汇总数据/","link":"","permalink":"http://example.com/2020/10/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E6%B1%87%E6%80%BB%E6%95%B0%E6%8D%AE/","excerpt":"","text":"汇总数据 聚集函数：运行在行组上，计算和返回单个值的函数 1）AVG()函数：AVG()通过对表中行数计算并计算特定列值之和，求得该列的平均值。AVG()可用来返回所有列的平均值，也可以用来返回特定列或行的平均值 返回products表中所有产品的平均价格SELECT AVG(prodprice) AS avgpriceFROM products; 返回特定供应商所提供产品的平均价格SELECT AVG(prodprice) AS avgpriceFROM productsWHERE vend_id =1003; 2)COUNT()函数 返回customers表中客户的总数：SELECT COUNT(*) AS num_custFROM customers; 只对具有电子邮件地址的客户计数SELECT COUNT(custemail) AS numcustFROM customers; 3)MAX()函数：要求指定列名SELECT MAX(prodprice) AS maxpriceFROM products; 4)MIN()函数：要求指定列名SELECT MIN(prodprice) AS minpriceFROM products; 5)SUM()函数：用来返回指定列值的和（总计） 检索所订购物品的总数（所有quantity值之和）SELECT SUM(quantity) AS items_orderedFROM orderitemsWHERE order_num=20005; 合计每项物品的items_pricequantity，得到总的订单金额SELECT SUM(itempricequantity) AS totalpriceFROM orderitemsWHERE order_num=20005; 6)聚集不同值 7）组合聚集函数SELECT COUNT(*) AS num_items, MIN(prodprice) AS pricemin, MAX(prodprice) AS pricemax, AVG(prodprice) AS priceavgFROM products;","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"分组数据","slug":"计算机基础/《MySQL必知必会》/分组数据","date":"2020-10-19T16:00:00.000Z","updated":"2021-05-20T09:45:56.561Z","comments":true,"path":"2020/10/20/计算机基础/《MySQL必知必会》/分组数据/","link":"","permalink":"http://example.com/2020/10/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E5%88%86%E7%BB%84%E6%95%B0%E6%8D%AE/","excerpt":"","text":"分组数据 分组允许把数据分为多个逻辑组，以便能对每个组进行聚集计算 1）SELECT vendid,COUNT(*) AS numprodsFROM productsGROUP BY vend_id; 2)WHERE过滤行，HAVING过滤分组SELECT cust_id,COUNT() AS ordersFROM ordersGROUP BY cust_idHAVING COUNT() &gt;=2; 这里WHERE子句不起作用，因为过滤是基于分组聚集值而不是特定行值的 3）列出具有2个（含）以上、价格为10（含）以上的产品的供应商SELECT vendid,COUNT() AS numprodsFROM productsWHERE prod_price &gt;=10GROUP BY vend_idHAVING COUNT() &gt;=2; SELECT vendid,COUNT() AS numprodsFROM productsGROUP BY vend_idHAVING COUNT() &gt;=2; 4）检索总计订单价格大于等于50的订单号和总计订单价格SELECT ordernum,SUM(quantityitemprice) AS ordertotalFROM orderitemsGROUP BY order_numHAVING SUM(quantityitem_price) &gt;= 50; 按总计订单价格排序输出：SELECT ordernum,SUM(quantityitemprice) AS ordertotalFROM orderitemsGROUP BY order_numHAVING SUM(quantityitem_price) &gt;= 50ORDER BY ordertotal; 5）","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"线程概念、多线程模型","slug":"计算机基础/操作系统原理/线程概念、多线程模型","date":"2020-10-19T16:00:00.000Z","updated":"2021-06-05T11:13:49.512Z","comments":true,"path":"2020/10/20/计算机基础/操作系统原理/线程概念、多线程模型/","link":"","permalink":"http://example.com/2020/10/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E7%BA%BF%E7%A8%8B%E6%A6%82%E5%BF%B5%E3%80%81%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"什么是线程，为什么要引入线程 还没引入进程之前，系统中各个程序只能串行执行 引入进程之后，可以边听音乐边玩QQ 引入线程之后，在QQ里可以边聊天边传送文件等 传统的进程是程序执行流的最小单位，引入线程后，线程成为了程序执行流的最小单位 线程是一个基本的CPU执行单元，也是程序执行流的最小单位，引入线程之后，不仅是进程之间可以并发，进程内的各线程之间也可以并发，从而进一步提升了系统的并发度，使得一个进程内也可以并发处理各种任务 引入线程后，进程只作为除CPU之外的系统资源的分配单元（如打印机、内存地址空间等都是分配给进程的） 引入线程机制后，有什么变化 线程有哪些重要的属性 线程是处理机调度的单位 多CPU计算机中，各个线程可占用不同的CPU 每一个线程都有一个线程ID、线程控制块TCB 线程也有就绪、阻塞、运行三种基本状态 线程几乎不拥有系统资源 同一进程的不同线程间共享进程的资源 由于共享内存地址空间，同一进程中的线程间通信甚至无需系统干预 同一进程中的线程切换，不会引起进程切换 不同进程中的线程切换，会引起进程切换 切换同进程内的线程，系统开销很小 切换进程，系统开销较大 线程的实现方式用户级线程ULT（从用户视角能看到的线程）早期的操作系统（早期Unix）只支持进程，不支持线程，当时的“线程”是由线程库实现的 内核级线程KLT（从操作系统视角看到的线程）由操作系统支持的线程，内核级线程才是处理机分配的单位 多线程模型在支持内核级线程的系统下，通过用户级线程和内核级线程的映射关系，可以划分为几种多线程模型 一对一模型 多对一模型（相当于用户级线程ULT） 多对多模型（集二者之所长）","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"使用子查询","slug":"计算机基础/《MySQL必知必会》/使用子查询","date":"2020-10-18T16:00:00.000Z","updated":"2021-05-20T09:48:58.457Z","comments":true,"path":"2020/10/19/计算机基础/《MySQL必知必会》/使用子查询/","link":"","permalink":"http://example.com/2020/10/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E4%BD%BF%E7%94%A8%E5%AD%90%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"使用子查询 查询：任何SQL语句都是查询，但此术语一般指SELECT语句 1）列出订购物品TNT2的所有客户： 法1:SELECT order_numFROM orderitemsWHERE prod_id=’TNT2’; SELECT cust_idFROM ordersWHERE order_num IN(20005,20007); SELECT custname,custcontactFROM customersWHERE cust_id IN(10001,10004); 法2:(在SELECT语句中，子查询总是从内向外处理)SELECT custname,custcontactFROM customersWHERE custid IN(SELECT custid FROM orders WHERE ordernum IN(SELECT ordernum FROM orderitems WHERE prod_id=’TNT2’)); 法3:SELECT custname,custcontactFROM customers,orders,orderitemsWHERE customers.custid=orders.custid AND orderitems..ordernum=orders.ordernum AND prod_id=’TNT2’; 2)显示customers表中每个客户的订单总数SELECT custname,custstate, (SELECT COUNT(*) FROM orders WHERE orders.custid=customers.custid) AS ordersFROM customersORDER BY cust_name; 相关子查询：涉及外部查询的子查询","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"处理机调度概念、层次","slug":"计算机基础/操作系统原理/处理机调度概念、层次","date":"2020-10-18T16:00:00.000Z","updated":"2021-06-05T11:14:19.607Z","comments":true,"path":"2020/10/19/计算机基础/操作系统原理/处理机调度概念、层次/","link":"","permalink":"http://example.com/2020/10/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E5%A4%84%E7%90%86%E6%9C%BA%E8%B0%83%E5%BA%A6%E6%A6%82%E5%BF%B5%E3%80%81%E5%B1%82%E6%AC%A1/","excerpt":"","text":"基本概念当有一堆任务要处理，但由于资源有限，这些事情没法同时处理。这就需要确定某种规则来决定处理这些任务的顺序，这就是“调度”研究的问题 三个层次高级调度（作业调度）作业：一个具体的任务 用户向系统提交一个作业 = 用户让操作系统启动一个程序（来处理一个具体的任务） 内存空间有限，有时无法将用户提交的作业全部放入内存？ 高级调度（作业调度）：按一定的原则从外存的作业后备队列中挑选一个作业调入内存，并创建进程。每个作业只调入一次，调出一次，作业调入时会建立PCB，调出时才撤销PCB 中级调度（内存调度）内存不够时，可将某些进程的数据调出外存，等内存空闲或者进程需要运行时再重新调入内存，暂时调到外存等待的进程状态为挂起状态，被挂起的进程PCB会被组织成挂起队列（为减轻系统负载，提高资源利用率） 中级调度：按照某种策略决定将哪个处于挂起状态的进程重新调入内存，一个进程可能会被多次调出、调入内存，因此中级调度发生的频率要比高级调度更高 进程的挂起态与七状态模型暂时调到外存等待的进程状态为挂起状态（挂起态，suspend），挂起状态又可以进一步细分为就绪挂起、阻塞挂起两种状态 低级调度（进程调度/处理机调度）按照某种策略从就绪队列中选取一个进程，将处理机分配给它 进程调度是操作系统中最基本的一种调度，在一般的操作系统中都必须配置进程调度，进程调度的频率很高，一般几十毫秒一次 三层调度的联系、对比","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"联结表、内部联结或等值联结","slug":"计算机基础/《MySQL必知必会》/联结表、内部联结或等值联结","date":"2020-10-17T16:00:00.000Z","updated":"2021-05-20T09:47:15.171Z","comments":true,"path":"2020/10/18/计算机基础/《MySQL必知必会》/联结表、内部联结或等值联结/","link":"","permalink":"http://example.com/2020/10/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E8%81%94%E7%BB%93%E8%A1%A8%E3%80%81%E5%86%85%E9%83%A8%E8%81%94%E7%BB%93%E6%88%96%E7%AD%89%E5%80%BC%E8%81%94%E7%BB%93/","excerpt":"","text":"联结表【内部联结或等值联结】 联结是一种机制，用来在一条SELECT语句中关联表，使用特殊的语法，可以联结多个表返回一组输出，联结在运行时关联表中正确的行 1）SELECT vendname,prodname,prod_priceFROM vendors,productsWHERE vendors.vendid=products.vendidORDER BY vendname,prodname; 笛卡尔积：由没有联结条件的表关系返回的结果为笛卡尔积，检索出的行的数目将是第一个表中的行数乘以第二个表中的行数SELECT vendname,prodname,prod_priceFROM vendors,productsORDER BY vendname,prodname; 2）SELECT vendname,prodname,prod_priceFROM vendors INNER JOIN productsON vendors.vendid=products.vendid; 3)SELECT prodname,vendname,prod_price,quantityFROM orderitems,products,vendorsWHERE products.vendid=vendors.vendid AND orderitems.prodid=products.prodid AND order_num=20005;","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"进程调度的时机、切换与进程调度方式","slug":"计算机基础/操作系统原理/进程调度的时机、切换与进程调度方式","date":"2020-10-17T16:00:00.000Z","updated":"2021-06-05T11:14:48.617Z","comments":true,"path":"2020/10/18/计算机基础/操作系统原理/进程调度的时机、切换与进程调度方式/","link":"","permalink":"http://example.com/2020/10/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E7%9A%84%E6%97%B6%E6%9C%BA%E3%80%81%E5%88%87%E6%8D%A2%E4%B8%8E%E8%BF%9B%E7%A8%8B%E8%B0%83%E5%BA%A6%E6%96%B9%E5%BC%8F/","excerpt":"","text":"进程调度的时机进程调度（低级调度），就是按照某种算法从就绪队列中选择一个进程为其分配处理机 需要进行进程调度与切换的情况 当前运行的进程主动放弃处理机 进程正常终止 运行过程中发生异常而终止 进程主动请求阻塞（如等待I/O） 当前运行的进程被动放弃处理机 分给进程的时间片用完 有更紧急的事需要处理（如I/O中断） 有更高优先级的进程进入就绪队列 不能进行进程调度与切换的情况 在处理中断的过程中，中断处理过程复杂，与硬件密切相关，很难做到在中断处理过程中进行进程切换 进程在操作系统内核程序临界区中 在原子操作过程中（原语），原子操作不可中断，要一气呵成（如修改PCB中进程状态标志，并把PCB放到相应队列） 进程在操作系统内核程序临界区中不能进行调度与切换✅ 进程处于临界区时不能进行处理机调度❌ 临界资源：一个时间段内只允许一个进程使用的资源，各进程需要互斥的访问临界资源 临界区：访问临界资源的那段代码 内核程序临界区一般是用来访问某种内核数据结构的，比如进程的就绪队列（由各就绪进程的PCB组成） 假设就绪队列被上锁，进程还没有退出就绪队列（还没解锁）就进行进程调度，但是进程调度相关的程序也需要访问就绪队列，但此时就绪队列被锁住了，因此又无法顺利进行进程调度 内核程序临界区访问的临界资源如果不尽快释放的话，极有可能影响到操作系统内核的其他管理工作，因此在访问内核程序临界区期间不能进行调度与切换 有的系统中，只允许进程主动放弃处理机 有的系统中，进程可以主动放弃处理机，当有更紧急的任务需要处理时，也会强行剥夺处理机（被动放弃） 进程调度的方式 非剥夺调度方式，又称非抢占方式，即只允许进程主动放弃处理机，在运行过程中即便有更紧迫的任务到达，当前进程依然会继续使用处理机，直到该进程终止或主动要求进入阻塞态 实现简单，系统开销小但是无法及时处理紧急任务，适合于早期的批处理系统 剥夺调度方式，又称抢占方式，可由操作系统剥夺当前进程的CPU使用权，当一个进程正在处理机上执行时，如果有一个更重要或更紧急的进程需要使用处理机，则立即暂停正在执行的进程，将处理机分配给更重要紧迫的那个进程 可以优先处理更紧急的进程，也可实现让各进程按时间片轮流执行的功能（通过时钟中断），适合于分时操作系统、实时操作系统 进程的切换与过程“狭义的进程调度”：从就绪队列中选中一个要运行的进程（这个进程可以是刚刚被暂停执行的进程，也可能是另一个进程，后一种情况就需要进程切换） 进程切换：一个进程让出处理机，由另一个进程占用处理机的过程 “广义的进程调度”：包含了选择一个进程和进程切换两个步骤 进程切换的过程主要完成了： 对原来运行进程各种数据的保存 对新的进程各种数据的恢复（如程序计数器、程序状态字、各种数据寄存器等处理机现场信息，这些信息一般保存在进程控制块） 注意：进程切换、调度是有代价的，因此如果过于频繁的进行进程调度、切换，必然会使整个系统的效率降低，使系统大部分时间都花在了进程切换上，而真正用于执行进程的时间减少，并不是调度越频繁，并发度就越高","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"创建高级联结、自联结、自然联结、外部联结","slug":"计算机基础/《MySQL必知必会》/创建高级联结、自联结、自然联结、外部联结","date":"2020-10-16T16:00:00.000Z","updated":"2021-05-20T09:45:21.811Z","comments":true,"path":"2020/10/17/计算机基础/《MySQL必知必会》/创建高级联结、自联结、自然联结、外部联结/","link":"","permalink":"http://example.com/2020/10/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E5%88%9B%E5%BB%BA%E9%AB%98%E7%BA%A7%E8%81%94%E7%BB%93%E3%80%81%E8%87%AA%E8%81%94%E7%BB%93%E3%80%81%E8%87%AA%E7%84%B6%E8%81%94%E7%BB%93%E3%80%81%E5%A4%96%E9%83%A8%E8%81%94%E7%BB%93/","excerpt":"","text":"创建高级联结【自联结、自然联结、外部联结】 别名除了用于列名和计算字段外，SQL还允许给表名起别名，这样做有两个主要理由：1）缩短SQL语句2）允许在单条SELECT语句中多次使用相同的表 1）表别名不仅能用于WHERE子句，它还可以用于SELECT的列表、ORDER BY子句以及语句的其他部分，表别名只在查询执行中使用，与列别名不一样，表别名不返回到客户机SELECT custname,custcontactFROM customers AS c,orders AS o,orderitems AS oiWHERE c.custid=o.custid AND oi.ordernum=o.ordernum AND prod_id=’TNT2’; 2）自联结首先找到生产ID为DTNTR的物品的供应商，然后找出这个供应商生产的其他物品SELECT prodid,prodnameFROM productsWHERE vendid =(SELECT vendid FROM products WHERE prod_id=‘DTNTR’); SELECT p1.prodid,p1.prodnameFROM products AS p1,products AS p2WHERE p1.vendid=p2.vendid AND p2.prod_id=‘DTNTR’; 3)无论何时对表进行联结，应该至少有一个列出现在不止一个表中（被联结的列），标准的联结返回所有数据，甚至相同的列多次出现。自然联结排除多次出现，使每个列只返回一次 4）联结包含了那些在相关表中没有关联行的行，这种类型的联结称为外部联结 检索所有客户及其订单（内部联结）SELECT customers.custid,orders.ordernumFROM customers INNER JOIN orders ON customers.custid=orders.custid; 为了检索所有客户，包括那些没有订单的客户（外部联结）：SELECT customers.custid,orders.ordernumFROM customers LEFT OUTER JOIN orders ON customers.custid=orders.custid; 5)检索所有客户及每个客户所下的订单数SELECT customers.cust_name, customers.cust_id, COUNT(orders.ordernum) AS numordFROM customers INNER JOIN orders ON customers.custid=orders.custidGROUP BY customers.cust_id; 6)SELECT customers.cust_name, customers.cust_id, COUNT(orders.ordernum) AS numordFROM customers LEFT OUTER JOIN orders ON customers.custid=orders.custidGROUP BY customers.cust_id;","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"调度算法的评价指标","slug":"计算机基础/操作系统原理/调度算法的评价指标","date":"2020-10-16T16:00:00.000Z","updated":"2021-06-05T11:15:19.666Z","comments":true,"path":"2020/10/17/计算机基础/操作系统原理/调度算法的评价指标/","link":"","permalink":"http://example.com/2020/10/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95%E7%9A%84%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87/","excerpt":"","text":"CPU利用率由于早期的CPU造价极其昂贵，因此人们会希望让CPU尽可能多的工作 CPU利用率：指CPU“忙碌”的时间占总时间的比例 系统吞吐量对于计算机来说，希望能用尽可能少的时间处理完尽可能多的作业 系统吞吐量：单位时间内完成作业的数量（总共完成了多少道作业/总共花了多少时间） 周转时间周转时间对于计算机的用户来说，他很关心自己的作业从提交到完成花了多少时间 周转时间：是指从作业被提交给系统开始，到作业完成为止的这段时间间隔，它包括四个部分，作业在外存后备队列上等待作业调度（高级调度）的时间、进程在就绪队列上等待进程调度（低级调度）的时间、进程在CPU上执行的时间、进程等待I/O操作完成的时间。后三项在一个作业的整个处理过程中，可能发生多次 （作业）周转时间 = 作业完成时间 - 作业提交时间（对于用户来说，更关心自己的单个作业的周转时间） 平均周转时间平均周转时间 = 各作业周转时间之和 / 作业数（对于操作系统来说，更关心系统的整体表现，因此更关心所有作业周转时间的平均值） 带权周转时间有的作业运行时间短，有的作业运行时间长，因此在周转时间相同的情况下，运行时间不同的作业，给用户的感觉肯定是不一样的 带权周转时间 = 作业周转时间 / 作业实际运行的时间 带权周转时间必然 &gt;= 1，带权周转时间与周转时间都是越小越好 对于周转时间相同的两个作业，实际运行时间长的作业在相同时间内被服务的时间更多，带权周转时间更小，用户满意度更高 对于实际运行时间相同的两个作业，周转时间短的带权周转时间更小，用户满意度更高 平均带权周转时间平均带权周转时间 = 各作业带权周转时间之和 / 作业数 等待时间：周转时间 - 运行时间（如果有I/O操作的过程，还要减去I/O操作的时间）计算机的用户希望自己的作业尽可能少的等待处理机 等待时间，指进程/作业处于等待处理机状态时间之和，等待时间越长，用户满意度越低 对于进程来说，等待时间就是指进程建立后等待被服务的时间之和，在等待I/O完成的期间其实进程也是在被服务的，所以不计入等待时间 对于作业来说，不仅要考虑建立进程后的等待时间，还要加上作业在外存后备队列中等待的时间 一个作业总共需要被CPU服务多久、被I/O设备服务多久一般是确定不变的，因此调度算法其实只会影响作业/进程的等待时间 与前面的指标类似，也有“平均等待时间”来评价整体性能 响应时间对于计算机用户来说，会希望自己的提交的请求（比如通过键盘输入了一个调试命令）尽早的开始被系统服务、回应 响应时间，指从用户提交请求到首次产生响应所用的时间","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"组合查询","slug":"计算机基础/《MySQL必知必会》/组合查询","date":"2020-10-15T16:00:00.000Z","updated":"2021-05-20T09:50:03.687Z","comments":true,"path":"2020/10/16/计算机基础/《MySQL必知必会》/组合查询/","link":"","permalink":"http://example.com/2020/10/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E7%BB%84%E5%90%88%E6%9F%A5%E8%AF%A2/","excerpt":"","text":"组合查询 MySQL也允许执行多个查询（多条SELECT语句），并将结果作为单个查询结果集返回，这些组合查询通常称为并或复合查询 1）假如需要价格小于等于5的所有物品的一个列表，而且还想包括供应商1001和1002生产的所有物品（不考虑价格） 法1:SELECT vendid,prodid,prod_priceFROM productsWHERE prod_price&lt;=5; SELECT vendid,prodid,prod_priceFROM productsWHERE vend_id IN(1001,1002); 法2:SELECT vendid,prodid,prod_priceFROM productsWHERE prod_price&lt;=5;UNIONSELECT vendid,prodid,prod_priceFROM productsWHERE vend_id IN(1001,1002); UNION从查询结果集中自动去除了重复的行，这是UNION的默认行为，但是如果需要，可以改变它，事实上，如果想返回所有匹配行，可使用UNION ALL而不是UNIONSELECT vendid,prodid,prod_priceFROM productsWHERE prod_price&lt;=5;UNION ALLSELECT vendid,prodid,prod_priceFROM productsWHERE vend_id IN(1001,1002); 2）SELECT语句的输出用ORDER BY子句排序。在用UNION组合查询时，只能使用一条ORDER BY子句，它必须出现在最后一条SELECT语句之后。对于结果集，不存在用一种方式排序一部分，而又用另一种方式排序另一部分的情况。因此不允许使用多条ORDER BY子句SELECT vendid,prodid,prod_priceFROM productsWHERE prod_price&lt;=5;UNIONSELECT vendid,prodid,prod_priceFROM productsWHERE vend_id IN(1001,1002)ORDER BY vendid,prodprice;","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"调度算法","slug":"计算机基础/操作系统原理/调度算法","date":"2020-10-15T16:00:00.000Z","updated":"2021-06-05T11:15:49.679Z","comments":true,"path":"2020/10/16/计算机基础/操作系统原理/调度算法/","link":"","permalink":"http://example.com/2020/10/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/","excerpt":"","text":"饥饿：某进程/作业长期得不到服务 先来先服务FCFS按照作业/进程到达的先后顺序进行服务，事实上就是等待时间越久的越优先得到服务 用于作业调度时，考虑的是哪个作业先到达后备队列（外存中）；用于进程调度时，考虑的是哪个进程先到达就绪队列（内存中） 非抢占式算法 优点：公平、算法实现简单 缺点：排在长作业（进程）后面的短作业需要等待很长时间，带权周转时间很大，对短作业来说用户体验不好，即FCFS算法对长作业有利，对短作业不利 不会导致饥饿 最短作业优先SJF追求最少的平均等待时间、最少的平均周转时间、最少的平均带权周转时间 最短的作业/进程优先得到服务（所谓最短是指要求服务时间最短），每次调度时选择当前已到达的且运行时间最短的作业/进程 既可用于作业调度，也可用于进程调度，用于进程调度时称为“短进程优先算法SPF” SJF和SPF是非抢占式的算法，但是也有抢占式的版本：最短剩余时间优先算法SRTN 最短剩余时间优先算法：每当有进程加入就绪队列改变时就需要调度，如果新到达的进程剩余时间比当前运行的进程剩余时间更短，则由新进程抢占处理机，当前运行进程重新回到就绪队列。另外，当一个进程完成时也需要调度 优点：“最短的”平均等待时间、平均周转时间 缺点：不公平，对短作业有利，对长作业不利。作业/进程的运行时间是由用户提供的，并不一定真实，不一定能做到真正的短作业优先 可能产生饥饿现象，如果源源不断的有短作业/进程到来，可能使长作业/进程长时间得不到服务，产生饥饿现象，如果一直得不到服务，则称为饿死 平均等待时间、平均周转时间、平均带权周转时间由小到大：SRTN、SJF/SPF、FCFS 最高响应比优先HRRN 在每次调度时先计算各个作业/进程的响应比，选择响应比最高的作业/进程为其服务 响应比 = （等待时间+要求服务时间）/ 要求服务时间【响应比 &gt;= 1】 即可用于作业调度，也可用于进程调度 非抢占式的算法，因此只有当前运行的作业/进程主动放弃处理机时，才需要调度，才需要计算响应比 综合考虑了等待时间和运行时间（要求服务时间），等待时间相同时，要求服务时间短的优先（SJF的优点），要求服务时间相同时，等待时间长的优先（FCFS的优点），对于长作业来说，随着等待时间越来越久，其响应比也会越来越大，从而避免了长作业饥饿的问题 ⭐️以上三种算法主要关心对用户的公平性、平均周转时间、平均等待时间等评价系统整体性能的指标，但是不关心“响应时间”，也并不区分任务的紧急程度，因此对于用户来说，交互性很糟糕，因此这三种算法一般适合用于早期的批处理系统，当然，FCFS算法也常结合其他的算法来使用，在现在也扮演着很重要的角色 时间片轮转RR公平的、轮流的为各个进程服务，让每个进程在一定时间间隔内都可以得到响应 按照各进程到达就绪队列的顺序，轮流让各个进程执行一个时间片（如100ms），若进程未在一个时间片内执行完，则剥夺处理机，将进程重新放到就绪队列队尾重新排队 用于进程调度（只有作业放入内存建立了相应的进程后，才能被分配处理机时间片） 若进程未能在时间片内运行完，将被强行剥夺处理机使用权，因此时间片轮转调度算法属于抢占式的算法，由时钟装置发出时钟中断来通知CPU时间片已到 如果时间片太大，使得每个进程都可以在一个时间片内就完成，则时间片轮转调度算法退化为先来先服务调度算法，并且会增大进程响应时间，因此时间片不能太大 另一方面，进程调度、切换是有时间代价的（保存、恢复运行环境），因此如果时间片太小，会导致进程切换过于频繁，系统会花大量的时间来处理进程切换，从而导致实际用于进程执行的时间比例减少，可见时间片也不能太小 优点：公平、响应快、适用于分时操作系统 缺点：由于高频率的进程切换，因此有一定的开销；不区分任务的紧急程度 不会导致饥饿 优先级调度随着计算机的发展，特别是实时操作系统的出现，越来越多的应用场景需要根据任务的紧急程度来决定处理顺序 每个作业/进程有各自的优先级，调度时选择优先级最高的作业/进程 既可用于作业调度，也可用于进程调度，甚至还会用于I/O调度中 抢占式、非抢占式都有，非抢占式只需在进程主动放弃处理机时进行调度即可，而抢占式还需在就绪队列变化时，检查是否会发生抢占 优点：用优先级区分紧急程度、重要程度，适用于实时操作系统。可灵活的调整对各种作业/进程的偏好程度 缺点：若源源不断的有高优先级进程到来，则可能导致饥饿 多级反馈队列 对其他调度算法的折中权衡 设置多级就绪队列，各级队列优先级从高到低，时间片从小到大；新进程到达时先进入第1级队列，按FCFS原则排队等待被分配时间片，若用完时间片进程还不结束，则进程进入下一级队列队尾，如果此时已经是在最下级的队列，则重新放回该队列队尾；只有第k级队列为空时，才会为k+1级队头的进程分配时间片 用于进程调度 抢占式的算法，在k级队列的进程运行过程中，若更上级的队列（1～k-1级）中进入了一个新进程，则由于新进程处于优先级更高的队列中，因此新进程会抢占处理机，原来运行的进程放回k级队列队尾 优点： 对各类型进程相对公平（FCFS的优点） 每个新到达的进程都可以很快就得到响应（RR的优点） 短进程只用较少的时间就可完成（SPF的优点） 不必实现估计进程的运行时间（避免用户作假） 可灵活的调整对各类进程的偏好程度，比如CPU密集型进程、I/O密集型进程（可以将因I/O而阻塞的进程重新放回原队列，而不放回下一级队列，这样I/O型进程就可以保持较高优先级） 会导致饥饿，如果源源不断的有短进程到达的话，这种进程在第一级队列中就可以被处理完，已经被降级的进程就有可能导致饥饿 ⭐️比起早期的批处理操作系统来说，由于计算机造价大幅降低，因此之后出现的交互式操作系统（包括分时操作系统、实时操作系统等）更注重系统的响应时间、公平性、平衡性等指标。而以上这三种算法恰好也能较好的满足交互式系统的需求。因此这三种算法适合用于交互式系统（比如UNIX使用的就是多级反馈队列调度算法）","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"全文本搜索","slug":"计算机基础/《MySQL必知必会》/全文本搜索","date":"2020-10-14T16:00:00.000Z","updated":"2021-05-20T09:47:50.441Z","comments":true,"path":"2020/10/15/计算机基础/《MySQL必知必会》/全文本搜索/","link":"","permalink":"http://example.com/2020/10/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E5%85%A8%E6%96%87%E6%9C%AC%E6%90%9C%E7%B4%A2/","excerpt":"","text":"全文本搜索 1）CREATE TABLE语句接受FULLTEXT子句，它给出被索引列的一个逗号分隔的列表 2）在索引之后，使用两个函数Match()和Against()执行全文本搜索，其中Match()指定被搜索的列，Against()指定要使用的搜索表达式；传递给Match()的值必须与FULLTEXT()定义中的相同，如果指定多个列，则必须列出它们（而且次序正确）SELECT note_textFROM productnotesWHERE Match(note_text) Against(‘rabbit’); 3）这条SELECT语句同样检索出两行，但次序不同（虽然并不总是出现这种情况）SELECT note_textFROM productnotesWHERE note_text LIKE ‘%rabbit%’; 上述两条SELECT语句都不包含ORDER BY子句，后者以不特别有用的顺序返回数据。前者返回以文本匹配的良好程度排序的数据。两个行都包含词rabbit，但包含词rabbit作为第3个词的行的等级比作为第20个词的行高 4）演示排序如何工作SELECT note_text， Match(note_text) Against(‘rabbit’) AS rankFROM productnotes 如果指定多个搜索项，则包含多数匹配词的那些行将具有比包含较少词（或仅有一个匹配）的那些行高的等级值 5)查询扩展用来设法放宽所返回的全文本搜索结果的范围SELECT note_textFROM productnotesWHERE Match(note_text) Against(‘anvils’); 表中的行越多（这些行中的文本就越多，使用查询扩展返回的结果越好）SELECT note_textFROM productnotesWHERE Match(note_text) Against(‘anvils’ WITH QUERY EXPANSION); 6）布尔文本搜索，以布尔方式，可以提供关于如下内容的细节：SELECT note_textFROM productnotesWHERE Match(note_text) Against(‘heavy’ IN BOOLEAN MODE); 匹配包含heavy但不包含任意以rope开始的词的行：SELECT note_textFROM productnotesWHERE Match(note_text) Against(‘heavy -rope*’ IN BOOLEAN MODE);","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"进程同步、进程互斥","slug":"计算机基础/操作系统原理/进程同步、进程互斥","date":"2020-10-14T16:00:00.000Z","updated":"2021-06-05T11:16:27.804Z","comments":true,"path":"2020/10/15/计算机基础/操作系统原理/进程同步、进程互斥/","link":"","permalink":"http://example.com/2020/10/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E3%80%81%E8%BF%9B%E7%A8%8B%E4%BA%92%E6%96%A5/","excerpt":"","text":"进程同步进程具有异步性的特征，异步性是指，各并发执行的进程以各自独立的、不可预知的速度向前推进 但是有时候我们需要进程确定性的顺序向前推进，操作系统提供“进程同步机制”来实现需求 同步亦称直接制约关系，它是指为完成某种任务而建立的两个或多个进程，这些进程因为需要在某些位置上协调它们的工作次序而产生的制约关系。进程间的直接制约关系就是源于它们之间的相互合作 进程互斥进程的“并发”需要“共享”的支持，各个并发执行的进程不可避免的需要共享一些系统资源（内存、打印机、摄像头） 两种资源共享方式： 互斥共享方式：系统中的某些资源，虽然可以提供给多个进程使用，但一个时间段内只允许一个进程访问该资源 同时共享方式：系统中的某些资源，允许一个时间段内由多个进程“同时”对它们进行访问 我们把一个时间段内只允许一个进程使用的资源称为临界资源，许多物理设备（摄像头、打印机）都属于临界资源，此外还有许多变量、数据、内存缓冲区等都属于临界资源。对临界资源的访问，必须互斥的进行 互斥，亦称间接制约关系，进程互斥指当一个进程访问某临界资源时，另一个想要访问该临界资源的进程必须等待。当前访问临界资源的进程访问结束，释放该资源后，另一个进程才能去访问临界资源 如果一个进程暂时不能进入临界区，那么该进程是否应该一直占着处理机？该进程有没有可能一直进不了临界区？ 为了实现对临界资源的互斥访问，同时保证系统整体性能，需要遵循以下原则： 空闲让进：临界区空闲时，可以允许一个请求进入临界区的进程立即进入临界区 忙着等待：当已有进程进入临界区时，其他试图进入临界区的进程必须等待 有限等待：对请求访问的进程，应保证能在有限时间内进入临界区（保证不会饥饿） 让权等待：当进程不能进入临界区时，应立即释放处理机，防止进程忙等待 进程互斥的软件实现方法如果没有注意进程互斥： 单标志法⭐️在进入区只做检查，不上锁 算法思想：两个进程在访问完临界区后会把使用临界区的权限转交给另一个进程。也就是说每个进程进入临界区的权限只能被另一个进程赋予 因此，该算法可以实现“同一时刻最多只允许一个进程访问临界区” 只能轮流访问，这种必须轮流访问带来的问题是，如果此时允许进入临界区的进程是P0，而P0一直不访问临界区，那么虽然此时临界区空闲，但是并不允许P1访问，因此单标志法存在的主要问题是：违背了“空闲让进”原则 双标志先检查⭐️在进入区先检查后上锁 若按照1、5、2、6、3、7的顺序执行，P0和P1将会同时访问临界区，因此双标志先检查法的主要问题是：违反“忙则等待”原则 原因在于，进入区的“检查”和“上锁”两个处理不是一气呵成的，检查后，上锁前可能发生进程切换 ❗️双标志先检查法其实是很好的，唯一的缺点就在于检查和上锁不是一气呵成的，如果能通过硬件方式改进这点就好了！ 双标志后检查⭐️在进入区先上锁后检查 Peterson算法⭐️在进入区“主动争取–主动谦让–检查对方是否想进、己方是否谦让” Peterson算法用软件方法解决了进程互斥的问题，遵循了空闲让进、忙则等待、有限等待三个原则，但是依然未遵循让权等待的原则，会发生“忙等” Peterson算法相较于之前三种软件解决方案来说是最好的，但依然不够好 进程互斥的硬件实现方法中断屏蔽方法利用“开/关中断指令”实现（与原语的实现思想相同，即在某进程开始访问临界区到结束访问为止都不允许被中断，也就不能发生进程切换，因此也不可能发生两个同时访问临界区的情况） 优点：简单、高效 缺点：不适用于多处理机；只适用于操作系统内核进程，不适用于用户进程（因为开/关中断指令只能运行在内核态，这组指令如果能让用户随意使用会很危险） TestAndSet（TS指令/TSL指令） 优点：实现简单，无需像软件实现方法那样严格检查是否会有逻辑漏洞；适用于多处理机环境 缺点：不满足“让权等待”原则，暂时无法进入临界区的进程会占用CPU并循环执行TSL指令，从而导致“忙等” Swap指令（XCHG指令） ❗️目前，所有的解决方案都无法实现“让权等待”","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"插入数据","slug":"计算机基础/《MySQL必知必会》/插入数据","date":"2020-10-13T16:00:00.000Z","updated":"2021-05-20T09:45:10.456Z","comments":true,"path":"2020/10/14/计算机基础/《MySQL必知必会》/插入数据/","link":"","permalink":"http://example.com/2020/10/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E6%8F%92%E5%85%A5%E6%95%B0%E6%8D%AE/","excerpt":"","text":"插入数据 INSERT是用来插入（或添加）行到数据库表的【INSERT语句一般不会产生输出】插入可以用几种方式使用： 1）插入完整的行INSERT INTO CustomersVALUES(NULL, ‘Pep E.LaPew’, ‘100 Main Street’, ‘Los Angeles’, ‘CA’, ‘90046’, ‘USA’, NULL, NULL); INSERT INTO Customers(cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country, cust_contact, cust_email)VALUES(‘Pep E.LaPew’, ‘100 Main Street’, ‘Los Angeles’, ‘CA’, ‘90046’, ‘USA’, NULL, NULL); 2)插入多个行INSERT INTO Customers(cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country)VALUES(‘Pep E.LaPew’, ‘100 Main Street’, ‘Los Angeles’, ‘CA’, ‘90046’, ‘USA’);INSERT INTO Customers(cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country)VALUES(‘M.Martian’, ’42 Galaxy Way’, ’New York’, ‘NY’, ’11213’, ‘USA’); 只要每条INSERT语句中的列名（和次序）相同，可以如下组合各语句：INSERT INTO Customers(cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country)VALUES( ‘Pep E.LaPew’, ‘100 Main Street’, ‘Los Angeles’, ‘CA’, ‘90046’, ‘USA’ )， ( ‘M.Martian’, ’42 Galaxy Way’, ’New York’, ‘NY’, ’11213’, ‘USA’ ); 3）插入检索出的数据INSERT INTO Customers(cust_id, cust_contact, cust_email, cust_name, cust_address, cust_city, cust_state, cust_zip, cust_country)SELECT cust_id, cust_contact, cust_email, cust_name, cust_address, cust_city, cust_state, cust_zip, cust_countryFROM custnew; INSERT SELECT中SELECT语句可包含WHERE子句以过滤插入的数据","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"信号量机制","slug":"计算机基础/操作系统原理/信号量机制","date":"2020-10-13T16:00:00.000Z","updated":"2021-06-05T11:16:56.454Z","comments":true,"path":"2020/10/14/计算机基础/操作系统原理/信号量机制/","link":"","permalink":"http://example.com/2020/10/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E4%BF%A1%E5%8F%B7%E9%87%8F%E6%9C%BA%E5%88%B6/","excerpt":"","text":"1965年，荷兰学者Dijkstra提出了一种卓有成效的实现进程互斥、同步的方法：信号量机制 整型信号量用一个整数型的变量作为信号量，用来表示系统中某种资源的数量 与普通整数变量的区别：对信号量的操作只有三种，初始化、P操作、V操作 记录型信号量整型信号量的缺陷是存在“忙等”问题，因此人们又提出了“记录型信号量”，即用记录型数据结构表示的信号量 ⭐️有多少资源就把信号量初始值设为多少 执行signal原语时： S.value + 1 后 &lt;= 0，说明有进程在等待资源 S.value + 1 后 &gt; 0，说明已经没有进程在等待资源 注意：要能够自己推断在什么条件下需要执行block或wakeup ⭐️记录型信号量遵循了“让权等待”原则，不会出现“忙等”现象 用信号量机制实现进程互斥一个信号量对应一种资源 信号量的值 = 这种资源的剩余数量（信号量的值如果小于0，说明此时有进程在等待这种资源） P(S)：申请一个资源S，如果资源不够就阻塞等待 V(S)：释放一个资源S，如果有进程在等待该资源，则唤醒一个进程 注意： 对不同的临界资源需要设置不同的互斥信号量，如打印机这个临界资源设置mutex1 = 1，另一个摄像头临界资源设置mutex2 = 1 P、V操作必须成对出现，缺少P(mutex)就不能保证临界资源的互斥访问。缺少V(mutex)会导致资源永不被释放，等待进程永不被唤醒 用信号量机制实现进程同步进程同步：要让各并发进程按要求有序的推进 ❗️在“前操作”之后执行V(S)，在“后操作”之前执行P(V) 用信号量机制实现进程的前驱关系（进程同步）前驱关系问题，本质上就是多级同步问题","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"更新和删除数据","slug":"计算机基础/《MySQL必知必会》/更新和删除数据","date":"2020-10-12T16:00:00.000Z","updated":"2021-05-20T09:46:18.980Z","comments":true,"path":"2020/10/13/计算机基础/《MySQL必知必会》/更新和删除数据/","link":"","permalink":"http://example.com/2020/10/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E6%9B%B4%E6%96%B0%E5%92%8C%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE/","excerpt":"","text":"更新和删除数据 1）为了更新（修改）表中的数据，可使用UPDATE语句，可采用两种方式使用UPDATE：更新表中特定行；更新表中所有行； UPDATE语句的组成：1）要更新的表2）列名和它们的新值3）确定要更新行的过滤条件 UPDATE customersSET cust_email=‘ &#101;&#x6c;&#109;&#x65;&#x72;&#x40;&#102;&#x75;&#100;&#x64;&#46;&#99;&#111;&#x6d; ’WHERE cust_id=10005; UPDATE customersSET cust_name=’The Fudds’, cust_email=‘ &#101;&#x6c;&#x6d;&#x65;&#x72;&#64;&#x66;&#x75;&#100;&#x64;&#46;&#99;&#111;&#109; ’WHERE cust_id=10005; 为了删除某个列的值，可设置它为NULL（假定表定义允许NULL值）UPDATE customersSET cust_email=NULLWHERE cust_id=10005; 2）为了从一个表中删除（去掉）数据，可使用DELETE语句从表中删除特定的行从表中删除所有行 DELETE FROM customersWHERE cust_id =10006;","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"经典进程同步互斥问题","slug":"计算机基础/操作系统原理/经典进程同步互斥问题","date":"2020-10-12T16:00:00.000Z","updated":"2021-06-05T11:17:28.629Z","comments":true,"path":"2020/10/13/计算机基础/操作系统原理/经典进程同步互斥问题/","link":"","permalink":"http://example.com/2020/10/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E7%BB%8F%E5%85%B8%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%BA%92%E6%96%A5%E9%97%AE%E9%A2%98/","excerpt":"","text":"生产者-消费者问题（互斥、同步综合问题）系统中有一组生产者进程和一组消费者进程，生产者进程每次生产一个产品放入缓冲区，消费者进程每次从缓冲区中取出一个产品并使用 生产者、消费者共享一个初始为空、大小为n的缓冲区 只有缓冲区没满时，生产者才能把产品放入缓冲区，否则必须等待（进程同步：缓冲区没满 -&gt; 生产者生产） 只有缓冲区不空时，消费者才能从中取出产品，否则必须等待（进程同步：缓冲区没空 -&gt; 消费者消费） 缓冲区是临界资源，各进程必须互斥访问（如果两个生产者进程并发运行，同时往缓冲区的同一块区域放入数据，会出现问题）（互斥关系） ❗️互斥信号量初值一般为1，同步信号量的初始值要看对应资源的初始值是多少 能否改变相邻P、V操作的顺序？ “生产一个产品”、“使用产品”这两句话逻辑上是可以放到PV操作之间，但是这样会增加临界区的代码，会导致进程的并发度降低，对系统的效能产生影响，造成不便 多生产者-多消费者问题 桌子上有一只盘子，每次只能向其中放入一个水果。（大小为1，初始为空的缓冲区） 爸爸专向盘子中放苹果，妈妈专向盘子中放橘子，儿子专等着吃盘子中的橘子，女儿专等着吃盘子中的苹果。 只有盘子空时，爸爸或妈妈才可向盘子中放一个水果。仅当盘子中有自己需要的水果时，儿子或女儿可以从盘子中取出水果。用PV操作实现上述过程 互斥关系：对缓冲区（盘子）的访问要互斥的进行 同步关系（一前一后）： 盘子中有苹果，女儿才能取苹果 盘子中有橘子，儿子才能取橘子 只有盘子为空时，父亲或母亲才能放入水果（“盘子为空”这个事件可以由儿子或女儿触发，事件发生后才允许父亲或母亲放水果） 问题：可不可以不用互斥信号量 分析：刚开始，儿子、女儿进程即使上处理机运行也会被阻塞，如果刚开始是父亲进程先上处理机运行，则父亲P(plate)，可以访问盘子 -&gt; 母亲P(plate)，阻塞等待盘子 -&gt; 父亲放入苹果V(apple)，女儿进程被唤醒，其他进程即使运行也都会阻塞，暂时不能访问临界资源（盘子） -&gt; 女儿P(apple)，访问盘子，V(plate)，等待盘子的母亲进程被唤醒 -&gt; 母亲进程访问盘子（其他进程暂时无法进入临界区） -&gt; … 结论：即使不设置专门的互斥变量mutex，也不会出现多个进程同时访问盘子的现象 原因：本题中的缓冲区大小为1，在任何时刻，apple、orange、plate三个同步信号量中最多只有一个是1，因此在任何时刻，最多只有一个进程的P操作不会被阻塞，并顺利的进入临界区 如果盘子的容量（缓冲区）设为2，可能出现两个进程同时访问缓冲区的情况，有可能导致两个进程写入缓冲区的数据相互覆盖的情况 ❗️因此，如果缓冲区大小大于1，就必须专门设置一个互斥信号量mutex来保证互斥访问缓冲区 吸烟者问题（可生产多种产品的单生产者-多消费者）假设一个系统有三个抽烟者进程和一个供应者进程。每个抽烟者不停的卷烟并抽掉它，但是要卷起并抽掉一支烟，抽烟者需要有三种材料：烟草、纸和胶水。三个抽烟者中，第一个拥有烟草、第二个拥有纸、第三个拥有胶水。供应者进程无限的提供三种材料，供应者每次将两种材料放桌子上，拥有剩下那种材料的抽烟者卷一根烟并抽掉它，并给供应者进程一个信号告诉它完成了，供应者就会放另外两种材料在桌上，这个过程一直重复（让三个抽烟者轮流的抽烟） 互斥关系：桌子可以抽象为容量为1的缓冲区，要互斥访问（这个容量为1表示组合） 组合一：纸+胶水 组合二：烟草+胶水 组合三：烟草+纸 同步关系（从事件的角度来分析）： 桌上有组合一，第一个抽烟者取走东西 桌上有组合二，第二个抽烟者取走东西 桌上有组合三，第三个抽烟者取走东西 发出完成信号，供应者将下一个组合放到桌上 读者-写者问题（复杂的互斥问题）有读者和写者两组并发进程，共享一个文件，当两个或两个以上的读进程同时访问共享数据时不会产生副作用，但若某个写进程和其他进程（读进程或写进程）同时访问共享数据时则可能导致数据不一致的错误，因此要求： 允许多个读者可以同时对文件执行读操作（与消费者进程不同，读者进程在读数据后并不会将数据清空，并不会改变数据。因此多个读者进程可同时访问共享数据） 只允许一个写者往文件中写信息 任一写者在完成写操作之前不允许其他读者或写者工作（两个写进程同时共享数据，可能导致数据错误覆盖的问题）（读进程与写进程同时共享数据，可能导致读出的数据不一致的问题） 写者执行写操作前，应让已有的读者和写者全部退出 两类进程：写进程、读进程 互斥关系：写进程-写进程、写进程-读进程（读进程-读进程不存在互斥问题） 思考：若两个读进程并发执行，则count=0时两个进程也许都能满足if条件，都会执行P(rw)，从而使第二个读进程阻塞的情况 如何解决：出现上述问题的原因在于对count变量的检查和赋值无法一气呵成，因此可以设置另一个互斥信号量来保证各读者进程对count的访问是互斥的 潜在的问题：只要有读进程还在读，写进程就要一直阻塞等待，可能“饿死”。因此这种算法中，读进程是优先的 结论；在这种算法中，连续进入的多个读者可以同时读文件；写者和其他进程不能同时访问文件；写者不会饥饿，但也并不是真正的“写优先”，而是相对公平的先来先服务原则。有的书上把这种算法称为“读写公平法” 哲学家进餐问题（解决进程死锁）一张圆桌上坐着5名哲学家，每两个哲学家之间的桌上摆一根筷子，桌子的中间是一碗米饭。哲学家们倾注毕生的精力用于思考和进餐，哲学家在思考时，并不影响其他人。只有当哲学家饥饿时，才试图拿起左、右两根筷子（一根一根的拿起）。如果筷子已在他人手上，则需等待。饥饿的哲学家只有同时拿起两根筷子才可以开始进餐，当进餐完毕后，放下筷子继续思考 系统中有5个哲学家进程，5位哲学家与左右邻居对其中间筷子的访问是互斥关系 这个问题中只有互斥关系，但与之前遇到的问题不同的是，每个哲学家进程需要同时持有两个临界资源才能开始吃饭。如何避免临界资源分配不当造成的死锁现象，是哲学家问题的精髓 定义互斥信号量数组chopstick[5] = {1,1,1,1,1}，用于实现对5个筷子的互斥访问，并对哲学家按0～4编号，哲学家i左边的筷子编号为i，右边的筷子编号为(i+1) % 5 如果5个哲学家并发的拿起了自己左手边的筷子，每位哲学家循环等待右边的人放下筷子（阻塞），发生“死锁” 解决方法： 可以对哲学家进程施加一些限制条件，比如最多只允许四个哲学家同时进餐。这样可以保证至少有一个哲学家是可以拿到左右两只筷子的 要求奇数号哲学家先拿左边的筷子，然后再拿右边的筷子，而偶数号哲学家刚好相反。用这种方法可以保证如果相邻的两个奇偶号哲学家都想吃饭，那么只会有其中一个可以拿起第一支筷子，另一个会直接阻塞。这就避免了占有一支后再等待另一只的情况 仅当一个哲学家左右两支筷子都可用时才允许他抓起筷子 画图可知，进程分别调度哲学家0、1、2时可发现，哲学家0可正常吃饭，哲学家1被阻塞，哲学家2虽然左右都有筷子，但是他也被阻塞 进程分别调度0、4时，哲学家0可正常吃饭，哲学家4右边的筷子不可用，但是4仍然可以拿起左边的筷子，因此这种方法并不能保证只有两边的筷子都可用时，才允许哲学家拿起筷子","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"创建和操纵表","slug":"计算机基础/《MySQL必知必会》/创建和操纵表","date":"2020-10-11T16:00:00.000Z","updated":"2021-05-20T09:45:33.877Z","comments":true,"path":"2020/10/12/计算机基础/《MySQL必知必会》/创建和操纵表/","link":"","permalink":"http://example.com/2020/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E5%88%9B%E5%BB%BA%E5%92%8C%E6%93%8D%E7%BA%B5%E8%A1%A8/","excerpt":"","text":"创建和操纵表 一般有两种创建表的方法：1）使用具有交互式创建和管理表的工具2）表也可以直接用MySQL语句操纵 值得注意的是，在使用交互式工具时，实际上使用的是MySQL语句，但是这些语句不是用户编写的，界面工具会自动生成并执行相应的MySQL语句（更改现有表时也是这样） 为利用CREATE TABLE创建表，必须给出下列信息：1）新表的名字，在关键字CREATE TABLE之后给出2）表列的名字和定义，用逗号分隔 1）表的主键可以在创建表时用PRIMARY KEY关键字指定，为创建由多个列组成的主键，应该以逗号分隔的列表给出各列名；主键为其值唯一标识表中每个行的列，主键中只能使用不允许NULL值的列，允许NULL值的列不能作为唯一标识CREATE TABLE customers( custid int NOT NULL AUTOINCREMENT, cust_name char(50) NOT NULL, cust_address char(50) NULL, cust_city char(50) NULL, cust_state char(5) NULL, cust_zip char(10) NULL, cust_country char(50) NULL, cust_contact char(50) NULL, cust_email char(255) NULL, PRIMARY KEY (cust_id))ENGINE-InnoDB; AUTOINCREMENT告诉MySQL，本列每当增加一行时自动增量。每次执行一个INSERT操作时，MySQL自动对该列增量（从而才有这个关键字AUTOINCREMENT），给该列赋予下一个可用的值。这样给每个行分配一个唯一的custid，从而可以用作主键值；每个表只允许一个AUTOINCREMENT列，而且它必须被索引（如通过使它成为主键） 2）如果在插入行时没有给出值，MySQL允许指定此时使用的默认值。默认值用CREATE TABLE语句的列定义中的DEFAULT关键字指定CREATE TABLE orderitems( order_num int NOT NULL, order_item int NOT NULL, prod_id char(10) NOT NULL, quantity int NOT NULL DEFAULT 1, item_price decimal(8,2) NOT NULL, PRIMARY KEY(ordernum,orderitem))ENGINE-InnoDB; 3)更新表为了使用ALTER TABLE更改表结构，必须给出下面的信息：1）在ALTER TABLE之后给出要更改的表名（该表必须存在，否则将出错）2）所做更改的列表 ALTER TABLE vendorsADD vend_phone CHAR(20); 删除刚刚添加的列：ALTER TABLE VendorsDROP COLUMN vend_phone; 4)删除表：删除整个表而不是其内容，删除表没有确认，也不能撤销，执行这条语句将永久删除该表 DROP TABLE customers2; 5)重命名表 RENAME TABLE customers2 TO customers, backup_vendors TO vendors;","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"管程","slug":"计算机基础/操作系统原理/管程","date":"2020-10-11T16:00:00.000Z","updated":"2021-06-05T11:17:55.129Z","comments":true,"path":"2020/10/12/计算机基础/操作系统原理/管程/","link":"","permalink":"http://example.com/2020/10/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E7%AE%A1%E7%A8%8B/","excerpt":"","text":"为什么要引入管程信号量机制存在的问题：编写程序困难，易出错 能不能设计一种机制，让程序员写程序时不需要再关注复杂的PV操作，让写代码更轻松呢？ 1973年，Brinch Hansen首次在程序设计语言（Pascal）中引入了“管程”成分：一种高级同步机制 管程的定义和基本特征管程是一种特殊的软件模块，有这些部分组成： 局部于管程的共享数据结构说明 对该数据结构进行操作的一组过程（过程其实就是“函数”） 对局部于管程的共享数据设置初始值的语句 管程有一个名字 管程的基本特征： 局部于管程的数据只能被局部于管程的过程所访问 一个进程只有通过调用管程内的过程才能进入管程访问共享数据 每次仅允许一个进程在管程内执行某个内部过程 用管程解决生产者消费者问题每次仅允许一个进程在管程内执行某个内部过程：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"死锁","slug":"计算机基础/操作系统原理/死锁","date":"2020-10-10T16:00:00.000Z","updated":"2021-06-06T11:22:04.981Z","comments":true,"path":"2020/10/11/计算机基础/操作系统原理/死锁/","link":"","permalink":"http://example.com/2020/10/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%AD%BB%E9%94%81/","excerpt":"","text":"死锁的概念什么是死锁在并发环境下，各进程因竞争资源而造成的一种互相等待对方手里的资源，导致各进程都阻塞，都无法向前推进的现象，就是“死锁”。发生死锁后若无外力干涉，这些进程都将无法向前推进 进程死锁、饥饿、死循环的区别死锁：各进程互相等待对方手里的资源，导致各进程都阻塞，无法向前推进的现象 饥饿：由于长期得不到想要的资源，某进程无法向前推进的现象 死循环：某进程执行过程中一直跳不出某个循环的现象。有时是因为程序逻辑bug导致的，有时是程序员故意设计的 死锁产生的必要条件产生死锁必须同时满足以下四个条件，只要有其中任一条件不成立，死锁就不会发生 互斥条件：只有对必须互斥使用的资源的争抢才会导致死锁（如哲学家的筷子、打印机设备等），像内存、扬声器这种可以同时让多个进程使用的资源是不会导致死锁的 不剥夺条件：进程所获得的资源在未使用完之前，不能由其他进程强行夺走，只能主动释放 请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己已有的资源保持不放 循环等待条件：存在一种进程资源的循环等待链，链中的每一个进程已获得的资源同时被下一个进程所请求 注意：发生死锁时一定有循环等待，但是发生循环等待时未必死锁（循环等待是死锁的必要不充分条件） 什么时候会发生死锁 死锁的处理策略 预防死锁（静态策略，不允许死锁发生）：破坏死锁产生的四个必要条件中的一个或几个 避免死锁（动态策略，不允许死锁发生）：用某种方法防止系统进入不安全状态，从而避免死锁（银行家算法） 死锁的检测和解除：允许死锁的发生，不过操作系统会负责检测出死锁的发生，然后采取某种措施解除死锁 死锁的处理策略：预防死锁破坏互斥条件互斥条件：只有对必须互斥使用的资源的争抢才会导致死锁 如果把只能互斥使用的资源改造为允许共享使用，则系统不会进入死锁状态。比如SPOOLing技术，操作系统可以采用SPOOLing技术把独占设备在逻辑上改造成共享设备 该策略的缺点：并不是所有的资源都可以改造成可共享使用的资源。并且为了系统安全，很多地方还必须保护这种互斥性，因此，很多时候都无法破坏互斥条件 破坏不剥夺条件 破坏请求和保持条件C类进程可能会饥饿： 破坏循环等待条件 死锁的处理策略：避免死锁（银行家算法） 什么是安全序列所谓安全序列，就是指如果系统按照这种序列分配资源，则每个进程都能顺利完成。只要能找出一个安全序列，系统就是安全状态。当然，安全序列可能有多个 什么是系统的不安全状态，与死锁有何联系如果分配了资源之后，系统中找不出任何一个安全序列，系统就进入了不安全状态。这就意味着之后可能所有进程都无法顺利的执行下去。当然，如果有进程提前归还了一些资源，那系统也有可能重新回到安全状态，不过我们在分配资源之前总是要考虑到最坏的情况 ❗️如果系统处于安全状态，就一定不会发生死锁。如果系统进入不安全状态，就可能发生死锁（处于不安全状态未必就是发生了死锁，但发生死锁时一定是在不安全状态） 因此可以在资源分配之前预先判断这次分配是否会导致系统进入不安全状态，以此决定是否答应资源分配请求。这也是“银行家算法”的核心思想 如何避免系统进入不安全状态：银行家算法银行家算法是荷兰学者Dijkstra为银行系统设计的，以确保银行在发放现金贷款时，不会发生不能满足所有客户需要的情况。后来该算法被用在操作系统中，用于避免死锁 核心思想：在进程提出资源申请时，先预判此次分配是否会导致系统进入不安全状态。如果会进入不安全状态，就暂时不答应这次请求，让该进程先阻塞等待 死锁的处理策略：死锁的检测和解除死锁的检测用于检测系统状态，以确定系统中是否发生了死锁 最终还连着边的那些进程就是处于死锁状态的进程： ![image-20210606190618200](/Users/liaojialong/Library/Application Support/typora-user-images/image-20210606190618200.png) 死锁的解除当认定系统中已经发生了死锁，利用该算法可将系统从死锁状态中解脱出来 一旦检测出死锁的发生，就应该立即解除死锁 ❗️并不是系统中所有的进程都是死锁状态，用死锁检测算法化简资源分配图后，还连着边的那些进程就是死锁进程 如何决定先剥夺哪个进程的资源或先对谁动手？ 根据进程优先级（先动手优先级低的） 根据进程已执行多长时间 根据进程还要多久能完成 根据进程已经使用了多少资源（先动手使用资源多的，这样很容易把更多死锁进程解除出来） 根据进程是交互式的还是批处理式的（优先动手批处理式的，交互式的是跟用户打交道）","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"使用视图","slug":"计算机基础/《MySQL必知必会》/使用视图","date":"2020-10-10T16:00:00.000Z","updated":"2021-05-20T09:48:23.156Z","comments":true,"path":"2020/10/11/计算机基础/《MySQL必知必会》/使用视图/","link":"","permalink":"http://example.com/2020/10/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E4%BD%BF%E7%94%A8%E8%A7%86%E5%9B%BE/","excerpt":"","text":"使用视图 视图是虚拟的表，与包含数据的表不一样，视图只包含使用时动态检索数据的查询 SELECT custname,custcontactFROM customers,orders,orderitemsWHERE customers.custid=orders.custid AND orderitems.ordernum=orders.ordernum AND prod_id=’TNT2’; 现在，假如可以把整个查询包装成一个名为productcustomers的虚拟表，则可以如下轻松地检索出相同的数据：SELECT custname,custcontactFROM productcustomersWHERE prod_id=’TNT2’; 1）CREATE VIEW productcustomers ASSELECT custname,custcontact,prod_idFROM customers,orders,orderitemsWHERE customers.custid=orders.custid AND orderitems.ordernum=orders.ordernum; 为检索订购了产品TNT2的客户：SELECT custname,custcontactFROM productcustomersWHERE prod_id=’TNT2’; 可以看出，视图极大的简化了复杂SQL语句的使用，利用视图，可一次性编写基础的SQL，然后根据需要多次使用 2）SELECT Concat(RTrim(vendname)，‘ （’，RTrim(vendcountry)，‘）’）AS vend_titleFROM vendorsORDER BY vend_name; CREATE VIEW vendorlocations ASSELECT Concat(RTrim(vendname)，‘ （’，RTrim(vendcountry)，‘）’）AS vend_titleFROM vendorsORDER BY vend_name; SELECT *FROM vendorlocations; 3)CREATE VIEW customeremaillist ASSELECT custid,custname,cust_emailFROM customersWHERE cust_email IS NOT NULL; SELECT *FROM customeremaillist; 4)SELECT prod_id, quantity, item_price, quantity*itemprice AS expandedpriceFROM orderitemsWHERE order_num=20005; CREATE VIEW orderitemsexpanded ASSELECT prod_id, quantity, item_price, quantity*itemprice AS expandedpriceFROM orderitems; SELECT *FROM orderitemsexpandedWHERE order_num=20005;","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"使用存储过程","slug":"计算机基础/《MySQL必知必会》/使用存储过程","date":"2020-10-09T16:00:00.000Z","updated":"2021-05-20T09:48:12.006Z","comments":true,"path":"2020/10/10/计算机基础/《MySQL必知必会》/使用存储过程/","link":"","permalink":"http://example.com/2020/10/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E4%BD%BF%E7%94%A8%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/","excerpt":"","text":"使用存储过程 存储过程简单来说，就是为以后的使用而保存的一条或多条MySQL语句的集合。可将其视为批文件，虽然它们的作用不仅限于批处理 1）执行存储过程：MySQL称存储过程的执行为调用，因此MySQL执行存储过程的语句为CALL，CALL接受存储过程的名字以及需要传递给它的任意参数CALL productpricing(@pricelow, @pricehigh, @priceaverage); 2）创建存储过程CREATE PROCEDURE productpricing()BEGIN SELECT Avg(prod_price) AS priceaverage FROM products;END;3)使用存储过程：CALL productpricing(); 4）删除存储过程：DROP PROCEDURE productpricing; 变量：内存中一个特定的位置，用来临时存储数据变量名：所有MySQL变量都必须以@开始 5)每个参数必须具有指定的类型，这里使用十进制值，关键字OUT指出相应的参数用来从存储过程传出一个值（返回给调用者）；MySQL支持IN（传递给存储过程）、OUT（从存储过程传出）和INOUT（对存储过程传入和传出）类型的参数CREATE PROCEDURE productpricing( OUT pl DECIMAL(8,2), OUT ph DECIMAL(8,2), OUT pa DECIMAL(8,2))BEGIN SELECT Min(prod_price) INTO pl FROM products; SELECT Max(prod_price) INTO ph FROM products; SELECT Avg(prod_price) INTO pa FROM products;END; CALL productpricing(@pricelow, @pricehigh, @priceaverage);为了获得3个值，可使用：SELECT @pricehigh,@pricelow, @priceaverage; 6)CREATE PROCEDURE ordertotal( IN onumber INT, OUT ototal DECIMAL(8,2))BEGIN SELECT Sum(item_price*quantity) FROM orderitems; WHERE order_num=onumber INTO ototal;END; CALL ordertotal(20005,@total); SELECT @total;","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"内存的基础知识","slug":"计算机基础/操作系统原理/内存的基础知识","date":"2020-10-09T16:00:00.000Z","updated":"2021-06-08T07:13:53.567Z","comments":true,"path":"2020/10/10/计算机基础/操作系统原理/内存的基础知识/","link":"","permalink":"http://example.com/2020/10/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E5%86%85%E5%AD%98%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"什么是内存，有何作用内存可存放数据，程序执行前需要先放到内存中才能被CPU处理：缓和CPU与硬盘之间的速度矛盾 在多道程序环境下，系统中会有多个程序并发执行，也就是说会有多个程序的数据需要同时放到内存中。那么，如何区分各个程序的数据是放在什么地方的呢？ 方案：给内存的存储单元编地址 内存中有一个一个的“小房间”，每个小房间就是一个存储单元，内存地址从0开始，每个地址对应一个存储单元 如果计算机按“字节编址”，则每个存储单元大小为1字节，即1B，即8个二进制位；如果字长为16位的计算机“按字编址”，则每个存储单元大小为1个字，每个字的大小为16个二进制位 1B = 8bit；1KB = 2^10^B；1M = 2^10^KB；1GB = 2^10^MB 一台手机有4GB内存，是指该内存中可以存放（4 * 2^30^）个字节，如果是按字节编址的话，也就是有2^32^个“小房间”，所以地址需要用32个二进制位 进程运行的基本原理指令的工作原理（逻辑地址 VS 物理地址）指令的工作基于“地址”，每个地址对应一个数据的存储单元 我们写的代码要翻译成CPU能识别的指令，这些指令会告诉CPU应该去内存的哪个地址读/写数据，这个数据应该做什么样的处理。这个例子中，我们默认让这个进程的相关内容从地址#0开始连续存放，指令中的地址参数直接给出了变量x的实际存放地址（物理地址） 如果这个进程不是从地址#0开始存放的，会影响指令的正常执行吗？ 如何实现地址转换如何将指令中的逻辑地址转换为物理地址？ 三种装入方式： 绝对装入（换个电脑装入模块就作废了）（编译时）（单道程序阶段，此时还没产生操作系统，由编译器实现） 可重定位装入（静态重定位）（装入内存时）（用于早期的多道批处理） 动态运行时装入（动态重定位）（程序运行时）（现代） 从写程序到程序运行的过程 链接的三种方式： 静态链接：在程序运行之前，先将各目标模块及它们所需的库函数连接成一个完整的可执行文件（装入模块），之后不再拆开 装入时动态链接：将各目标模块装入内存时，边装入边链接的链接方式 运行时动态链接：在程序执行中需要该目标模块时，才对它进行链接。其优点是便于修改和更新，便于实现对目标模块的共享（用不到的模块不需要装入内存）","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"使用游标","slug":"计算机基础/《MySQL必知必会》/使用游标","date":"2020-10-08T16:00:00.000Z","updated":"2021-05-20T09:48:47.639Z","comments":true,"path":"2020/10/09/计算机基础/《MySQL必知必会》/使用游标/","link":"","permalink":"http://example.com/2020/10/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E4%BD%BF%E7%94%A8%E6%B8%B8%E6%A0%87/","excerpt":"","text":"使用游标 有时，需要在检索出来的行中前进或后退一行或多行。这就是使用游标的原因。游标是一个存储在MySQL服务器上的数据库查询，它不是一条SELECT语句，而是被该语句检索出来的结果集。在存储了游标之后，应用程序可以根据需要滚动或浏览其中的数据；游标主要用于交互式应用，其中用户需要滚动屏幕上的数据，并对数据进行浏览或做出更改 不像多数DBMS，MySQL游标只能用于存储过程（和函数） 1）创建游标【存储过程处理完成后，游标就消失（因为它局限于存储过程）】游标用DECLARE语句创建，DECLARE命名游标，并定义相应的SELECT语句，根据需要带WHERE和其他子句CREATE PROCEDURE processorders()BEGIN DECLARE ordernumbers CURSOR FOR SELECT order_num FROM orders;END; 2）打开和关闭游标OPEN ordernumbers; CLOSE ordernumbers; 在一个游标关闭后，如果没有重新打开，则不能使用它。但是，使用声明过的游标不需要再次声明，用OPEN语句打开它就可以了，如果你不明确关闭游标，MySQL将会在到达END语句时自动关闭它 这个存储过程声明、打开和关闭一个游标，但对检索出来的数据什么也没做CREATE PROCEDURE processorders()BEGIN DECLARE ordernumbers CURSOR FOR SELECT order_num FROM orders; OPEN ordernumbers; CLOSE ordernumbers; END; 3）使用游标数据：在一个游标被打开后，可以使用FETCH语句分别访问它的每一行。FETCH指定检索什么数据（所需的列），检索出来的数据存储在什么地方。它还向前移动游标中的内部行指针，使下一条FETCH语句检索下一行（不重复读取同一行） 从游标中检索单个行（第一行）：CREATE PROCEDURE processorders()BEGIN DECLARE o INT; DECLARE ordernumbers CURSOR FOR SELECT order_num FROM orders; OPEN ordernumbers; FETCH ordernumbers INTO o; CLOSE ordernumbers; END; 循环检索数据，从第一行到最后一行：【如果一切正常，你可以在循环内放入任意需要的处理（在FETCH语句之后，循环结束之前）】CREATE PROCEDURE processorders()BEGIN DECLARE done BOOLEAN DEFAULT 0; DECLARE o INT; DECLARE ordernumbers CURSOR FOR SELECT order_num FROM orders; DECLARE CONTINUE HANDLER FOR SQLSTATE ’02000’ SET done=1; OPEN ordernumbers; REPEAT FETCH ordernumbers INTO o; UNTIL done END REPEAT; CLOSE ordernumbers; END; CREATE PROCEDURE processorders()BEGIN DECLARE done BOOLEAN DEFAULT 0; DECLARE o INT; DECLARE t DECIMAL(8,2); DECLARE ordernumbers CURSOR FOR SELECT order_num FROM orders; DECLARE CONTINUE HANDLER FOR SQLSTATE ’02000’ SET done=1; CREATE TABLE IF NOT EXISTS ordertotals (order_num INT,total DECIMAL(8,2)); OPEN ordernumbers; REPEAT FETCH ordernumbers INTO o; CALL ordertotal(o,l,t); INSERT INTO ordertotals(order_num,total) VALUES(o,t); UNTIL done END REPEAT; CLOSE ordernumbers; END; SELECT *FROM ordertotals;","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"内存管理的概念","slug":"计算机基础/操作系统原理/内存管理的概念","date":"2020-10-08T16:00:00.000Z","updated":"2021-06-08T07:14:31.108Z","comments":true,"path":"2020/10/09/计算机基础/操作系统原理/内存管理的概念/","link":"","permalink":"http://example.com/2020/10/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E6%A6%82%E5%BF%B5/","excerpt":"","text":"操作系统作为系统资源的管理者，当然也需要对内存进行管理 操作系统负责内存空间的分配与回收 操作系统要怎么记录哪些内存区域已经被分配出去了，哪些又还空闲？ 内存中很多位置都可以存放，那新来的进程应该放在哪里？ 当进程运行结束之后，如何将进程占用的内存空间回收？ 操作系统需要提供某种技术从逻辑上对内存空间进行扩充（虚拟性） 操作系统需要提供地址转换功能，负责程序的逻辑地址与物理地址的转换 为了使编程更方便，程序员写程序时应该只需要关注指令、数据的逻辑地址。而逻辑地址到物理地址的转换（这个过程称为地址重定位）应该由操作系统负责，这样就保证了程序员写程序时不需要关注物理内存的实际情况（三种装入方式） 操作系统需要提供内存保护功能，保证各进程在各自存储空间内运行，互不干扰","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"使用触发器","slug":"计算机基础/《MySQL必知必会》/使用触发器","date":"2020-10-07T16:00:00.000Z","updated":"2021-05-20T09:48:01.104Z","comments":true,"path":"2020/10/08/计算机基础/《MySQL必知必会》/使用触发器/","link":"","permalink":"http://example.com/2020/10/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E4%BD%BF%E7%94%A8%E8%A7%A6%E5%8F%91%E5%99%A8/","excerpt":"","text":"使用触发器 触发器是MySQL响应以下任意语句而自动执行的一条MySQL语句（或位于BEGIN和END语句之间的一组语句）： DELETE; INSERT; UPDATE;其他MySQL语句不支持触发器 在创建触发器时，需要给出4条信息：1）唯一的触发器名2）触发器关联的表3）触发器应该响应的活动（DELETE、INSERT、UPDATE）4）触发器何时执行（处理之前或之后） 1）创建触发器CREATE TRIGGER newproduct AFTER INSERT ON productsFOR EACH ROW SELECT ‘Product added’; 只有表才支持触发器，视图不支持（临时表也不支持）；触发器按每个表每个事件每次的定义，每个表每个事件每次只允许一个触发器，因此每个表最多支持6个触发器（每条INSERT、UPDATE、DELETE的之前和之后）。单一触发器不能与多个事件或多个表关联，所以，如果你需要一个对INSERT和UPDATE操作执行的触发器，则应该定义两个触发器。 2）删除触发器DROP TRIGGER newproduct;触发器不能更新或覆盖，为了修改一个触发器，必须先删除它，然后再重新创建 3）使用触发器（1）INSERT触发器CREATE TRIGGER neworder AFTER INSERT ON ordersFOR EACH ROW SELECT NEW.order_num; (2)DELETE触发器 【原书缺页？？？？】","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"内存空间的分配与回收","slug":"计算机基础/操作系统原理/内存空间的分配与回收","date":"2020-10-07T16:00:00.000Z","updated":"2021-06-09T08:46:31.504Z","comments":true,"path":"2020/10/08/计算机基础/操作系统原理/内存空间的分配与回收/","link":"","permalink":"http://example.com/2020/10/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E7%9A%84%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6/","excerpt":"","text":"连续分配管理方式连续分配：指为用户进程分配的必须是一个连续的内存空间 单一连续分配在单一连续分配方式中，内存被分为系统区和用户区。 系统区通常位于内存的低地址部分，用于存放操作系统相关数据；用户区用于存放用户进程相关数据，内存中只能有一道用户程序，用户程序独占整个用户区空间 优点：实现简单，无外部碎片，可以采用覆盖技术扩充内存，不一定需要采取内存保护（MS-DOS） 缺点：只能用于单用户、单任务的操作系统中，有内部碎片，存储器利用率极低（分配给某进程的内存区域中，如果有些部分没有用上，就是“内部碎片”） 固定分区分配 动态分区分配动态分区分配又称为可变分区分配，这种分配方式不会预先划分内存分区，而是在进程装入内存时，根据进程的大小动态的建立分区，并使分区的大小正好适合进程的需要。因此系统分区的大小和数目是可变的 假设某计算机内存大小为64MB，系统区8MB，用户区共56MB 系统要用什么样的数据结构记录内存的使用情况？ 当很多个空闲分区都能满足需求时，应该选择哪个分区进行分配？ 如何进行分区的分配与回收操作？（假设系统采用的数据结构是“空闲分区表”） 1）如何分配？ 2）如何回收？（总之，相邻的空闲分区要合并） 动态分区分配没有内部碎片，但是有外部碎片 内部碎片：分配给某进程的内存区域中，如果有些部分没有用上 外部碎片；是指内存中的某些空闲分区由于太小而难以利用 如果内存中空闲空间的总和本来可以满足某进程的要求，但由于进程需要的是一整块连续的内存空间，因此这些“碎片”不能满足进程的需求。可以通过紧凑（拼凑）技术来解决外部碎片 动态分区分配算法在动态分区分配方式中，当很多个空闲分区都能满足需求时，应该选择哪个分区进行分配？ 首次适应算法（First Fit） 最佳适应算法（Best Fit） 最坏适应算法（Worst Fit） 邻近适应算法（Next Fit） ⭐️首次适应算法和邻近适应算法比最佳适应算法和最坏适应算法好的一点：不用每次都更新空闲分区链/表的排列顺序，减少开销 ❗️综合来看，四种算法中，首次适应算法的效果反而更好 非连续分配管理方式非连续分配：为用户进程分配的可以是一些分散的内存空间 基本分页存储管理什么是分页存储将内存空间分为一个个大小相等的分区，每个分区就是一个“页框”（页框、页帧、内存块、物理块、物理页面），每个页框有一个编号，即“页框号”，页框号从0开始 将进程的逻辑地址空间也分为与页框大小相等的一个个部分，每个部分称为一个“页”或“页面”。每个页面也有一个编号，即“页号”，页号也是从0开始 操作系统以页框为单位为各个进程分配内存空间。进程的每个页面分别放入一个页框中。也就是说，进程的页面与内存的页框有一一对应的关系，各个页面不必连续存放，可以放到不相邻的各个页框中 页表为了能知道进程的每个页面在内存中存放的位置，操作系统要为每个进程建立一张页表，页表通常存在PCB（进程控制块）中 每个页表项多大，占几个字节？ 页表项连续存放，因此页号可以是隐含的，不占存储空间（类比数组） 假设页表中的各页表项从内存地址为X的地方开始连续存放，如何找到页号为i的页表项：X + 3*i 由于页号是隐含的，因此每个页表项占3B，存储整个页表至少需要3*(n+1)B 注意；页表记录的只是内存块号，而不是内存块的其实地址：J号内存块的起始地址 = J * 内存块大小 如何通过页表实现逻辑地址到物理地址的转换？（逻辑地址结构可拆分为页号P和页内偏移量W） 基本地址变换机构（用于实现逻辑地址到物理地址转换的一组硬件机构）基本地址变换机构可以借助进程的页表将逻辑地址转换为物理地址 通常会在系统中设置一个页表寄存器PTR，存放页表在内存中的起始地址F和页表长度M。进程未执行时，页表的始址和页表长度放在进程控制块PCB中，当进程被调度时，操作系统内核会把它们放到页表寄存器中 注意：假设页面大小是2的整数幂，设页面大小为L，逻辑地址A到物理地址E的变换过程如下： CPU第一次访问内存：查页表 CPU第二次访问内存：访问目标内存单元 对页表项大小的进一步探讨： 具有快表的地址变换机构（是基本地址变换机构的改进版本）什么是快表TLB快表，又称联想寄存器TLB，是一种访问速度比内存快很多的高速缓存，用来存放最近访问的一部分页表项的副本，可以加速地址变换的速度，与此对应，内存中的页表常称为慢表 ❗️TLB不是内存 ❗️TLB和普通Cache的区别：TLB中只有一部分页表项的副本，而普通Cache中可能会有其他各种数据的副本 引入快表后，地址的变换过程刚开始快表是为空的，当访问完慢表后，会把最近使用过的页表项放入快表中，下次若快表命中就不需要再访问内存了： ❗️快表中存放的是页表的一部分副本，因为TLB造价比内存高 局部性原理 两级页表单极页表存在什么问题，如何解决？1）页表必须连续存放，因此当页表很大时，需要占用很多个连续的页框 2）根据局部性原理可知：很多时候，进程在一段时间内只需要访问某几个页面就可以正常运行了。因此没必要让整个页表都常驻内存 第一个问题的解决方法： 两级页表的原理，逻辑地址结构（一级页号、二级页号、页内偏移量） 如何实现地址变换？ 第二个问题的解决方法：可以在需要访问页面时才把页面调入内存（虚拟存储技术），可以在页表项中增加一个标志位，用于表示该页面是否已经调入内存 两级页表问题需要注意的几个细节？ 若采用多级页表机制，则各级页表的大小不能超过一个页面，若两级页表不够，可以分更多级 两级页表的访存次数分析（假设没有快表机构）（N级页表访问一个逻辑地址需要N+1次访存） 第一次访存：访问内存中的页目录表 第二次访存：访问内存中的二级页表 第三次访存：访问目标内存单元 基本分段存储管理与“分页”最大的区别就是离散分配时所分配地址空间的基本单位不同 什么是分段进程的地址空间：按照程序自身的逻辑关系划分为若干个段，每个段都有一个段名（在低级语言中，程序员使用段名来编程），每段从0开始编址 内存分配规则：以段为单位进行分配，每个段在内存中占据连续空间，但各段之间可以不相邻 什么是段表程序分多个段，各段离散的装入内存，为了保证程序能正常运行，就必须能从物理内存中找到各个逻辑段的存放位置。为此，需为每个进程建立一张段映射表，简称“段表” 如何实现地址变换 分段、分页管理的对比 页是信息的物理单位，分页的主要目的是为了实现离散分配，提高内存利用率。分页仅仅是系统管理上的需要，完全是系统行为，对用户是不可见的 段是信息的逻辑单位，分段的主要目的是更好的满足用户需求，一个段通常包含着一组属于一个逻辑模块的信息。分段对用户是可见的，用户编程时需要显式的给出段名 页的大小固定且由系统决定，段的长度却不固定，决定于用户编写的程序 分页的用户进程地址空间是一维的，程序员只需给出一个记忆符即可表示一个地址 分段的用户进程地址空间是二维的，程序员在标识一个地址时，既要给出段名，也要给出段内地址 分段比分页更容易实现信息的共享和保护 不能被修改的代码称为纯代码或可重入代码（不属于临界资源），这样的代码是可以共享的。可修改的代码是不能共享的（比如有一个代码段中有很多变量，各进程并发的同时访问可能造成数据不一致） 访问一个逻辑地址需要几次访存？ 分页（单级页表）：第一次访存查内存中的页表，第二次访存访问目标内存单元，总共两次访存 分段：第一次访存查内存中的段表，第二次访存访问目标内存单元，总共两次访存。与分页系统类似，分段系统中也可以引入快表机构，将近期访问过的段表项放到快表中，这样可以少一次访问，加快地址变换速度 段页式存储管理分页、分段的优缺点分页管理： 优点：内存空间利用率高，不会产生外部碎片，只会有少量的页内碎片 缺点：不方便按照逻辑模块实现信息的共享和保护 分段管理： 优点：很方便按照逻辑模块实现信息的共享和保护 缺点：如果段长过大，为其分配很大的连续空间会很不方便。另外，段式管理会产生外部碎片（分段管理中产生的外部碎片也可以用“紧凑”来解决，只是需要付出较大的时间代价） 分段 + 分页 = 段页式管理 段页式管理的逻辑地址结构 段表、页表一个进程对应一个段表，一个进程对应多个页表 地址变换","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"管理事务处理","slug":"计算机基础/《MySQL必知必会》/管理事务处理","date":"2020-10-06T16:00:00.000Z","updated":"2021-05-20T09:46:30.574Z","comments":true,"path":"2020/10/07/计算机基础/《MySQL必知必会》/管理事务处理/","link":"","permalink":"http://example.com/2020/10/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E7%AE%A1%E7%90%86%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/","excerpt":"","text":"管理事务处理 事务处理可以用来维护数据库的完整性，它保证成批的MySQL操作要么完全执行，要么完全不执行 事务处理是一种机制，用来管理必须成批执行的MySQL操作，以保证数据库不包含不完整的操作结果，利用事务处理，可以保证一组操作不会中途停止，它们或者作为整体执行，或者完全不执行（除非明确指示），如果没有发生错误，整组语句提交给（写到）数据库表。如果发生错误，则进行回退（撤销）以恢复数据库到某个已知且安全的状态 事务：指一组SQL语句回退：指撤销指定SQL语句的过程提交：指将未存储的SQL语句结果写入数据库表保留点：指事务处理中设置的临时占位符，你可以对它发布回退（与回退整个事务处理不同） 1）START TRANSACTION标识事务的开始 2）MySQL的ROLLBACK命令用来回退（撤销）MySQL语句：SELECT * FROM ordertotals;START TRANSACTION;DELETE FROM ordertotals;SELECT * FROM ordertotals;ROLLBACK;SELECT * FROM ordertotals; 3)一般的MySQL语句都是直接针对数据库表执行和编写的，这就是所谓的隐含提交，即提交（写或保存）操作是自动进行的；但是，在事务处理块中，提交不会隐含的进行。为进行明确的提交，使用COMMIT语句START TRANSACTION;DELETE FROM orderitems WHERE order_num=20010;DELETE FROM orders WHERE order_num=20010;COMMIT; 使用保留点：这些占位符称为保留点 创建占位符：SAVEPOINT deletel; 每个保留点都取标识它的唯一名字，以便在回退时，MySQL知道要回退到何处。为了回退到本例给出的保留点，可如下进行：ROLLBACK TO deletel;","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"内存空间的扩充","slug":"计算机基础/操作系统原理/内存空间的扩充","date":"2020-10-06T16:00:00.000Z","updated":"2021-06-09T08:46:36.762Z","comments":true,"path":"2020/10/07/计算机基础/操作系统原理/内存空间的扩充/","link":"","permalink":"http://example.com/2020/10/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E7%9A%84%E6%89%A9%E5%85%85/","excerpt":"","text":"内存空间的扩充在传统存储管理方式的基础上引入了交换技术、覆盖技术，使得内存利用率有所提升，并且能从逻辑上扩充内存容量 覆盖技术早期的计算机内存很小，比如IBM推出的第一台PC机最大只支持1MB大小的内存。因此经常会出现内存大小不够的情况 后来人们引入了覆盖技术，用来解决“程序大小超过物理内存总和”的问题 覆盖技术的思想：将程序分为多个段（多个模块），常用的段常驻内存，不常用的段在需要时调入内存 内存中分为一个“固定区”和若干个“覆盖区” 需要常驻内存的段放在“固定区”中，调入后就不再调出（除非运行结束） 不常用的段放在“覆盖区”，需要用到时调入内存，用不到时调出内存 交换技术交换（对换）技术的设计思想：内存空间紧张时，系统将内存中某些进程暂时换出外存，把外存中某些已具备运行条件的进程换入内存（进程在内存与磁盘间动态调度） 虽然不常用的进程被调出内存了，但是该进程的PCB还在内存中保存着： ![image-20210607101828325](/Users/liaojialong/Library/Application Support/typora-user-images/image-20210607101828325.png) 应该在外存（磁盘）的什么位置保存被换出的进程？ 什么时候应该交换？ 应该换出哪些进程？ 覆盖与交换的区别： 覆盖是在同一程序或进程中的 交换是在不同进程（或作业）之间的 虚拟存储技术传统存储管理方式的特征、缺点 局部性原理时间局部性：现在访问的指令、数据在不久后很可能会被再次访问 空间局部性：现在访问的内存单元周围的内存空间，很可能在不久后会被访问 高速缓存技术：使用频繁的数据放到更高速的存储器中 虚拟内存的定义和特征 虚拟内存的三个主要特征： 多次性：无需在作业运行时一次性全部装入内存，而是允许被分成多次调入内存 对换性：在作业运行时无需一直常驻内存，而是允许在作业运行过程中，将作业换入、换出 虚拟性：从逻辑上扩充了内存的容量，使用户看到的内存容量，远大于实际的容量 如何实现虚拟内存技术虚拟内存技术，允许一个作业分多次调入内存，如果采用连续分配方式，会不方便实现。因此虚拟内存的实现需要建立在离散分配的内存管理方式基础上 请求分页管理方式页表机制 缺页中断机构如果内存中有空闲块：修改内存号为a，状态位为1 如果内存中没有空闲块：将c换出内存，将x号块放进c号块 缺页中断是因为当前执行的指令想要访问的目标页面未调入内存而产生的，因此属于内中断 一条指令在执行期间，可能产生多次缺页中断：将逻辑地址A中的数据复制到逻辑地址B，而A、B属于不同的页面，则有可能产生两次中断 地址变换机构 在具有快表机构的请求分页系统中，访问一个逻辑地址时，若发生缺页，则地址变换步骤是 查快表（未命中） 查慢表（发现未调入内存） 调页（调入的页面对应的表项不仅会加入慢表，也会加入快表中） 查快表（命中） 访问目标内存单元 页面置换算法页面的换入、换出需要磁盘I/O，会有较大的开销，因此好的页面置换算法应该追求更少的缺页率 最佳置换算法OPT（性能最好）每次选择淘汰的页面将是以后永不使用，或者在最长时间内不再被访问的页面，这样可以保证最低的缺页率 最佳置换算法可以保证最低的缺页率，但实际上，只有在进程执行的过程中才能知道接下来会访问到的是哪个页面。操作系统无法提前预判页面访问序列。因此，最佳置换算法是无法实现的 先进先出置换算法FIFO每次选择淘汰的页面是最早进入内存的页面 最近最久未使用置换算法LRU该算法性能最接近最佳置换算法： 时钟置换算法CLOCK（NRU） 实现简单，算法开销小，但未考虑页面是否被修改过 改进型的时钟置换算法NRU第一优先级：最近没访问，且没修改的页面 第二优先级：最近没访问，但修改过的页面 第三优先级：最近访问过，但没修改的页面 第四优先级：最近访问过，且修改过的页面 算法开销较小，性能也不错","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"全球化和本地化","slug":"计算机基础/《MySQL必知必会》/全球化和本地化","date":"2020-10-05T16:00:00.000Z","updated":"2021-05-20T09:47:37.189Z","comments":true,"path":"2020/10/06/计算机基础/《MySQL必知必会》/全球化和本地化/","link":"","permalink":"http://example.com/2020/10/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E5%85%A8%E7%90%83%E5%8C%96%E5%92%8C%E6%9C%AC%E5%9C%B0%E5%8C%96/","excerpt":"","text":"","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"页面分配策略","slug":"计算机基础/操作系统原理/页面分配策略","date":"2020-10-05T16:00:00.000Z","updated":"2021-06-17T09:28:45.354Z","comments":true,"path":"2020/10/06/计算机基础/操作系统原理/页面分配策略/","link":"","permalink":"http://example.com/2020/10/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E9%A1%B5%E9%9D%A2%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/","excerpt":"","text":"驻留集驻留集：指请求分页存储管理中给进程分配的物理块（内存块）的集合，在采用了虚拟存储技术的系统中，驻留集大小一般小于进程的总大小 假设某进程共有100个页面，则该进程的驻留集大小为100时进程可以全部放入内存，运行期间不可能再发生缺页。若驻留集大小为1，则进程运行期间必定会极频繁的缺页 若驻留集太小，会导致缺页频繁，系统要花大量的时间来处理缺页，实际用于进程推进的时间很少 若驻留集太大，又会导致多道程序并发度下降，资源利用率降低。所以应该选择一个合适的驻留集大小 页面分配、置换策略固定分配：操作系统为每个进程分配一组固定数目的物理块，在进程运行期间不再改变，即驻留集大小不变 可变分配：先为每个进程分配一定数目的物理块，在进程运行期间，可根据情况做适当的增加或减少，即驻留集大小可变 局部置换：发生缺页时只能选进程自己的物理块进行置换 全局置换：可以将操作系统保留的空闲物理块分配给缺页进程，也可以将别的进程持有的物理块置换到外存，再分配给缺页进程 ⭐️没有固定分配的全局置换：全局置换意味着一个进程拥有的物理块数量必然会改变，因此不可能是固定分配 固定分配局部置换 可变分配全局置换系统会锁定一些页面，这些页面中的内容不能置换出外存（如重要的内核数据可以设为“锁定”） 可变分配局部置换（该策略最好） 可变分配全局置换：只要缺页就给分配新物理块 可变分配局部置换：要根据发生缺页的频率来动态的增加或减少进程的物理块 何时调入页面 从何处调入页面 系统拥有足够的对换区空间：页面的调入、调出都是在内存与对换区之间进行，这样可以保证页面的调入、调出速度很快。在进程运行前，需将进程相关的数据从文件区复制到对换区 系统缺少足够的对换区空间：凡是不会被修改的数据都直接从文件区调入，由于这些页面不会被修改，因此换出时不必写回磁盘，下次需要时再从文件区调入即可。对于可能被修改的部分，换出时需写回磁盘对换区，下次需要时再从对换区调入 UNIX方式：运行之前进程有关的数据全部放在文件区，故未使用过的页面，都可从文件区调入。若被使用过的页面需要换出，则写回对换区，下次需要时从对换区调入 抖动（颠簸）现象 工作集根据工作集来分配驻留集：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"安全管理","slug":"计算机基础/《MySQL必知必会》/安全管理","date":"2020-10-04T16:00:00.000Z","updated":"2021-05-20T09:44:53.208Z","comments":true,"path":"2020/10/05/计算机基础/《MySQL必知必会》/安全管理/","link":"","permalink":"http://example.com/2020/10/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86/","excerpt":"","text":"","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"初识文件管理","slug":"计算机基础/操作系统原理/初识文件管理","date":"2020-10-04T16:00:00.000Z","updated":"2021-06-17T09:29:14.281Z","comments":true,"path":"2020/10/05/计算机基础/操作系统原理/初识文件管理/","link":"","permalink":"http://example.com/2020/10/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E5%88%9D%E8%AF%86%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/","excerpt":"","text":"文件就是一组有意义的信息/数据集合 计算机中存放了各种各样的文件，一个文件有哪些属性？ 文件名：由创建文件的用户决定文件名，主要是为了方便用户找到文件，同一目录下不允许有重名文件 标识符：一个系统内的各文件标识符唯一，对用户来说毫无可读性，因此标识符只是操作系统用于区分各个文件的一种内部名称 类型：指明文件的类型 位置：文件存放的路径（让用户使用）、在外存中的地址（操作系统使用，对用户不可见） 大小：指明文件大小 创建时间、上次修改时间 文件所有者信息 保护信息：对文件进行保护的访问控制信息 文件内部的数据应该怎样组织起来？（文件的逻辑结构） 无结构文件：如文本文件，由一些二进制或字符流组成，又称“流式文件” 有结构文件：如数据库表，由一组相似的记录组成，又称“记录式文件”，记录是一组相关数据项的集合，数据项是文件系统中最基本的数据单位 文件之间又应该怎么组织起来？ 从下往上看，OS应提供哪些功能，才能方便用户、应用程序使用文件？ 可以创建文件：点击新建后，图形化交互进程在背后调用了“create系统调用” 可以删除文件：点了删除之后，图形化交互进程通过操作系统提供的删除文件功能，即delete系统调用，将文件数据从外存中删除 可以读文件：将文件数据读入内存，才能让CPU处理，双击后，记事本应用程序通过操作系统提供的读文件功能，即read系统调用，将文件数据从外存读入内存，并显示在屏幕上 可以写文件：将更改过的文件数据写回外存，我们在记事本应用程序中编辑文件内容，点击保存后，记事本应用程序通过操作系统提供的写文件功能，即write系统调用，将文件数据从内存写回外存 打开文件：open系统调用 关闭文件：close系统调用 ❗️读/写文件之前，需要“打开文件”，读/写文件结束之后，需要“关闭文件” 可用几个基本操作完成更复杂的操作，比如复制文件，先创建一个新的空文件，再把源文件读入内存，再将内存中的数据写到新文件中 从上往下看，文件数据应该怎么存放在外存（磁盘）上？（文件的物理结构） 操作系统又应该怎么管理空闲磁盘块？ 其他需要由操作系统实现的文件管理功能 文件共享：使多个用户可以共享使用一个文件 文件保护：如何保证不同的用户对文件有不同的操作权限","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"数据库维护","slug":"计算机基础/《MySQL必知必会》/数据库维护","date":"2020-10-03T16:00:00.000Z","updated":"2021-05-20T09:49:29.385Z","comments":true,"path":"2020/10/04/计算机基础/《MySQL必知必会》/数据库维护/","link":"","permalink":"http://example.com/2020/10/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BB%B4%E6%8A%A4/","excerpt":"","text":"","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"文件的逻辑结构","slug":"计算机基础/操作系统原理/文件的逻辑结构","date":"2020-10-03T16:00:00.000Z","updated":"2021-06-17T09:29:40.518Z","comments":true,"path":"2020/10/04/计算机基础/操作系统原理/文件的逻辑结构/","link":"","permalink":"http://example.com/2020/10/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%96%87%E4%BB%B6%E7%9A%84%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84/","excerpt":"","text":"所谓的“逻辑结构”，就是指在用户看来，文件内部的数据应该是如何组织起来的。而“物理结构”指的是在操作系统看来，文件的数据是如何存放在外存中的（类比于数据结构中的“逻辑结构”、“物理结构”） 无结构文件文件内部的数据就是一系列二进制流或字符流组成，又称“流式文件” 文件内部的数据其实就是一系列字符流，没有明显的结构特性。因此也不用探讨无结构文件的“逻辑结构”问题 有结构文件由一组相似的记录组成，又称“记录式文件”，每条记录由若干个数据项组成，一般来说，每条记录有一个数据项可作为关键字（作为识别不同记录的ID） 根据各条记录的长度（占用的存储空间）是否相等，又可分为定长记录和可变长记录两种 根据有结构文件中的各条记录在逻辑上如何组织，可以分为三类： 顺序文件文件中的记录一个接一个的顺序排列（逻辑上），记录可以是定长的或可变长的。各个记录在物理上可以是顺序存储或链式存储 串结构：记录之间的顺序与关键字无关，通常按照记录存入的时间决定记录的顺序 顺序结构：记录之间的顺序按关键字顺序排列 假设已经知道了文件的起始地址，也就是第一个记录存放的位置 能否快速找到第i个记录对应的地址？（即能否实现随机存取） 能否快速找到某个关键字对应的记录存放的位置？ 顺序文件的缺点是增加/删除一个记录比较困难，如果是串结构则相对简单 索引文件对于可变长记录文件，要找到第i个记录，必须先顺序的查找前i-1个记录，但是很多应用场景中又必须使用可变长记录，如何解决这个问题？ 解决了顺序文件不方便增/删记录的问题，同时让不定长记录的文件实现了随机存取，但索引表可能占用很多空间 索引顺序文件（多级索引顺序文件）索引文件的缺点：每个记录对应一个索引表项，因此索引表可能会很大，比如文件的每个记录平均只占8B，而每个索引表项占32个字节，那么索引表都要比文件内容本身大4倍，这样对存储空间的利用率就太低了","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"改善性能","slug":"计算机基础/《MySQL必知必会》/改善性能","date":"2020-10-02T16:00:00.000Z","updated":"2021-05-20T09:46:07.626Z","comments":true,"path":"2020/10/03/计算机基础/《MySQL必知必会》/改善性能/","link":"","permalink":"http://example.com/2020/10/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/%E6%94%B9%E5%96%84%E6%80%A7%E8%83%BD/","excerpt":"","text":"","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"}]},{"title":"文件目录","slug":"计算机基础/操作系统原理/文件目录","date":"2020-10-02T16:00:00.000Z","updated":"2021-06-17T09:30:08.095Z","comments":true,"path":"2020/10/03/计算机基础/操作系统原理/文件目录/","link":"","permalink":"http://example.com/2020/10/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95/","excerpt":"","text":"文件之间的组织结构清晰，易于查找 编程时也可以很方便的用文件路径找到一个文件，用户可以轻松实现“按名存取” 从操作系统的角度来看，这些目录结构应该是如何实现的？ 文件控制块（实现文件目录的关键数据结构） FCB实现了文件名和文件之间的映射，使用户（用户程序）可以实现“按名存取” 需要对目录进行哪些操作： 搜索：当用户要使用一个文件时，系统要根据文件名搜索目录，找到该文件对应的目录项 创建文件：创建一个新文件时，需要在其所属的目录中增加一个目录项 删除文件：当删除一个文件时，需要在目录中删除相应的目录项 显示目录：用户可以请求显示目录的内容，如显示该目录中的所有文件及相应属性 修改目录：某些文件属性保存在目录中，因此这些属性变化时需要修改相应的目录项（如文件重命名） 目录结构单级目录结构早期操作系统并不支持多级目录，整个系统中只建立一张目录表，每个文件占一个目录项 两级目录结构 多级目录结构（树形目录结构） 树形目录结构可以很方便的对文件进行分类，层次结构清晰，也能够更有效的进行文件的管理和保护。但是，树形结构不便于实现文件的共享。为此，提出了“无环图目录结构” 无环图目录结构 ❗️只有共享计数器减为0时，才删除结点 ❗️共享文件不同于复制文件，在共享文件中，由于各用户指向的是同一个文件，因此只要其中一个用户修改了文件数据，那么所有用户都可以看到文件数据的变化 索引结点（对文件控制块的优化） 由于目录项长度减小，因此每个磁盘块可以存放更多个目录项，因此检索文件时磁盘I/O的次数就少了很多 当找到文件名对应的目录项时，才需要将索引结点调入内存，索引结点中记录了文件的各种信息，包括文件在外存中的存放位置，根据“存放位置”即可找到文件 存放在外存中的索引结点称为“磁盘索引结点”，当索引结点放入内存后称为“内存索引结点”，相比之下内存索引结点中需要增加一些信息，比如文件是否被修改、此时有几个进程正在访问该文件等","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"文件的物理结构(文件分配方式)","slug":"计算机基础/操作系统原理/文件的物理结构(文件分配方式)","date":"2020-10-01T16:00:00.000Z","updated":"2021-06-17T09:30:37.372Z","comments":true,"path":"2020/10/02/计算机基础/操作系统原理/文件的物理结构(文件分配方式)/","link":"","permalink":"http://example.com/2020/10/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%96%87%E4%BB%B6%E7%9A%84%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84(%E6%96%87%E4%BB%B6%E5%88%86%E9%85%8D%E6%96%B9%E5%BC%8F)/","excerpt":"","text":"操作系统需要对磁盘块进行哪些管理： 对非空闲磁盘块的管理（存放了文件数据的磁盘块）：“文件的物理结构/文件分配方式要探讨的问题” 对空闲磁盘块的管理：“文件存储空间管理要探讨的问题” 类似于内存分页，磁盘中的存储单元也会被分为一个个“块/磁盘块/物理块”，很多操作系统中，磁盘块的大小与内存块、页面的大小相同 连续分配 连续分配的优点： 连续分配支持顺序访问和直接访问（即随机访问） 读取某个磁盘块时，需要移动磁头，访问的两个磁盘块相隔越远，移动磁头所需时间就越长，连续分配的文件在顺序读/写时速度最快 连续分配的缺点： 链接分配链接分配采取离散分配的方式，可以为文件分配离散的磁盘块，分为隐式链接和显式链接两种 隐式链接 是否方便拓展文件：若此时要拓展文件，则可以随便找一个空闲磁盘块，挂到文件的磁盘块链尾，并修改文件的的FCB 结论：采用隐式链接的链接分配方式，很方便文件拓展，另外，所有的空闲磁盘块都可以被利用，不会有碎片问题，外存利用率高 显式链接 缺点：文件分配表需要占用一定的存储空间 索引分配 链接方案 多层索引![image-20210613181255832](/Users/liaojialong/Library/Application Support/typora-user-images/image-20210613181255832.png) 采用K层索引结构，且顶级索引表未调入内存，则访问一个数据块只需要K+1次读磁盘操作 缺点：即使是小文件，访问一个数据块依然需要K+1次读磁盘 混合索引 优点：对于小文件来说，访问一个数据块所需的读磁盘次数更少 总结：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"文件存储空间管理","slug":"计算机基础/操作系统原理/文件存储空间管理","date":"2020-09-30T16:00:00.000Z","updated":"2021-06-17T09:31:05.571Z","comments":true,"path":"2020/10/01/计算机基础/操作系统原理/文件存储空间管理/","link":"","permalink":"http://example.com/2020/10/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/","excerpt":"","text":"存储空间的划分与初始化目录区包含文件目录、空闲表、位示图、超级块等用于文件管理的数据 几种管理方法空闲表法（适用于“连续分配方式”） 如何分配磁盘块，与内存管理中的动态分区分配很类似，为一个文件分配连续的存储空间。同样可采用首次适应、最佳适应、最坏适应等算法来决定要为文件分配哪个区间 如何回收磁盘块：与内存管理中的动态分区分配很类似，当回收某个存储区时需要有四种情况：回收区的前后都没有相邻空闲区、回收区的前后都是空闲区、回收区前面是空闲区、回收区后面是空闲区，总之，回收时需要注意表项的合并问题 空闲链表法空闲盘块链以盘块为单位组成一条空闲链 空闲盘区链以盘区为单位组成一条空闲链 位示图法（连续分配、离散分配都适用） 成组链接法（理解即可）空闲表法、空闲链表法不适用于大型文件系统，因为空闲表或空闲链表可能过大 UNIX系统中采用了成组链接法对磁盘空闲块进行管理，适合大型文件系统","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"文件的基本操作","slug":"计算机基础/操作系统原理/文件的基本操作","date":"2020-09-29T16:00:00.000Z","updated":"2021-06-17T09:31:44.935Z","comments":true,"path":"2020/09/30/计算机基础/操作系统原理/文件的基本操作/","link":"","permalink":"http://example.com/2020/09/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%96%87%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/","excerpt":"","text":"向上提供的几个最基本的功能： 创建文件（create系统调用）：可以创建文件，点击新建后，图形化交互进程在背后调用了create系统调用 删除文件（delete系统调用）：可以删除文件，点了删除之后，图形化交互进程通过操作系统提供的删除文件功能，即delete系统调用，将文件数据从外存中删除 打开文件（open系统调用） ❗️打开文件时并不会把文件数据直接读入内存，只是将目录项中的信息复制到内存中的打开文件表中，并将打开文件表的索引号返回给用户 索引号也称“文件描述符” 每个进程有自己的打开文件表，系统中也有一张总的打开文件表： 关闭文件（close系统调用） 读文件（read系统调用）：可以读文件，将文件数据读入内存，才能让CPU处理，双击后，记事本应用程序通过操作系统提供的读文件功能，即read系统调用，将文件数据从外存读入内存，并显示在屏幕上 ❗️读/写文件用文件描述符即可指明文件，不再需要用到“文件名” 写文件（write系统调用）：可以写文件，将更改过的文件数据写回外存，，我们在记事本应用程序中编辑文件内容，点击保存后，记事本应用程序通过操作系统提供的写文件功能，即write系统调用，将文件数据从内存写回外存","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"文件共享","slug":"计算机基础/操作系统原理/文件共享","date":"2020-09-28T16:00:00.000Z","updated":"2021-06-17T09:32:14.821Z","comments":true,"path":"2020/09/29/计算机基础/操作系统原理/文件共享/","link":"","permalink":"http://example.com/2020/09/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB/","excerpt":"","text":"操作系统为用户提供文件共享功能，可以让多个用户共享的使用同一个文件 多个用户共享同一个文件，意味着系统中只有一份文件数据，并且只要某个用户修改了该文件的数据，其他用户也可以看到文件数据的变化 如果是多个用户都复制了同一个文件，那么系统中会有好几份文件数据，其中一个用户修改了自己的那份文件数据，对其他用户的文件数据并没有影响 基于索引结点的共享方式（硬链接）各个用户的目录项指向同一个索引结点： 若count &gt; 0，说明还有别的用户要使用该文件，暂时不能把文件数据删除，否则会导致指针悬空 当count = 0时，系统负责删除文件 基于符号链的共享方式（软链接、符号链接） 即使软链接指向的共享文件已被删除，Link型文件依然存在，只是通过Link型文件中的路径去查找共享文件会失败（找不到对应目录项） 由于用软链接的方式访问共享文件时要查询多级目录，会有多次磁盘I/O，因此用软链接访问共享文件的速度要比硬链接更慢","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"文件保护","slug":"计算机基础/操作系统原理/文件保护","date":"2020-09-27T16:00:00.000Z","updated":"2021-06-17T09:32:42.022Z","comments":true,"path":"2020/09/28/计算机基础/操作系统原理/文件保护/","link":"","permalink":"http://example.com/2020/09/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%96%87%E4%BB%B6%E4%BF%9D%E6%8A%A4/","excerpt":"","text":"操作系统需要保护文件数据的安全 口令保护 加密保护 优点：保密性强，不需要在系统中存储密码 缺点：编码/译码，或者说加密/解密要花费一定时间 访问控制 实现灵活，可以实现复杂的文件保护功能 如果对某个目录进行了访问权限的控制，那也要对目录下的所有文件进行相同的访问权限控制","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"文件系统的层次结构","slug":"计算机基础/操作系统原理/文件系统的层次结构","date":"2020-09-26T16:00:00.000Z","updated":"2021-06-17T09:33:11.206Z","comments":true,"path":"2020/09/27/计算机基础/操作系统原理/文件系统的层次结构/","link":"","permalink":"http://example.com/2020/09/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/","excerpt":"","text":"","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"磁盘的结构","slug":"计算机基础/操作系统原理/磁盘的结构","date":"2020-09-25T16:00:00.000Z","updated":"2021-06-17T09:33:39.409Z","comments":true,"path":"2020/09/26/计算机基础/操作系统原理/磁盘的结构/","link":"","permalink":"http://example.com/2020/09/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E7%A3%81%E7%9B%98%E7%9A%84%E7%BB%93%E6%9E%84/","excerpt":"","text":"磁盘、磁道、扇区的概念磁盘的表面由一些磁性物质组成，可以用这些磁性物质来记录二进制数据 磁盘的盘面被划分成一个个磁道，这样的一个圈就是一个磁道 如何在磁盘中读/写数据需要把“磁头”移动到想要读/写的扇区所在的磁道，磁盘会转起来，让目标扇区从磁头下面划过，才能完成对扇区的读/写操作 盘面、柱面的概念 磁盘的物理地址可用（柱面号，盘面号，扇区号）来定位任意一个磁盘块，在文件的物理结构中，我们经常提到文件数据存放在外存中的几号块，这个块号就可以转换成（柱面号，盘面号，扇区号）的地址形式 可根据该地址读取一个块： 根据柱面号移动磁臂，让磁头指向指定柱面 激活指定盘面对应的磁头 磁盘旋转的过程中，指定的扇区会从磁头下面划过，这样就完成了对指定扇区的读/写 磁盘的分类磁头可以移动的称为活动头磁盘。磁臂可以来回伸缩来带动磁头定位磁道，每个盘面只有一个磁头 磁头不可移动的称为固定头磁盘，这种磁盘中每个磁道有一个磁头 盘片可以更换的称为可换盘磁盘，盘片不可更换的称为固定盘磁盘","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"磁盘调度算法","slug":"计算机基础/操作系统原理/磁盘调度算法","date":"2020-09-24T16:00:00.000Z","updated":"2021-06-17T09:34:06.143Z","comments":true,"path":"2020/09/25/计算机基础/操作系统原理/磁盘调度算法/","link":"","permalink":"http://example.com/2020/09/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E7%A3%81%E7%9B%98%E8%B0%83%E5%BA%A6%E7%AE%97%E6%B3%95/","excerpt":"","text":"一次磁盘读/写操作需要的时间寻找时间：（磁盘调度算法影响的指标） 延迟时间： 传输时间： 延迟时间和传输时间都与磁盘转速相关，且为线性相关。而转速是硬件的固有属性，因此操作系统也无法优化延迟时间和传输时间 但是操作系统的磁盘调度算法会直接影响寻道时间 磁盘调度算法先来先服务FCFS根据进程请求访问磁盘的先后顺序进行调度 最短寻找时间优先SSTF 扫描算法SCAN LOOK调度算法（解决SCAN算法的第一个缺点） 循环扫描算法C-SCAN（解决SCAN算法的第二个缺点） C-LOOK调度算法（解决C-SCAN算法的缺点）","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"减少延迟时间的方法","slug":"计算机基础/操作系统原理/减少延迟时间的方法","date":"2020-09-23T16:00:00.000Z","updated":"2021-06-17T09:34:31.692Z","comments":true,"path":"2020/09/24/计算机基础/操作系统原理/减少延迟时间的方法/","link":"","permalink":"http://example.com/2020/09/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E5%87%8F%E5%B0%91%E5%BB%B6%E8%BF%9F%E6%97%B6%E9%97%B4%E7%9A%84%E6%96%B9%E6%B3%95/","excerpt":"","text":"方法1：交替编号若采用交替编号的策略，即让逻辑上相邻的扇区在物理上有一定的间隔，可以使读取连续的逻辑扇区所需要的延迟时间更小 磁盘地址结构的设计为什么磁盘的物理地址是（柱面号，盘面号，扇区号），而不是（盘面号，柱面号，扇区号）？ 读取地址连续的磁盘块时，采用（柱面号，盘面号，扇区号）的地址结构可以减少磁头移动消耗的时间 方法2：错位命名","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"磁盘的管理","slug":"计算机基础/操作系统原理/磁盘的管理","date":"2020-09-22T16:00:00.000Z","updated":"2021-06-17T09:34:57.542Z","comments":true,"path":"2020/09/23/计算机基础/操作系统原理/磁盘的管理/","link":"","permalink":"http://example.com/2020/09/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E7%A3%81%E7%9B%98%E7%9A%84%E7%AE%A1%E7%90%86/","excerpt":"","text":"磁盘初始化 引导块计算机开机时需要进行一系列初始化的工作，这些初始化的工作是通过执行初始化程序（自举程序）完成的 初始化程序可以放在ROM（只读存储器）中，ROM中的数据在出厂时就写入了，并且以后不能再修改（ROM一般是出厂时就集成在主板上的） 问题：万一需要更新自举程序，将会很不方便，因为ROM中的数据无法更改 ROM中只存放很小的“自举装入程序”，完整的自举程序放在磁盘的启动块（即引导块/启动分区）上，启动块位于磁盘的固定位置，拥有启动分区的磁盘称为启动磁盘或系统磁盘（C:盘） 开机时计算机先运行“自举装入程序”，通过执行该程序就可以找到引导块，并将完整的“自举程序”读入内存，完成初始化 坏块的管理坏了、无法正常使用的扇区就是“坏块”，这属于硬件故障，操作系统是无法修复的。应该将坏块标记出来，以免错误的使用到它","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"I-O设备的基本概念和分类","slug":"计算机基础/操作系统原理/I-O设备的基本概念和分类","date":"2020-09-21T16:00:00.000Z","updated":"2021-06-17T09:35:26.035Z","comments":true,"path":"2020/09/22/计算机基础/操作系统原理/I-O设备的基本概念和分类/","link":"","permalink":"http://example.com/2020/09/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/I-O%E8%AE%BE%E5%A4%87%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E5%88%86%E7%B1%BB/","excerpt":"","text":"什么是I/O设备I/O就是输入/输出（Input/Output） I/O设备就是可以将数据输入到计算机，或者可以接收计算机输出数据的外部设备，属于计算机中的硬件部件 鼠标、键盘：典型的输入型设备 显示器：输出型设备 移动硬盘：既可输入又可输出的设备 UNIX系统将外部设备抽象为一种特殊的文件，用户可以使用与文件操作相同的方式对外部设备进行操作【write操作：向外部设备写出数据，read操作：从外部设备读入数据】 按使用特性分类人机交互类外部设备：鼠标、键盘、打印机（数据传输速度慢） 存储设备：移动硬盘、光盘（数据传输速度快） 网络通信设备：调制解调器（数据传输速度介于上述二者之间） 按传输速率分类低速设备：鼠标、键盘，传输速率为每秒几个到几百字节 中速设备：激光打印机，传输速率为每秒数千至上万个字节 高速设备：磁盘，传输速率为每秒数千字节至千兆字节 按信息交换的单位分类块设备：磁盘，数据传输的基本单位是块（传输速率较高，可寻址，即对它可随机的读/写任一块） 字符设备：鼠标、键盘，数据传输的基本单位是字符（传输速率较慢，不可寻址，在输入/输出时常采用中断驱动方式） 中断驱动方式：I/O控制方式的一种","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"I-O控制器","slug":"计算机基础/操作系统原理/I-O控制器","date":"2020-09-20T16:00:00.000Z","updated":"2021-06-17T09:35:54.105Z","comments":true,"path":"2020/09/21/计算机基础/操作系统原理/I-O控制器/","link":"","permalink":"http://example.com/2020/09/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/I-O%E6%8E%A7%E5%88%B6%E5%99%A8/","excerpt":"","text":"I/O设备： 机械部件 电子部件（I/O控制器或称设备控制器） I/O设备的机械部件主要用来执行具体I/O操作，如我们看得见摸得着的鼠标/键盘的按钮、显示器的LED屏、移动硬盘的磁臂、磁盘盘面 I/O设备的电子部件通常是一块插入主板扩充槽的印刷电路板 I/O控制器（用于实现对I/O设备的控制）CPU无法直接控制I/O设备的机械部件，因此I/O设备还要有一个电子部件作为CPU和I/O设备机械部件之间的中介，用于实现CPU对设备的控制，这个电子部件就是I/O控制器，又称设备控制器，CPU可控制I/O控制器，又由I/O控制器来控制设备的机械部件 I/O控制器的功能 接受和识别CPU发出的命令：如CPU发来的read/write命令，I/O控制器中会有相应的控制寄存器来存放命令和参数 向CPU报告设备的状态：I/O控制器中会有相应的状态寄存器，用于记录I/O设备的当前状态，如1表示空闲，0表示忙碌 数据交换：I/O控制器会设置相应的数据寄存器，输出时，数据寄存器用于暂存CPU发来的数据，之后再由控制器传送设备。输入时，数据寄存器用于暂存设备发来的数据，之后CPU从数据寄存器中取走数据 地址识别：类似于内存的地址，为了区分设备控制器中的各个寄存器，也需要给各个寄存器设置一个特定的地址，I/O控制器通过CPU提供的地址来判断CPU要读/写的是哪个寄存器（由I/O逻辑实现） I/O控制器的组成 注意： 一个I/O控制器可能会对应多个设备 数据寄存器、控制寄存器、状态寄存器可能有多个（如每个控制/状态寄存器对应一个具体的设备），且这些寄存器都要有相应的地址，才能方便CPU操作。有的计算机会让这些寄存器占用内存地址的一部分，称为内存映像I/O，另一些计算机则采用I/O专用地址，即寄存器独立编址","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"I-O控制方式","slug":"计算机基础/操作系统原理/I-O控制方式","date":"2020-09-19T16:00:00.000Z","updated":"2021-06-17T09:36:20.087Z","comments":true,"path":"2020/09/20/计算机基础/操作系统原理/I-O控制方式/","link":"","permalink":"http://example.com/2020/09/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/I-O%E6%8E%A7%E5%88%B6%E6%96%B9%E5%BC%8F/","excerpt":"","text":"用什么样的方式来控制I/O设备的数据读/写 程序直接控制方式完成一次读/写操作的流程（以读操作为例） CPU干预的频率：很频繁，I/O操作开始之前、完成之后需要CPU介入，并且在等待I/O完成的过程中CPU需要不断的轮询检查 数据传送的单位：每次读/写一个字 数据的流向：（每个字的读/写都需要CPU的帮助） 读操作（数据输入）：I/O设备 -&gt; CPU寄存器 -&gt; 内存 写操作（数据输出）：内存 -&gt; CPU寄存器 -&gt; I/O设备 主要缺点和主要优点： 优点：实现简单，在读/写指令之后，加上实现循环检查的一系列指令即可（因此才称为程序直接控制方式） 缺点：CPU和I/O设备只能串行工作，CPU需要一直轮询检查，长期处于“忙等”状态，CPU利用率低 中断驱动方式 CPU干预的频率：每次I/O操作开始之前、完成之后需要CPU介入，等待I/O完成的过程中CPU可以切换到别的进程执行 数据传送的单位：每次读/写一个字 数据的流向：（每个字的读/写都需要CPU的帮助） 读操作（数据输入）：I/O设备 -&gt; CPU寄存器 -&gt; 内存 写操作（数据输出）：内存 -&gt; CPU寄存器 -&gt; I/O设备 主要缺点和主要优点： 优点：与程序直接控制方式相比，在中断驱动方式中，I/O控制器会通过中断信号主动报告I/O已完成，CPU不再需要不停的轮询，CPU和I/O设备可并行的工作，CPU利用率得到明显提升 缺点：每个字在I/O设备与内存之间的传输，都需要经过CPU，而频繁的中断处理会消耗较多的CPU时间 DMA方式 CPU干预的频率：仅在传送一个或多个数据块的开始和结束时，才需要CPU干预 数据传送的单位：每次读/写一个或多个块（注意：每次读写的只能是连续的多个块，且这些块读入内存后在内存中也必须是连续的） 数据的流向：（不再需要经过CPU） 读操作（数据输入）：I/O设备 -&gt; 内存 写操作（数据输出）：内存 -&gt; I/O设备 主要缺点和主要优点： 优点：数据传输以块为单位，CPU介入频率进一步降低，数据的传输不再需要先经过CPU再写入内存，数据传输效率进一步增加，CPU和I/O设备的并行性得到提升 缺点：CPU每发出一条I/O指令，只能读/写一个或多个连续的数据块，如果要读/写多个离散存储的数据块，或者要将数据分别写到不同的内存区域时，CPU要分别发出多条I/O指令，进行多次中断处理才能完成 通道控制方式 与CPU相比，通道可以执行的指令很单一，并且通道程序是放在主机内存中的，也就是说通道与CPU共享内存 总结：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"I-O软件层次结构","slug":"计算机基础/操作系统原理/I-O软件层次结构","date":"2020-09-18T16:00:00.000Z","updated":"2021-06-17T09:36:49.260Z","comments":true,"path":"2020/09/19/计算机基础/操作系统原理/I-O软件层次结构/","link":"","permalink":"http://example.com/2020/09/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/I-O%E8%BD%AF%E4%BB%B6%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84/","excerpt":"","text":"用户层软件 设备独立性软件设备独立性软件又称设备无关性软件，与设备的硬件特性无关的功能几乎都在这一层实现 主要实现的功能： 向上层提供统一的调用接口（如read/write系统调用） 设备的保护，原理类似于文件保护，设备被看作是一种特殊的文件，不同用户对各个文件的访问权限是不一样的，同理，对设备的访问权限也不一样 差错处理：设备独立性软件需要对一些设备的错误进行处理 设备的分配与回收 数据缓冲区管理，可以通过缓冲技术屏蔽设备之间数据交换单位大小和传输速度的差异 建立逻辑设备名到物理设备名的映射关系，根据设备类型选择调用相应的驱动程序 为什么不同的I/O设备需要有不同的驱动程序处理？ 各式各样的设备，外形不同，其内部的电子部件（I/O控制器）也有可能不同，不同设备的内部硬件特性也不同，这些特性只有厂家才知道，因此厂家需提供与设备相对应的驱动程序，CPU执行驱动程序的指令序列，来完成设置设备寄存器，检查设备状态等工作 设备驱动程序 驱动程序一般会以一个独立进程的方式存在 ⭐️直接涉及到硬件具体细节、且与中断无关的操作肯定是在设备驱动程序层完成的；没有涉及硬件的、对各种设备都需要进行的管理工作都是在设备独立性软件层完成的 中断处理程序当I/O任务完成时，I/O控制器会发送一个中断信号，系统会根据中断信号类型找到相应的中断处理程序并执行，中断处理程序的处理流程如下： ⭐️设备独立性软件和用户层软件都不会和硬件打交道，设备驱动程序和中断处理程序会和硬件打交道 硬件执行I/O操作，有机械部件、电子部件组成 I/O核心子系统的功能用户层软件实现：假脱机技术（SPOOLing技术） 假脱机技术（SPOOLing技术）需要请求“磁盘设备”的设备独立性软件的服务，因此一般来说假脱机技术是在用户层软件实现的 设备独立性软件实现：I/O调度、设备保护、设备分配与回收、缓冲区管理（缓冲与高速缓存）","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"假脱机技术SPOOLing","slug":"计算机基础/操作系统原理/假脱机技术SPOOLing","date":"2020-09-17T16:00:00.000Z","updated":"2021-06-17T09:37:15.380Z","comments":true,"path":"2020/09/18/计算机基础/操作系统原理/假脱机技术SPOOLing/","link":"","permalink":"http://example.com/2020/09/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E5%81%87%E8%84%B1%E6%9C%BA%E6%8A%80%E6%9C%AFSPOOLing/","excerpt":"","text":"什么是脱机技术，脱机技术可以解决什么问题手工操作阶段：主机直接从I/O设备获得数据，由于设备速度慢，主机速度很快，人机速度矛盾明显，主机要浪费很多时间来等待设备 批处理阶段引入了脱机输入/输出技术（外围控制机+磁带）：脱离主机的控制进行的输入/输出操作 引入脱机技术后，缓解了CPU与慢速I/O设备的速度矛盾。另一方面，即使CPU在忙碌，也可以提前将数据输入到磁带，即使慢速的输出设备正在忙碌，也可以提前将数据输出到磁带 假脱机技术的实现原理假脱机技术又称SPOOLing技术，是用软件的方式模拟脱机技术 输入井和输出井在磁盘上开辟出两个存储区域：输入井和输出井 “输入井”模拟脱机输入时的磁带，用于收容I/O设备输入的数据 “输出井”模拟脱机输出时的磁带，用于收容用户进程输出的数据 输入进程和输出进程要实现SPOOLing技术，必须要有多道程序技术的支持，系统会建立“输入进程”和“输出进程” 输入缓冲区和输出缓冲区注意，输入缓冲区和输出缓冲区是在内存中的缓冲区 在输入进程的控制下，输入缓冲区用于暂存从输入设备输入的数据，之后再转存到输入井中 在输出进程的控制下，输出缓冲区用于暂存从输出井送来的数据，之后再传送到输出设备上 共享打印机的原理分析 虽然系统中只有一台打印机，但每个进程提出打印请求时，系统都会在输出井中为其分配一个存储区（相当于分配了一个逻辑设备），使每个用户进程都觉得自己在独占一台打印机，从而实现对打印机的共享 SPOOLing技术可以把一台物理设备虚拟成逻辑上的多台设备，可将独占式设备改造成共享设备","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"设备的分配与回收","slug":"计算机基础/操作系统原理/设备的分配与回收","date":"2020-09-16T16:00:00.000Z","updated":"2021-06-17T09:37:58.138Z","comments":true,"path":"2020/09/17/计算机基础/操作系统原理/设备的分配与回收/","link":"","permalink":"http://example.com/2020/09/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E8%AE%BE%E5%A4%87%E7%9A%84%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6/","excerpt":"","text":"设备分配时应考虑的因素 设备的固有属性 独占设备：一个时段只能分配给一个进程（打印机） 共享设备：可同时分配给多个进程使用（磁盘），各个进程往往是宏观上同时共享使用设备，而微观上交替使用 虚拟设备：采用SPOOLing技术将独占设备改造成虚拟的共享设备，可同时分配给多个进程使用（共享打印机） 设备分配算法：先来先服务、优先级高者优先、短任务优先。。 设备分配中的安全性 静态分配与动态分配静态分配：进程运行前为其分配全部所需资源，运行结束后归还资源（破坏了“请求和保持”条件，不会发生死锁） 动态分配：进程运行过程中动态申请设备资源 设备分配管理中的数据结构设备、控制器、通道之间的关系：一个通道可控制多个设备控制器，每个设备控制器可控制多个设备 设备控制表DCT：系统为每个设备配置一张DCT，用于记录设备情况 控制器控制表COCT：每个设备控制器都会对应一张COCT，操作系统根据COCT的信息对控制器进行操作和管理 通道控制表CHCT：每个通道都会对应一张CHCT，操作系统根据CHCT的信息对通道进行操作和管理 系统设备表SDT：记录了系统中全部设备的情况，每个设备对应一个表目 设备分配的步骤 只有设备、控制器、通道三者都分配成功时，这次设备分配才算成功，之后便可启动I/O设备进行数据传送 设备分配步骤的改进方法 改进方法：建立逻辑设备名与物理设备名的映射机制，用户编程时只需提供逻辑设备名","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"缓冲区管理","slug":"计算机基础/操作系统原理/缓冲区管理","date":"2020-09-15T16:00:00.000Z","updated":"2021-06-17T09:38:22.870Z","comments":true,"path":"2020/09/16/计算机基础/操作系统原理/缓冲区管理/","link":"","permalink":"http://example.com/2020/09/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/%E7%BC%93%E5%86%B2%E5%8C%BA%E7%AE%A1%E7%90%86/","excerpt":"","text":"什么是缓冲区？有什么作用？缓冲区是一个存储区域，可以由专门的硬件寄存器组成，也可利用内存作为缓冲区 使用硬件作为缓冲区的成本较高，容量也较小，一般仅用在对速度要求非常高的场合（如存储器管理中所用的联想寄存器，由于对页表的访问频率极高，因此使用速度很快的联想寄存器来存放页表项的副本） 一般情况下，更多的是利用内存作为缓冲区，“设备独立性软件”的缓冲区管理就是要组织管理好这些缓冲区 缓冲区的作用：（内存作为缓冲区） 缓和CPU与I/O设备之间速度不匹配的矛盾 减少对CPU的中断频率，放宽对CPU中断相应时间的限制 解决数据粒度不匹配的问题：如输出进程每次可以生成一块数据，但I/O设备每次只能输出一个字符 提高CPU与I/O设备之间的并行性 单缓冲 双缓冲 使用单/双缓冲在通信时的区别： 两台机器之间通信时，可以配置缓冲区用于数据的发送和接收，若两个相互通信的机器只设置单缓冲区，在任一时刻只能实现数据的单向传输，若两个相互通信的机器设置双缓冲区，则同一时刻可以实现双向的数据传输 管道通信中的“管道”其实就是缓冲区，要实现数据的双向传输，必须设置两个管道 循环缓冲将多个大小相等的缓冲区链接成一个循环队列 缓冲池 输入进程请求输入数据：从空缓冲队列中取出一块作为收容输入数据的工作缓冲区，充满数据后将缓冲区挂到输入队列队尾 计算进程想要取得一块输入数据：从输入队列中取得一块充满输入数据的缓冲区作为“提取输入数据的工作缓冲区”，缓冲区读空后挂到空缓冲区队列 计算进程想要将准备好的数据冲入缓冲区：从空缓冲队列中取出一块作为“收容输出数据的工作缓冲区”，数据充满后将缓冲区挂到输出队列队尾 输出进程请求输出数据：从输出队列中取得一块充满输出数据的缓冲区作为“提取输出数据的工作缓冲区”，缓冲区读空后挂到空缓冲区队列","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"}]},{"title":"概念、功能、组成、分类","slug":"计算机基础/计算机网络原理/概念、功能、组成、分类","date":"2020-08-30T16:00:00.000Z","updated":"2021-05-20T09:36:12.159Z","comments":true,"path":"2020/08/31/计算机基础/计算机网络原理/概念、功能、组成、分类/","link":"","permalink":"http://example.com/2020/08/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E6%A6%82%E5%BF%B5%E3%80%81%E5%8A%9F%E8%83%BD%E3%80%81%E7%BB%84%E6%88%90%E3%80%81%E5%88%86%E7%B1%BB/","excerpt":"","text":"概念、功能、组成、分类： 计算机网络：是一个将分散的、具有独立功能的计算机系统，通过通信设备与线路连接起来，由功能完善的软件实现资源共享和信息传递的系统 计算机网络是互连的【互联互通、通信链路】、自治的【无主从关系】计算机集合 计算机网络的功能：1）数据通信（连通性）2）资源共享（硬件、软件、数据）3）分布式处理：多台计算机各自承担同一工作任务的不同部分（Hadoop平台）4）提高可靠性5）负载均衡（各计算机之间更亲密） 计算机网络的组成：1）按组成部分分类：硬件、软件、协议2）按工作方式分类：边缘部分（用户直接使用：C/S方式、P2P方式）、核心部分（为边缘部分服务）3）按功能组成分类：通信子网（实现数据通信）、资源子网（实现资源共享/数据处理） 计算机网络的分类：1）按分布范围分：广域网（WAN、使用交换技术）、城域网（MAN）、局域网（LAN、使用广播技术）、个人区域网（PAN）2）按使用者分：公用网、专用网3）按交换技术分：电路交换、报文交换、分组交换4）按拓扑结构分：总线型、星型、环型、网状型（常用于广域网）5）按传输技术分：广播式网络（共享公共通信信道）、点对点网络（使用分组存储转发和路由选择机制）","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"LeetCode_24_两两交换链表中的节点","slug":"LeetCode🌟/LeetCode_链表/LeetCode_24_两两交换链表中的节点","date":"2020-08-30T16:00:00.000Z","updated":"2021-07-04T09:46:31.404Z","comments":true,"path":"2020/08/31/LeetCode🌟/LeetCode_链表/LeetCode_24_两两交换链表中的节点/","link":"","permalink":"http://example.com/2020/08/31/LeetCode%F0%9F%8C%9F/LeetCode_%E9%93%BE%E8%A1%A8/LeetCode_24_%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/","excerpt":"","text":"题目描述：1234567891011121314151617一般来说，算法题不需要删除内存，在刷LeetCode的时候，如果想要删除一个节点，可以直接进行指针操作而无需回收内存。实际做软件工程时，对于无用的内存，建议尽量显式回收，或利用智能指针给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。示例：输入：head &#x3D; [1,2,3,4]输出：[2,1,4,3]输入：head &#x3D; []输出：[]输入：head &#x3D; [1]输出：[1]提示：1. 链表中节点的数目在范围 [0, 100] 内2. 0 &lt;&#x3D; Node.val &lt;&#x3D; 100 解法1：迭代1234567891011121314151617181920212223242526272829303132/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) &#123;&#125; * ListNode(int x) : val(x), next(nullptr) &#123;&#125; * ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125; * &#125;; */class Solution &#123;public: ListNode* swapPairs(ListNode* head) &#123; ListNode* dummyHead = new ListNode(0,head); ListNode* temp = dummyHead; while (temp-&gt;next != nullptr &amp;&amp; temp-&gt;next-&gt;next != nullptr) &#123; ListNode* node1 = temp-&gt;next; ListNode* node2 = temp-&gt;next-&gt;next; temp-&gt;next = node2; node1-&gt;next = node2-&gt;next; node2-&gt;next = node1; temp = node1; &#125; return dummyHead-&gt;next; &#125;&#125;;","categories":[{"name":"LeetCode🌟","slug":"LeetCode🌟","permalink":"http://example.com/categories/LeetCode%F0%9F%8C%9F/"}],"tags":[{"name":"LeetCode_链表","slug":"LeetCode-链表","permalink":"http://example.com/tags/LeetCode-%E9%93%BE%E8%A1%A8/"}]},{"title":"标准化","slug":"计算机基础/计算机网络原理/标准化","date":"2020-08-29T16:00:00.000Z","updated":"2021-05-20T09:34:52.195Z","comments":true,"path":"2020/08/30/计算机基础/计算机网络原理/标准化/","link":"","permalink":"http://example.com/2020/08/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E6%A0%87%E5%87%86%E5%8C%96/","excerpt":"","text":"标准化： 要实现不同厂商的硬、软件之间相互连通，必须遵守统一的标准 标准的分类：1）法定标准（由权威机构制定的正式的、合法的标准：OSI）2）事实标准（某些公司的产品在竞争中占据了主流，时间长了，这些产品中的协议和技术就成了标准：TCP/IP） RFC（Request For Comments）：因特网标准的形式 RFC要上升为因特网正式标准的四个阶段：1）因特网草案：这个阶段还不是RFC文档2）建议标准：从这个阶段开始成为RFC文档3）因特网标准 标准化工作的相关组织：1）国际标准化组织ISO：OSI参考模型、HDLC协议2）国际电信联盟ITU：制定通信规则3）国际电气电子工程师协会IEEE：学术机构、IEEE802系列标准、5G4）Internet工程任务组IETF：负责因特网相关标准的制定","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"LeetCode_234_回文链表","slug":"LeetCode🌟/LeetCode_链表/LeetCode_234_回文链表","date":"2020-08-29T16:00:00.000Z","updated":"2021-07-04T09:46:56.216Z","comments":true,"path":"2020/08/30/LeetCode🌟/LeetCode_链表/LeetCode_234_回文链表/","link":"","permalink":"http://example.com/2020/08/30/LeetCode%F0%9F%8C%9F/LeetCode_%E9%93%BE%E8%A1%A8/LeetCode_234_%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/","excerpt":"","text":"题目描述：12345678请判断一个链表是否为回文链表。示例：输入: 1-&gt;2输出: false输入: 1-&gt;2-&gt;2-&gt;1输出: true 解法1：双指针12345678910111213141516171819202122232425262728293031323334/** * Definition for singly-linked list. * struct ListNode &#123; * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) &#123;&#125; * ListNode(int x) : val(x), next(nullptr) &#123;&#125; * ListNode(int x, ListNode *next) : val(x), next(next) &#123;&#125; * &#125;; */class Solution &#123;public: bool isPalindrome(ListNode* head) &#123; vector&lt;int&gt; vals; //复制链表值到数组列表中 while (head != nullptr) &#123; vals.emplace_back(head-&gt;val); head = head-&gt;next; &#125; //使用双指针法判断是否为回文 for (int i = 0, j = (int)vals.size() - 1; i &lt; j; ++i, --j) &#123; if (vals[i] != vals[j]) &#123; return false; &#125; &#125; return true; &#125;&#125;;","categories":[{"name":"LeetCode🌟","slug":"LeetCode🌟","permalink":"http://example.com/categories/LeetCode%F0%9F%8C%9F/"}],"tags":[{"name":"LeetCode_链表","slug":"LeetCode-链表","permalink":"http://example.com/tags/LeetCode-%E9%93%BE%E8%A1%A8/"}]},{"title":"速率、带宽、吞吐量","slug":"计算机基础/计算机网络原理/速率、带宽、吞吐量","date":"2020-08-28T16:00:00.000Z","updated":"2021-05-20T09:38:23.958Z","comments":true,"path":"2020/08/29/计算机基础/计算机网络原理/速率、带宽、吞吐量/","link":"","permalink":"http://example.com/2020/08/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E9%80%9F%E7%8E%87%E3%80%81%E5%B8%A6%E5%AE%BD%E3%80%81%E5%90%9E%E5%90%90%E9%87%8F/","excerpt":"","text":"速率、带宽、吞吐量： 速率：即数据率、数据传输率、比特率，连接在计算机网络上的主机在数字信道上传送数据位数的速率（b/s、kb/s、Mb/s、Gb/s、Tb/s） 带宽：原本指某个信号具有的频带宽度，即最高频率与最低频率之差，单位是赫兹（Hz）；计算机网络中，带宽用来表示网络的通信线路传送数据的能力，通常是指单位时间内从网络中的某一点到另一点所能通过的最高数据率（b/s、kb/s、Mb/s、Gb/s、Tb/s），网络设备所支持的最高速度 吞吐量：表示在单位时间内通过某个网络（或信道、接口）的数据量（b/s、kb/s、Mb/s、Gb/s、Tb/s），吞吐量受网络的带宽或网络的额定速率的限制","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"时延、时延带宽积、往返时间RTT、利用率","slug":"计算机基础/计算机网络原理/时延、时延带宽积、往返时间RTT、利用率","date":"2020-08-27T16:00:00.000Z","updated":"2021-05-20T09:37:47.756Z","comments":true,"path":"2020/08/28/计算机基础/计算机网络原理/时延、时延带宽积、往返时间RTT、利用率/","link":"","permalink":"http://example.com/2020/08/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E6%97%B6%E5%BB%B6%E3%80%81%E6%97%B6%E5%BB%B6%E5%B8%A6%E5%AE%BD%E7%A7%AF%E3%80%81%E5%BE%80%E8%BF%94%E6%97%B6%E9%97%B4RTT%E3%80%81%E5%88%A9%E7%94%A8%E7%8E%87/","excerpt":"","text":"时延、时延带宽积、往返时间RTT、利用率 时延：指数据（报文/分组/比特流）从网络（或链路）的一端传送到另一端所需的时间，也叫延迟或迟延，单位是s 1）发送时延（传输时延）：从发送分组的第一个比特算起，到该分组的最后一个比特发送完毕所需的时间【计算公式：数据长度/信道带宽（发送速率）】2）传播时延：取决于电磁波传播速度和链路长度【公式：信道长度/电磁波在信道上的传播速率】3）排队时延：等待输出/入链路可用4）处理时延：检错、找出口 高速链路只是提高了信道带宽，减小了发送时延，但是传播时延和传播速率是不变的 时延带宽积（bit）：传播时延（s）*带宽（b/s），又称为以比特为单位的链路长度，即“某段链路现在有多少比特” 往返时延RTT：从发送方发送数据开始，到发送方收到接收方的确认（接收方收到数据后立即发送确认），总共经过的时延；RTT越大，在收到确认之前，可以发送的数据越多 RTT包括：往返传播时延=传播时延*2、末端处理时间【不包括发送时延】 利用率：信道利用率【有数据通过时间/有+无数据通过时间】、网络利用率（信道利用率加权平均值）","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"分层结构、协议、接口、服务","slug":"计算机基础/计算机网络原理/分层结构、协议、接口、服务","date":"2020-08-26T16:00:00.000Z","updated":"2021-05-20T09:35:48.977Z","comments":true,"path":"2020/08/27/计算机基础/计算机网络原理/分层结构、协议、接口、服务/","link":"","permalink":"http://example.com/2020/08/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E5%88%86%E5%B1%82%E7%BB%93%E6%9E%84%E3%80%81%E5%8D%8F%E8%AE%AE%E3%80%81%E6%8E%A5%E5%8F%A3%E3%80%81%E6%9C%8D%E5%8A%A1/","excerpt":"","text":"分层结构、协议、接口、服务： 发送文件前要完成的工作：1）发起通信的计算机必须将数据通信的通路进行激活2）要告诉网络如何识别目的主机3）发起通信的计算机要查明目的主机是否开机，并且与网络连接正常4）发起通信的计算机要弄清楚，对方计算机中文件管理程序是否已经做好准备工作5）确保差错和意外可以解决 分层的基本原则：1）各层之间相互独立，每层只实现一种相对独立的功能2）每层之间界面自然清晰，易于理解，相互交流尽可能少3）结构上可分割开，每层都采用最合适的技术来实现4）保持下层对上层的独立性，上层单向使用下层提供的服务5）整个分层结构应该能促进标准化工作 1）网络体系结构是从功能上描述计算机网络结构2）计算机网络体系结构简称网络体系结构，是分层结构3）每层遵循某个/些网络协议以完成本层功能4）计算机网络体系结构是计算机网络的各层及其协议的集合5）第n层在向n+1层提供服务时，此服务不仅包含第n层本身的功能，还包含由下层服务提供的功能6）仅仅在相邻层间有接口，且所提供服务的具体实现细节对上一层完全屏蔽7）体系结构是抽象的，而实现是指能运行的一些软件和硬件","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"7层OSI参考模型","slug":"计算机基础/计算机网络原理/7层OSI参考模型","date":"2020-08-25T16:00:00.000Z","updated":"2021-05-20T09:34:27.546Z","comments":true,"path":"2020/08/26/计算机基础/计算机网络原理/7层OSI参考模型/","link":"","permalink":"http://example.com/2020/08/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/7%E5%B1%82OSI%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"7层OSI参考模型： 为了支持异构网络系统的互联互通，国际标准化组织ISO于1984年提出开放系统互连（OSI）参考模型 应用层：用户与网络的界面，所有能和用户交互产生网络流量的程序【文件传输(FTP)、电子邮件(SMTP)、万维网(HTTP)】 表示层：用于处理在两个通信系统中交换信息的表示方式（语法和语义）【功能：数据格式变换、数据加密解密、数据压缩和恢复】【主要协议：JPEG、ASCII】 会话层：向表示层实体/用户进程提供建立连接并在连接上有序的传输数据，这是会话，也是建立同步(SYN)【功能：建立、管理、终止会话；使用校验点可使会话在通信失效时从校验点/同步点继续恢复通信，实现数据同步，适用于传输大文件】【主要协议：ADSP、ASP】 传输层：负责主机中两个进程的通信，即端到端的通信，传输单位是报文段或用户数据段【功能：可靠传输、不可靠传输；差错控制；流量控制；复用分用(复用：多个应用层进程可同时使用下面运输层的服务；分用：运输层把收到的信息分别交付给上面应用层中相应的进程)】【主要协议：TCP、UDP】 网络层：主要任务是把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务，网络层传输单位是数据报【功能：路由选择、最佳路径；流量控制；差错控制；拥塞控制(若所有结点都来不及接受分组，而要丢弃大量分组的话，网络就处于拥塞状态。因此要采取一定措施，缓解这种拥塞)】【主要协议：IP、IPX、ICMP、IGMP、ARP、RARP、OSPF】 数据链路层：主要任务是把网络层传下来的数据报组装成帧，数据链路层/链路层的传输单位是帧【功能：成帧(定义帧的开始和结束)；差错控制(帧错+位错)；流量控制；访问(接入)控制(控制对信道的访问)】【主要协议：SDLC、HDLC、PPP、STP】 物理层：主要任务是在物理媒体上实现比特流的透明传输，物理层传输单位是比特(透明传输：指不管所传数据是什么样的比特组合，都应当能够在链路上传送)【功能：定义接口特性；定义传输模式(单工、半双工、双工)；定义传输速率；比特同步；比特编码】【主要协议：Rj45、802.3】","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"4层TCP/IP参考模型","slug":"计算机基础/计算机网络原理/4层TCP:IP参考模型","date":"2020-08-24T16:00:00.000Z","updated":"2021-05-20T09:34:05.491Z","comments":true,"path":"2020/08/25/计算机基础/计算机网络原理/4层TCP:IP参考模型/","link":"","permalink":"http://example.com/2020/08/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/4%E5%B1%82TCP:IP%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"4层TCP/IP参考模型： OSI参考模型与TCP/IP参考模型： 相同点：1）都分层2）基于独立的协议栈的概念3）可以实现异构网络互联 不同点：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"5层参考模型","slug":"计算机基础/计算机网络原理/5层参考模型","date":"2020-08-23T16:00:00.000Z","updated":"2021-05-20T09:34:16.180Z","comments":true,"path":"2020/08/24/计算机基础/计算机网络原理/5层参考模型/","link":"","permalink":"http://example.com/2020/08/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/5%E5%B1%82%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"5层参考模型： 5层参考模型的数据封装与解封装：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"物理层基本概念","slug":"计算机基础/计算机网络原理/物理层基本概念","date":"2020-08-22T16:00:00.000Z","updated":"2021-05-20T09:39:59.900Z","comments":true,"path":"2020/08/23/计算机基础/计算机网络原理/物理层基本概念/","link":"","permalink":"http://example.com/2020/08/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E7%89%A9%E7%90%86%E5%B1%82%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","excerpt":"","text":"物理层基本概念： 物理层解决如何在连接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体 物理层主要任务：确定与传输媒体接口有关的一些特性(定义标准)1）机械特性：定义物理连接的特性，规定物理连接时所采用的规格、接口形状、引线数目、引脚数量和排列情况2）电气特性：规定传输二进制位时，线路上信号的电压范围、阻抗匹配、传输速率和距离限制等3）功能特性：指明某条线上出现的某一电平表示何种意义，接口部件的信号线的用途4）规程特性：（过程特性）定义各条物理线路的工作规程和时序关系","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"数据通信基础知识","slug":"计算机基础/计算机网络原理/数据通信基础知识","date":"2020-08-21T16:00:00.000Z","updated":"2021-05-20T09:38:10.858Z","comments":true,"path":"2020/08/22/计算机基础/计算机网络原理/数据通信基础知识/","link":"","permalink":"http://example.com/2020/08/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/","excerpt":"","text":"数据通信基础知识： 典型的数据通信模型： 通信的目的是传送消息 数据：传送信息的实体，通常是有意义的符号序列 信号：数据的电气/电磁的表现，是数据在传输过程中的存在形式【数字信号：代表消息的参数取值是离散的；模拟信号：代表消息的参数取值是连续的】 信源：产生和发送数据的源头 信宿：接收数据的终点 信道：信号的传输媒介，一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道【按传输信号分：模拟信道(传送模拟信号)、数字信道(传送数字信号)；按传输介质分：无线信道、有线信道】 三种通信方式：1）单工通信：只有一个方向的通信而没有反方向的交互，仅需要一条信道2）半双工通信：通信的双方都可以发送或接收信息，但任何一方都不能同时发送和接收，需要两条信道3）全双工通信：通信双方可以同时发送和接收信息，也需要两条信道 两种数据传输方式：1）串形传输：速度慢，费用低，适合远距离2）并行传输：速度快，费用高，适合近距离，用于计算机内部数据传输","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"码元、波特、速率、带宽","slug":"计算机基础/计算机网络原理/码元、波特、速率、带宽","date":"2020-08-20T16:00:00.000Z","updated":"2021-05-20T09:37:25.009Z","comments":true,"path":"2020/08/21/计算机基础/计算机网络原理/码元、波特、速率、带宽/","link":"","permalink":"http://example.com/2020/08/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E7%A0%81%E5%85%83%E3%80%81%E6%B3%A2%E7%89%B9%E3%80%81%E9%80%9F%E7%8E%87%E3%80%81%E5%B8%A6%E5%AE%BD/","excerpt":"","text":"码元、波特、速率、带宽： 码元是指用一个固定时长的信号波形（数字脉冲），代表不同离散数值的基本波形，是数字通信中数字信号的计量单位，这个时长内的信号称为k进制码元，而该时长称为码元宽度，当码元的离散状态有M个时（M大于2），此时码元为M进制码元；一码元可以携带多个比特的信息量，例如在使用二进制编码时，只有两种不同的码元，一种代表0状态，另一种代表1状态 速率也叫数据率，是指数据的传输速率（注意区分传播速率），表示单位时间内传输的数据量，可以用码元传输速率和信息传输速率表示 码元传输速率：别名码元速率、波形速率、调制速率、符号速率等，它表示单位时间内数字通信系统所传输的码元个数（也可称为脉冲个数或信号变化的次数），单位是波特（Baud），1波特表示数字通信系统每秒传输一个码元，这里的码元可以是多进制的，也可以是二进制的，但码元速率与进制数无关【1s传输多少个码元】 信息传输速率：别名信息速率、比特率等，表示单位时间内数字通信系统传输的二进制码元个数（即比特数），单位是比特/秒（b/s）【1s传输多少个比特】 关系：若一个码元携带n bit的信息量，则M Baud的码元传输速率所对应的信息传输速率为M*n bit/s 带宽：表示在单位时间内从网络中的某一点到另一点所能通过的“最高数据率”，常用来表示网络的通信线路所能传输数据的能力，单位是b/s","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"奈式准则和香农定理","slug":"计算机基础/计算机网络原理/奈式准则和香农定理","date":"2020-08-19T16:00:00.000Z","updated":"2021-05-20T09:37:36.609Z","comments":true,"path":"2020/08/20/计算机基础/计算机网络原理/奈式准则和香农定理/","link":"","permalink":"http://example.com/2020/08/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E5%A5%88%E5%BC%8F%E5%87%86%E5%88%99%E5%92%8C%E9%A6%99%E5%86%9C%E5%AE%9A%E7%90%86/","excerpt":"","text":"奈式准则和香农定理： 失真： 失真的一种现象：码间串扰（接收端收到的信号波形失去了码元之间清晰界限的现象） 奈式准则（奈奎斯特定理）：在理想低通（无噪声，带宽受限）条件下，为了避免码间串扰，极限码元传输速率为2W Baud，W是信道带宽，单位是Hz【只有在这两个公式这带宽才用Hz】 理想低通信道下的极限数据传输率=2Wlog2V（b/s） 1）在任何信道中，码元传输的速率是有上限的，若传输速率超过此上限，就会出现严重的码间串扰问题，使接收端对码元的完全正确识别成为不可能2）信道的频带越宽（即能通过的信号高频分量越多），就可以用更高的速率进行码元的有效传输3）奈式准则给出了码元传输速率的限制，但并没有对信息传输速率给出限制4）由于码元的传输速率受奈式准则的制约，所以要提高数据的传输速率，就必须设法使每个码元能携带更多个比特的信息量，这就需要采用多元制的调制方法 香农定理： 噪声存在于所有的电子设备和通信信道中，由于噪声随机产生，它的瞬时值有时会很大，因此噪声会使接收端对码元的判决产生错误。但是噪声的影响是相对的，若信号较强，那么噪声影响相对较小。因此信噪比就很重要 信噪比=信号的平均功率/噪声的平均功率，常记为S/N，并用分贝（dB）作为度量单位，即：信噪比（dB）=10log10(S/N)【注意题目中有没有dB这个单位】 香农定理：在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值 信道的极限数据传输速率=Wlog2(1+S/N)(b/s) 1）信道的带宽或信道中的信噪比越大，则信息的极限传输速率就越高2）对一定的传输带宽和一定的信噪比，信息传输速率的上限就确定了3）只要信息的传输速率低于信道的极限传输速率，就一定能找到某种方法来实现无差错的传输4）香农定理得出的为极限信息传输速率，实际信道能达到的传输速率要比它低不少5）从香农定理可以看出，若信道带宽W或信噪比S/N没有上限（不可能），那么信道的极限信息传输速率也就没有上限 取最小值：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"编码与调制","slug":"计算机基础/计算机网络原理/编码与调制","date":"2020-08-18T16:00:00.000Z","updated":"2021-05-20T09:34:40.442Z","comments":true,"path":"2020/08/19/计算机基础/计算机网络原理/编码与调制/","link":"","permalink":"http://example.com/2020/08/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E7%BC%96%E7%A0%81%E4%B8%8E%E8%B0%83%E5%88%B6/","excerpt":"","text":"编码与调制： 信道：信号的传输媒介，一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道【按传输信号分：模拟信道(传送模拟信号)、数字信道(传送数字信号)；按传输介质分：无线信道、有线信道】 信道上传送的信号：1）基带信号：将数字信号1和0直接用两种不同的电压表示，再送到数字信道上去传输（基带传输）【来自信源的信号，像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号，基带信号就是发出的直接表达了要传输的信息的信号，比如我们说话的声波就是基带信号】2）宽带信号：将基带信号进行调制后形成的频分复用模拟信号，再传送到模拟信道上去传输（宽带传输）【把基带信号经过载波调制后，把信号的频率范围搬移到较高的频段以便在信道中传输（即仅在一段频率范围内能够通过信道】 在传输距离较近时，计算机网络采用基带传输方式（近距离衰减小，从而信号内容不易发生变化）在传输距离较远时，计算机网络采用宽带传输方式（远距离衰减大，即使信号变化大也能最后过滤出来基带信号） 编码与调制： 数字数据编码为数字信号： 数字数据调制为模拟信号：数字数据调制技术在发送端将数字信号转换为模拟信号，而在接收端将模拟信号还原为数字信号，分别对应于调制解调器的调制和解调过程 模拟数据编码为数字信号： 模拟数据调制为模拟信号：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"物理层传输介质","slug":"计算机基础/计算机网络原理/物理层传输介质","date":"2020-08-17T16:00:00.000Z","updated":"2021-05-20T09:39:47.419Z","comments":true,"path":"2020/08/18/计算机基础/计算机网络原理/物理层传输介质/","link":"","permalink":"http://example.com/2020/08/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E7%89%A9%E7%90%86%E5%B1%82%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/","excerpt":"","text":"物理层传输介质： 传输介质也称传输媒体/传输媒介，它就是数据传输系统中在发送设备和接收设备之间的物理通路 传输媒体并不是物理层，传输媒体在物理层的下面，因为物理层是体系结构的第一层，因此有时称传输媒体为0层。在传输媒体中传输的是信号但传输媒体并不知道所传输的信号代表什么意思，但物理层规定了电气特性，因此能够识别所传送的比特流 传输介质：1）导向性传输介质：电磁波被导向沿着固体媒介(铜线/光纤)传播2）非导向性传输介质：自由空间，介质可以是空气、真空、海水等 导向性传输介质: 1）双绞线2）同轴电缆3）光纤特点：传输损耗小，中继距离长，对远距离传输特别经济；抗雷电和电磁干扰性能好；无串音干扰，保密性好，也不易被窃听或截取数据；体积小，重量轻 非导向性传输介质：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"物理层设备","slug":"计算机基础/计算机网络原理/物理层设备","date":"2020-08-16T16:00:00.000Z","updated":"2021-05-20T09:40:10.733Z","comments":true,"path":"2020/08/17/计算机基础/计算机网络原理/物理层设备/","link":"","permalink":"http://example.com/2020/08/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E7%89%A9%E7%90%86%E5%B1%82%E8%AE%BE%E5%A4%87/","excerpt":"","text":"物理层设备： ———————————————— 中继器： 诞生原因：由于存在损耗，在线路上传输的信号功率会逐渐衰减，衰减到一定程度时将造成信号失真，因此会导致接收错误 中继器的功能：对信号进行再生和还原，对衰减的信号进行放大，保持与原数据相同，以增加信号传输的距离，延长网络的长度【再生数字信号】 中继器的两端：1）两端的网络部分是网段，而不是子网，适用于完全相同的两类网络的互连，且两个网段速率要相同2）中继器只将任何电缆段上的数据发送到另一段电缆上，它仅作用于信号的电气部分，并不管数据中是否有错误数据或不适于网段的数据3）两端可连相同媒体，也可连不同媒体4）中继器两端的网段一定要是同一个协议（中继器不会存储转发） 5-4-3规则：网络标准中都对信号的延迟范围作了具体的规定，因而中继器只能在规定的范围内进行，否则会网络故障 ————————————————— 集线器（多口中继器）：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"数据链路层基本概念","slug":"计算机基础/计算机网络原理/数据链路层基本概念","date":"2020-08-15T16:00:00.000Z","updated":"2021-05-20T09:37:59.624Z","comments":true,"path":"2020/08/16/计算机基础/计算机网络原理/数据链路层基本概念/","link":"","permalink":"http://example.com/2020/08/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","excerpt":"","text":"数据链路层基本概念： 结点：主机、路由器 链路：网络中两个结点之间的物理通道，链路的传输介质主要有双绞线、光纤和微波，分为有线链路、无线链路 数据链路：网络中两个结点之间的逻辑通道，把实现控制数据传输协议的硬件和软件加到链路上就构成了数据链路 帧：链路层的协议数据单元，封装网络层数据报 数据链路层负责通过一条链路从一个结点向另一个物理链路直接相连的相邻结点传送数据报 数据链路层功能概述：数据链路层在物理层提供服务的基础上向网络层提供服务，其最基本的服务是将源自网络层来的数据可靠的传输到相邻节点的目标机网络层。其主要作用是加强物理层传输原始比特流的功能，将物理层提供的可能出错的物理连接改造成为逻辑上无差错的数据链路，使之对网络层表现为一条无差错的链路 1）为网络层提供服务：无确认无连接服务【通信质量好，有线传输链路】、有确认无连接服务、有确认面向连接服务【有连接一定有确认】【通信质量差的无线传输链路】2）链路管理，即连接的建立、维持、释放（用于面向连接的服务）3）组帧4）流量控制5）差错控制（帧错/位错）","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"封装成帧和透明传输","slug":"计算机基础/计算机网络原理/封装成帧和透明传输","date":"2020-08-14T16:00:00.000Z","updated":"2021-05-20T09:36:00.928Z","comments":true,"path":"2020/08/15/计算机基础/计算机网络原理/封装成帧和透明传输/","link":"","permalink":"http://example.com/2020/08/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E5%B0%81%E8%A3%85%E6%88%90%E5%B8%A7%E5%92%8C%E9%80%8F%E6%98%8E%E4%BC%A0%E8%BE%93/","excerpt":"","text":"封装成帧和透明传输： 封装成帧就是在一段数据的前后部分添加首部和尾部，这样就构成了一个帧。接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束 首部和尾部包含许多的控制信息，他们的一个重要作用：帧定界（确定帧的界限） 帧同步：接收方应当能从接收到的二进制比特流中区分出帧的起始和终止 组帧的四种方法：字符计数法、字符（节）填充法、零比特填充法、违规编码法 透明传输是指不管所传数据是什么样的比特组合，都应当能够在链路上传送。因此，链路层就“看不见”有什么妨碍数据传输的东西 当所传数据中的比特组合恰巧与某一个控制信息完全一样时，就必须采取适当的措施，使收方不会将这样的数据误认为是某种控制信息。这样才能保证数据链路层的传输是透明的 字符计数法： 字符填充法： 零比特填充法： 违规编码法：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"差错控制","slug":"计算机基础/计算机网络原理/差错控制","date":"2020-08-13T16:00:00.000Z","updated":"2021-05-20T09:35:04.929Z","comments":true,"path":"2020/08/14/计算机基础/计算机网络原理/差错控制/","link":"","permalink":"http://example.com/2020/08/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E5%B7%AE%E9%94%99%E6%8E%A7%E5%88%B6/","excerpt":"","text":"差错控制： 概括来说，传输中的差错都是由于噪声引起的 1）全局性：由于线路本身电气特性所产生的随机噪声(热噪声)，是信道固有的，随机存在的【解决办法：提高信噪比来减少或避免干扰(对传感器下手)】2）局部性：外界特定的短暂原因所造成的冲击噪声，是产生差错的主要原因【解决办法：通常利用编码技术来解决】 检错编码：纠错编码：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"流量控制与可靠传输机制","slug":"计算机基础/计算机网络原理/流量控制与可靠传输机制","date":"2020-08-12T16:00:00.000Z","updated":"2021-05-20T09:36:49.107Z","comments":true,"path":"2020/08/13/计算机基础/计算机网络原理/流量控制与可靠传输机制/","link":"","permalink":"http://example.com/2020/08/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93%E6%9C%BA%E5%88%B6/","excerpt":"","text":"流量控制与可靠传输机制： 数据链路层的流量控制：较高的发送速度和较低的接收能力的不匹配，会造成传输出错，因此流量控制也是数据链路层的一项重要工作 数据链路层的流量控制是点对点的，而传输层的流量控制是端到端的 数据链路层流量控制的手段：接收方收不下就不回复确认传输层流量控制的手段：接收端给发送端一个窗口公告 流量控制的方法：1）停止-等待协议：每发送完一个帧就停止发送，等待对方的确认，在收到确认后再发送下一个帧2）滑动窗口协议：后退N帧协议(GBN)、选择重传协议(SR) 停止-等待协议：发送窗口大小=1，接收窗口大小=1后退N帧协议(GBN)：发送窗口大小&gt;1，接收窗口大小=1选择重传协议(SR)：发送窗口大小&gt;1，接收窗口大小&gt;1 可靠传输、流量控制、滑动窗口： ———————————— 停止等待协议： 为什么要有停止等待协议：除了比特出差错，底层信道还会出现丢包问题，为了实现流量控制【丢包：物理线路故障、设备故障、病毒攻击、路由信息错误等原因，会导致数据包的丢失】 研究停止等待协议的前提：1）虽然现在常用全双工通信方式，但为了讨论问题方便，仅考虑一方发送数据（发送方），一方接收数据（接收方）2）因为是在讨论可靠传输的原理，所以并不考虑数据是在哪一个层次上传送的 停止等待协议的几种应用情况：1）无差错情况2）有差错情况 停止等待协议的性能分析：简单、信道利用率太低 信道利用率：发送方在一个发送周期内，有效的发送数据所需要的时间占整个发送周期的比率 信道利用率=(L/C)/TL：T内发送L比特数据C：发送方数据传输率T；发送周期，从开始发送数据，到收到第一个确认帧为止 信道吞吐率：信道利用率*发送方的发送速率 停止等待协议的弊端： 流水线技术：必须增加序号范围、发送方需要缓存多个分组 ————————————— 后退N帧协议(GBN)： 后退N帧协议中的滑动窗口： GBN发送方必须响应的三件事：1）上层的调用：上层要发送数据时，发送方先检查发送窗口是否已满，如果未满，则产生一个帧并将其发送；如果窗口已满，发送方只需将数据返回给上层，暗示上层窗口已满。上层等一会再发送（实际实现中，发送方可以缓存这些数据，窗口不满时再发送帧）2）收到了一个ACK：GBN协议中，对n号帧的确认采用累计确认的方式，标明接收方已经收到n号帧和它之前的全部帧3）超时事件：协议的名字为后退N帧/回退N帧，来源于出现丢失和时延过长帧时发送方的行为。就像在停等协议中一样，定时器将再次用于恢复数据帧或确认帧的丢失，如果出现超时，发送方重传所有已发送但未被确认的帧 GBN接收方要做的事：1）如果正确收到n号帧，并且按序，那么接收方为n帧发送一个ACK，并将该帧中的数据部分交付给上层2）其余情况都丢弃帧，并为最近按序接收的帧重新发送ACK，接收方无需缓存任何失序帧，只需要维护一个信息：expectedseqnum（下一个按序接收的帧序号）【接收方只按序接收帧，不按序无情丢弃】【确认序列号最大的，按序到达的帧】滑动窗口长度：若采用n个比特对帧编号，那么发送窗口的尺寸WT应满足：1&lt;=WT&lt;=2^n-1，因为发送窗口尺寸过大，就会使得接收方无法区别新帧和旧帧 GBN协议性能分析：1）因连续发送数据帧而提高了信道利用率2）在重传时必须把原来已经正确传送的数据帧重传，使得传送效率降低 ————————————— 选择重传协议(SR)： 解决GBN的弊端：可不可以只重传出错的帧？设置单个确认，同时加大接收窗口，设置接收缓存，缓存乱序到达的帧 选择重传协议中的滑动窗口： SR发送方必须要响应的三件事：1）上层的调用：从上层收到数据后，SR发送方检查下一个可用于该帧的序号，如果序号位于发送窗口内，则发送数据帧，否则就像GBN一样，要么将数据缓存，要么返回给上层之后再传输2）收到了一个ACK：如果收到ACK，假如该帧序号在窗口内，则SR发送方将那个被确认的帧标记为已接收。如果该帧序号是窗口的下界（最左边第一个窗口对应的序号），则窗口向前移动到具有最小序号的未确认帧处，如果窗口移动了并且有序号在窗口内的未发送帧，则发送这些帧3）超时事件：每个帧都有自己的定时器，一个超时事件发生后只重传一个帧【只重传出错帧】 SR接收方要做的事：窗口内的帧来者不拒滑动窗口的长度：发送窗口最好等于接收窗口（大了会溢出，小了没意义）【WTmax=WRmax=2^(n-1)】","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"信道划分介质访问控制","slug":"计算机基础/计算机网络原理/信道划分介质访问控制","date":"2020-08-11T16:00:00.000Z","updated":"2021-05-20T09:40:23.751Z","comments":true,"path":"2020/08/12/计算机基础/计算机网络原理/信道划分介质访问控制/","link":"","permalink":"http://example.com/2020/08/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E4%BF%A1%E9%81%93%E5%88%92%E5%88%86%E4%BB%8B%E8%B4%A8%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/","excerpt":"","text":"信道划分介质访问控制： 传输数据使用的两种链路：1）点对点链路：两个相邻节点通过一个链路相连，没有第三者。【应用：PPP协议，常用于广域网】2）广播式链路：所有主机共享通信介质【应用：早期的总线以太网、无线局域网。常用于局域网】【典型拓扑结构：总线型、星型(逻辑总线型)】 介质访问控制：采取一定的措施，使得两对节点之间的通信不会发生相互干扰的现象信道划分介质访问控制：将使用介质的每个设备与来自同一信道上的其他设备的通信隔离开，把时域和频域资源合理的分配给网络上的设备 1）频分多路复用FDM 2）时分多路复用TDM 3）改进的时分复用—统计时分复用STDM 4）波分多路复用WDM：波分多路复用就是光的频分多路复用，在一根光纤中传输多种不同波长（频率）的光信号，由于波长（频率）不同，所以各路光信号互不干扰，最后再用波长分解复用器将各路波长分解出来 5）码分多路复用CDM：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"ALOHA协议","slug":"计算机基础/计算机网络原理/ALOHA协议","date":"2020-08-10T16:00:00.000Z","updated":"2021-05-20T09:41:10.932Z","comments":true,"path":"2020/08/11/计算机基础/计算机网络原理/ALOHA协议/","link":"","permalink":"http://example.com/2020/08/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/ALOHA%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"ALOHA协议： 1）纯ALOHA协议：不监听信道，不按时间槽发送，随机重发【想发就发】 2）时隙ALOHA协议：把时间分成若干个相同的时间片，所有用户在时间片开始时刻同步接入网络信道，若发生冲突，则必须等到下一个时间片开始时刻再发送【控制想发就发的随意性】 纯ALOHA协议比时隙ALOHA吞吐量更低，效率更低纯ALOHA想发就发，时隙ALOHA只有在时间片段开始时才能发","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"CSMA协议","slug":"计算机基础/计算机网络原理/CSMA协议","date":"2020-08-09T16:00:00.000Z","updated":"2021-05-20T09:42:06.763Z","comments":true,"path":"2020/08/10/计算机基础/计算机网络原理/CSMA协议/","link":"","permalink":"http://example.com/2020/08/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/CSMA%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"CSMA协议： 载波监听多路访问协议CSMA CS：载波监听，每一个站在发送数据之前要检测一下总线上是否有其他计算机在发送数据【当几个站同时在总线上发送数据时，总线上的信号电压摆动值将会增大(互相叠加)，当一个站检测到的信号电压摆动值超过一定门限值时，就认为总线上至少有两个站同时在发送数据，表明产生了碰撞，即发生了冲突】 MA：多点接入，表示许多计算机以多点接入的方式连接在一根总线上 协议思想：发送帧之前，监听信道 监听结果：1）信道空闲：发送完整帧【1-坚持CSMA、非坚持CSMA、p-坚持CSMA】2）信道忙：推迟发送 1-坚持CSMA： 非坚持CSMA： p-坚持CSMA： 有没有什么办法可以减少资源浪费，一冲突就能发现呢？？","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"CSMA-CD协议","slug":"计算机基础/计算机网络原理/CSMA-CD协议","date":"2020-08-08T16:00:00.000Z","updated":"2021-05-20T09:41:55.465Z","comments":true,"path":"2020/08/09/计算机基础/计算机网络原理/CSMA-CD协议/","link":"","permalink":"http://example.com/2020/08/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/CSMA-CD%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"CSMA-CD协议： 载波监听多点接入/碰撞检测CSMA/CD CS：载波监听，每一个站在发送数据之前以及发送数据时都要检测一下总线上是否有其他计算机在发送数据 MA：多点接入，表示许多计算机以多点接入的方式连接在一根总线上（总线型网络） CD：碰撞检测（冲突检测），“边发送边监听”，适配器边发送数据边检测信道上信号电压的变化情况，以便判断自己在发送数据时其他站是否也在发送数据（半双工网络） 先听后发为什么还会冲突：因为电磁波在总线上总是以有限的速率传播的 传播时延对载波监听的影响： 如何确定碰撞后的重传时机： 最小帧长问题：A站发了一个很短的帧，但发生了碰撞，不过帧在发送完毕后才检测到发生碰撞，没法停止发送，因为已经发完了。。。","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"CSMA-CA协议","slug":"计算机基础/计算机网络原理/CSMA-CA协议","date":"2020-08-07T16:00:00.000Z","updated":"2021-05-20T09:41:43.787Z","comments":true,"path":"2020/08/08/计算机基础/计算机网络原理/CSMA-CA协议/","link":"","permalink":"http://example.com/2020/08/08/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/CSMA-CA%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"CSMA-CA协议： 载波监听多点接入/碰撞避免CSMA/CA 为什么有了CSMA-CD后还要有CSMA-CA：CSMA-CA多用于无线局域网，无线局域网无法做到360度全面检测碰撞、隐蔽站(当A和C都检测不到信号，认为信道空闲时，同时像终端B发送数据帧，就会导致冲突) CSMA-CA协议工作原理： CSMA-CD与CSMA-CA：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"轮询访问介质访问控制","slug":"计算机基础/计算机网络原理/轮询访问介质访问控制","date":"2020-08-06T16:00:00.000Z","updated":"2021-05-20T09:37:11.612Z","comments":true,"path":"2020/08/07/计算机基础/计算机网络原理/轮询访问介质访问控制/","link":"","permalink":"http://example.com/2020/08/07/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E8%BD%AE%E8%AF%A2%E8%AE%BF%E9%97%AE%E4%BB%8B%E8%B4%A8%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/","excerpt":"","text":"轮询访问介质访问控制： 介质访问控制：1）信道划分介质访问控制协议：基于多路复用技术划分资源；网络负载重的时候共享信道效率高，且公平；网络负载轻的时候共享信道效率低2）随机访问MAC协议：用户根据意愿随机发送信息，发送信息时可独占信道带宽；网络负载重时产生冲突开销；网络负载轻时共享信道效率高，单个结点可利用信道全部带宽3）轮询访问MAC协议：既要不产生冲突，又要发送时占全部带宽 轮询协议：主结点轮流邀请从属结点发送数据【问题：轮询开销、等待延迟、单点故障】 令牌传递协议：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"局域网基本概念和体系结构","slug":"计算机基础/计算机网络原理/局域网基本概念和体系结构","date":"2020-08-05T16:00:00.000Z","updated":"2021-05-20T09:36:25.894Z","comments":true,"path":"2020/08/06/计算机基础/计算机网络原理/局域网基本概念和体系结构/","link":"","permalink":"http://example.com/2020/08/06/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/","excerpt":"","text":"局域网基本概念和体系结构： 局域网：简称LAN，是指在某一区域内由多台计算机互联成的计算机组，使用广播信道 特点：1）覆盖的地理范围较小，只在一个相对独立的局部范围内联，如一座或集中的建筑群内2）使用专门铺设的传输介质（双绞线、同轴电缆）进行联网，数据传输速率高（10Mb/s～10Gb/s）3）通信延迟时间短，误码率低，可靠性较高4）各站为平等关系，共享传输信道5）多采用分布式控制和广播式通信，能进行广播和组播 决定局域网的主要要素为：网络拓扑、传输介质、介质访问控制方法 局域网拓扑结构： 局域网传输介质：1）有线局域网：双绞线、同轴电缆、光纤2）无线局域网：电磁波 局域网介质访问控制方法：1）CSMA-CD：常用于总线型局域网，也用于树型网络2）令牌总线：常用于总线型局域网，也用于树型网络；它是把总线型或树型网络中的各个工作站按一定的顺序如按接口地址大小排列形成一个逻辑环，只有令牌持有者才能控制总线，才有发送信息的权力3）令牌环：用于环形局域网，如令牌环网 局域网的分类： IEEE 802标准：1）IEEE 802.3:以太网2）IEEE 802.5:令牌环网3）IEEE 802.8:光纤4）IEEE 802.11:无线局域网 MAC子层和LLC子层：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"以太网","slug":"计算机基础/计算机网络原理/以太网","date":"2020-08-04T16:00:00.000Z","updated":"2021-05-20T09:40:46.033Z","comments":true,"path":"2020/08/05/计算机基础/计算机网络原理/以太网/","link":"","permalink":"http://example.com/2020/08/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E4%BB%A5%E5%A4%AA%E7%BD%91/","excerpt":"","text":"以太网： 以太网(Ethernet)指的是由Xerox公司创建并由Xerox、Intel和DEC公司联合开发的基带总线局域网规范，是当今现有局域网采用的最通用的通信协议标准。以太网使用CSMA/CD技术 以太网在局域网各种技术中占统治性地位：1）造价低廉(以太网网卡不到一百块)2）是应用最广泛的局域网技术3）比令牌环网、ATM网便宜，简单4）满足网络速率要求：10Mb/s～10Gb/s 以太网两个标准：1）DIX Ethernet V2:第一个局域网产品（以太网）规约2）IEEE 802.3:IEEE 802委员会802.3工作组制定的第一个IEEE的以太网标准（帧格式有一点改动） 以太网提供无连接、不可靠的服务：1）无连接：发送方和接收方之间无“握手过程”2）不可靠：不对发送方的数据帧编号，接收方不向发送方进行确认，差错帧直接丢弃，差错纠正由高层负责 以太网只实现无差错接收，不实现可靠传输 以太网传输介质与拓扑结构的发展： 10BASE-T以太网：10BASE-T是传送基带信号的双绞线以太网，T表示采用双绞线，现10BASE-T采用的是无屏蔽双绞线（UTP），传输速率是10Mb/s1）物理上采用星型拓扑，逻辑上总线型，每段双绞线最长为100m2）采用曼彻斯特编码3）采用CSMA/CD介质访问控制 适配器与MAC地址： 以太网MAC帧： 高速以太网：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"无线局域网","slug":"计算机基础/计算机网络原理/无线局域网","date":"2020-08-03T16:00:00.000Z","updated":"2021-05-20T09:39:32.770Z","comments":true,"path":"2020/08/04/计算机基础/计算机网络原理/无线局域网/","link":"","permalink":"http://example.com/2020/08/04/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/","excerpt":"","text":"无线局域网： IEEE 802.11是无线局域网通用的标准，它是由IEEE所定义的无线网络通信的标准 无线局域网的分类：1）有固定基础设施无线局域网2）无固定基础设施无线局域网的自组织网络","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"PPP协议和HDLC协议","slug":"计算机基础/计算机网络原理/PPP协议和HDLC协议","date":"2020-08-02T16:00:00.000Z","updated":"2021-05-20T09:43:50.191Z","comments":true,"path":"2020/08/03/计算机基础/计算机网络原理/PPP协议和HDLC协议/","link":"","permalink":"http://example.com/2020/08/03/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/PPP%E5%8D%8F%E8%AE%AE%E5%92%8CHDLC%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"PPP协议和HDLC协议： 广域网：WAN，通常跨接很大的物理范围，所覆盖的范围从几十公里到几千公里，它能连接多个城市或国家，或横跨几个洲并能提供远距离通信，形成国际性的远程网络 广域网的通信子网主要使用分组交换技术，广域网的通信子网可以利用公用分组交换网、卫星通信网和无线分组交换网，它将分布在不同地区的局域网或计算机系统互连起来，达到资源共享的目的，如因特网（Internet）是世界范围内最大的广域网 ———————————— 点对点协议PPP是目前使用最广泛的数据链路层协议，用户使用拨号电话接入因特网时一般都使用PPP协议 PPP协议只支持全双工链路 PPP协议应满足的要求：1）简单：对于链路层的帧，无需纠错，无需序号，无需流量控制2）封装成帧：帧定界符3）透明传输：与帧定界符一样比特组合的数据应该如何处理：异步线路用字节填充，同步线路用比特填充4）多种网络层协议：封装的IP数据报可以采用多种协议5）多种类型链路：串行/并行，同步/异步，电/光6）差错检测：错就丢弃7）检测连接状态：链路是否正常工作8）最大传送单元：数据部分最大长度MTU9）网络层地址协商：知道通信双方的网络层地址10）数据压缩协商 PPP协议无需满足的要求：1）纠错2）流量控制3）序号4）支持多点线路 PPP协议的三个组成部分：1）一个将IP数据报封装到串行链路（同步串行/异步串行）的方法2）链路控制协议LCP：建立并维护数据链路连接（身份验证）3）网络控制协议NCP：PPP可支持多种网络层协议，每个不同的网络层协议都要一个相应的NCP来配置，为网络层协议建立和配置逻辑连接 PPP协议的状态图： PPP协议的帧格式： ——————————— HDLC协议：高级数据链路控制，是一个在同步网上传输数据、面向比特的数据链路层协议，它是由国际标准化组织ISO根据IBM公司的SDLC协议扩展开发而成的 数据报文可透明传输，用于实现透明传输的“0比特插入法”易于硬件实现 采用全双工通信 所有帧采用CRC检验，对信息帧进行顺序编号，可防止漏收或重份，传输可靠性高 HDLC的站： HDLC的帧格式： PPP协议和HDLC协议：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"链路层设备","slug":"计算机基础/计算机网络原理/链路层设备","date":"2020-08-01T16:00:00.000Z","updated":"2021-05-20T09:36:36.742Z","comments":true,"path":"2020/08/02/计算机基础/计算机网络原理/链路层设备/","link":"","permalink":"http://example.com/2020/08/02/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E9%93%BE%E8%B7%AF%E5%B1%82%E8%AE%BE%E5%A4%87/","excerpt":"","text":"链路层设备： 以太网物理上采用星型拓扑，逻辑上总线型，每段双绞线最长为100m 物理层扩展以太网： 链路层扩展以太网（网桥、交换机）： 1）网桥 网桥分类：1）透明网桥2）源路由网桥：在发送帧时，把详细的最佳路由信息（路由最少/时间最短）放在帧的首部中【方法：源站以广播方式向欲通信的目的站发送一个发现帧，选择其中最佳的路由线路】 2）多接口网桥—以太网交换机 以太网交换机的两种交换方式：1）直通式交换机：查完目的地址(6B)就立刻转发；延迟小，可靠性低，无法支持具有不同速率的端口的交换2）存储转发式交换机：将帧放入高速缓存，并检查是否正确，正确则转发，错误则丢弃；延迟大，可靠性高，可以支持具有不同速率的端口的交换 冲突域和广播域：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"网络层功能概述","slug":"计算机基础/计算机网络原理/网络层功能概述","date":"2020-07-31T16:00:00.000Z","updated":"2021-05-20T09:38:46.824Z","comments":true,"path":"2020/08/01/计算机基础/计算机网络原理/网络层功能概述/","link":"","permalink":"http://example.com/2020/08/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E7%BD%91%E7%BB%9C%E5%B1%82%E5%8A%9F%E8%83%BD%E6%A6%82%E8%BF%B0/","excerpt":"","text":"网络层功能概述： 网络层主要任务是把分组从源端传到目的端，为分组交换网上的不同主机提供通信服务 网络层传输单位是数据报 功能：1）路由选择与分组转发(最佳路径)2）异构网络互联3）拥塞控制：若所有结点都来不及接受分组，而要丢弃大量分组的话，网络就处于拥塞状态，因此要采取一定措施，缓解这种拥塞【开环控制(静)、闭环控制(动)】","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"电路交换、报文交换、分组交换","slug":"计算机基础/计算机网络原理/电路交换、报文交换、分组交换","date":"2020-07-30T16:00:00.000Z","updated":"2021-05-20T09:35:27.730Z","comments":true,"path":"2020/07/31/计算机基础/计算机网络原理/电路交换、报文交换、分组交换/","link":"","permalink":"http://example.com/2020/07/31/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E7%94%B5%E8%B7%AF%E4%BA%A4%E6%8D%A2%E3%80%81%E6%8A%A5%E6%96%87%E4%BA%A4%E6%8D%A2%E3%80%81%E5%88%86%E7%BB%84%E4%BA%A4%E6%8D%A2/","excerpt":"","text":"电路交换、报文交换、分组交换： 如何使数据通过网络核心(路由器)从源主机到目的主机？——数据交换 为什么要数据交换： 数据交换方式：1）电路交换2）报文交换3）分组交换：数据报方式、虚电路方式 ————————————— 电路交换：电话网络(多路复用) 电路交换的阶段：1）建立连接（呼叫/电路建立）2）通信3）释放连接（拆除电路） 特点：独占资源 优点：通信时延小、有序传输、没有冲突、实时性强 缺点：建立连接时间长、线路独占，使用效率低、灵活性差、无差错控制能力 ————————————— 报文交换： 报文：源应用发送的信息整体 优点：1）无需建立连接2）存储转发，动态分配线路3）线路可靠性较高4）线路利用率较高5）多目标服务 缺点：1）有存储转发时延2）报文大小不定，需要网络节点有较大缓存空间 ————————————— 分组交换： 分组：把大的数据块分割成小的数据块 优点：1）无需建立连接2）存储转发，动态分配线路3）线路可靠性较高4）线路利用率较高5）相对于报文交换，存储管理更容易 缺点：1）有存储转发时延2）需要传输额外的信息量3）乱序到目的主机时，要对分组排序重组 ———————————————— 数据报方式为网络层提供无连接服务【无连接服务：不事先为分组的传输确定传输路径，每个分组独立确定传输路径，不同分组传输路径可能不同】【每个分组携带源和目的地址】【路由器根据分组的目的地址转发分组：基于路由协议/算法构建转发表；检索转发表；每个分组独立选路】 虚电路方式为网络层提供连接服务【连接服务：首先为分组的传输确定传输路径(建立连接)，然后沿该路径(连接)传输系列分组，系列分组传输路径相同，传输结束后拆除连接】 虚电路将数据报方式和电路交换方式结合，以发挥两者优点 虚电路：一条源主机到目的主机类似于电路的路径（逻辑连接），路径上所有的结点都要维持这条虚电路的建立，都维持一张虚电路表，每一项纪录了一个打开的虚电路信息 通信过程：1）建立连接（虚电路建立）：每个分组携带虚电路号，而非目的地址，源主机发送“呼叫请求”分组并收到“呼叫应答”分组后才算建立连接2）数据传输（全双工通信）3）释放连接（虚电路释放）：源主机发送“释放请求”分组以拆除虚电路","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"IP数据报格式","slug":"计算机基础/计算机网络原理/IP数据报格式","date":"2020-07-29T16:00:00.000Z","updated":"2021-05-20T09:42:53.780Z","comments":true,"path":"2020/07/30/计算机基础/计算机网络原理/IP数据报格式/","link":"","permalink":"http://example.com/2020/07/30/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/IP%E6%95%B0%E6%8D%AE%E6%8A%A5%E6%A0%BC%E5%BC%8F/","excerpt":"","text":"IP数据报格式： TCP/IP协议栈：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"IP数据报分片","slug":"计算机基础/计算机网络原理/IP数据报分片","date":"2020-07-28T16:00:00.000Z","updated":"2021-05-20T09:42:42.821Z","comments":true,"path":"2020/07/29/计算机基础/计算机网络原理/IP数据报分片/","link":"","permalink":"http://example.com/2020/07/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/IP%E6%95%B0%E6%8D%AE%E6%8A%A5%E5%88%86%E7%89%87/","excerpt":"","text":"","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"IPv4地址","slug":"计算机基础/计算机网络原理/IPv4地址","date":"2020-07-27T16:00:00.000Z","updated":"2021-05-20T09:43:16.143Z","comments":true,"path":"2020/07/28/计算机基础/计算机网络原理/IPv4地址/","link":"","permalink":"http://example.com/2020/07/28/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/IPv4%E5%9C%B0%E5%9D%80/","excerpt":"","text":"IPv4地址： IP编址的历史阶段：1）分类的IP地址2）子网的划分3）构成超网（无分类编址方法） —————————————————— 分类的IP地址： IP地址：全世界唯一的32位/4字节标识符，标识路由器主机的接口【&lt;网络号&gt;&lt;主机号&gt;】 特殊IP地址： 私有IP地址： —————————————— 路由器对目的地址是私有IP地址的数据报一律不进行转发 网络地址转换NAT：在专用网连接到因特网的路由器上安装NAT软件，安装了NAT软件的路由器叫NAT路由器，它至少有一个有效的外部全球IP地址 ————————————— 子网划分和子网掩码： 分类的IP地址的弱点：1）IP地址空间的利用率有时很低2）两级IP地址不够灵活 子网掩码（相与：相同为1，不同为0）： 使用子网时分组的转发： ——————————————— 无分类编址CIDR： 构成超网：将多个子网聚合成一个较大的子网，叫做构成超网，或路由聚合 方法：将网络前缀缩短 最长前缀匹配：使用CIDR时，查找路由表可能得到几个匹配结果，应选择具有最长网络前缀的路由，前缀越长，地址块越小，路由越具体","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"ARP协议","slug":"计算机基础/计算机网络原理/ARP协议","date":"2020-07-26T16:00:00.000Z","updated":"2021-05-20T09:41:22.200Z","comments":true,"path":"2020/07/27/计算机基础/计算机网络原理/ARP协议/","link":"","permalink":"http://example.com/2020/07/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/ARP%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"ARP协议： 发送数据的过程：1）从主机1—&gt;主机32）从主机1—&gt;主机5 由于在实际网络的链路上传送数据帧时，最终必须使用MAC地址 ARP协议：完成主机或路由器IP地址到MAC地址的映射（解决下一跳走哪的问题） ARP协议使用过程：检查ARP高速缓存，有对应表项则写入MAC帧，没有则用目的MAC地址为FF-FF-FF-FF-FF-FF的帧封装并广播ARP请求分组，同一局域网中所有主机都能收到该请求。目的主机收到请求后就会向源主机单播一个ARP响应分组，源主机收到后将此映射写入ARP缓存（10～20min更新一次） ARP协议的4种典型情况（ARP协议自动进行）：1）主机A发给本网络上的主机B：用ARP找到主机B的硬件地址2）主机A发给另一网络上的主机B：用ARP找到本网络上一个路由器（网关）的硬件地址3）路由器发给本网络的主机A：用ARP找到主机A的硬件地址4）路由器发给另一网络的主机B：用ARP找到本网络上的一个路由器的硬件地址","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"DHCP协议","slug":"计算机基础/计算机网络原理/DHCP协议","date":"2020-07-25T16:00:00.000Z","updated":"2021-05-20T09:42:18.194Z","comments":true,"path":"2020/07/26/计算机基础/计算机网络原理/DHCP协议/","link":"","permalink":"http://example.com/2020/07/26/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/DHCP%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"DHCP协议： 主机如何获得IP地址：1）静态配置：IP地址、子网掩码、默认网关2）动态配置： DHCP协议：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"ICMP协议","slug":"计算机基础/计算机网络原理/ICMP协议","date":"2020-07-24T16:00:00.000Z","updated":"2021-05-20T09:42:31.482Z","comments":true,"path":"2020/07/25/计算机基础/计算机网络原理/ICMP协议/","link":"","permalink":"http://example.com/2020/07/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/ICMP%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"ICMP协议： TCP/IP协议栈：ICMP协议：为了更有效的转发IP数据报和提高交付成功的机会 网际控制报文协议ICMP：ICMP协议支持主机或路由器：差错（或异常）报告、网络探询，发送特定ICMP报文【ICMP差错报文、ICMP询问报文】 ICMP差错报告报文：1）终点不可达：当路由器或主机不能交付数据报时就向源点发送终点不可达报文【无法交付】2）源点抑制：当路由器或主机由于拥塞而丢弃数据报时，就向源点发送源点抑制报文，使源点知道应当把数据报的发送速率放慢【拥塞丢数据】3）时间超过：当路由器收到生存时间TTL=0的数据报时，除丢弃该数据报外，还要向源点发送时间超过报文。当终点在预先规定的时间内不能收到一个数据报的全部数据报片时，就把已收到的数据报片都丢弃，并向源点发送时间超过报文【TTL=0】4）参数问题：当路由器或目的主机收到的数据报的首部中有的字段的值不正确时，就丢弃该数据报，并向源点发送参数问题报文【首部字段有问题】5）改变路由（重定向）：路由器把改变路由报文发送给主机，让主机知道下次应将数据报发送给另外的路由器（可通过更好的路由）【值得更好的路由】 不应发送ICMP差错报文的情况：1）对ICMP差错报告报文不再发送ICMP差错报告报文2）对第一个分片的数据报片的所有后续数据报片都不发送ICMP差错报告报文3）对具有组播地址的数据报都不发送ICMP差错报告报文【广播是一对全部；组播是一对多，有选择性的】4）对具有特殊地址（如127.0.0.0或0.0.0.0）的数据报不发送ICMP差错报告报文 ICMP询问报文：1）回送请求和回答报文：主机或路由器向特定目的主机发出的询问，收到此报文的主机必须给源主机或路由器发送ICMP回送回答报文【测试目的站是否可达以及了解其相关状态】2）时间戳请求和回答报文：请某个主机或路由器回答当前的日期和时间【用来进行时钟同步和测量时间】3）掩码地址请求和回答报文4）路由器询问和通告报文 ICMP的应用：1）PING：测试两个主机之间的连通性，使用了ICMP回送请求和回答报文2）Traceroute：跟踪一个分组从源点到终点的路径，使用了ICMP时间超过差错报告报文","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"IPv6","slug":"计算机基础/计算机网络原理/IPv6","date":"2020-07-23T16:00:00.000Z","updated":"2021-05-20T09:43:27.302Z","comments":true,"path":"2020/07/24/计算机基础/计算机网络原理/IPv6/","link":"","permalink":"http://example.com/2020/07/24/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/IPv6/","excerpt":"","text":"IPv6： 为什么有IPv6：1）32位IPv4地址空间已分配殆尽，CIDR、NAT治标不治本；IPv6从根本上解决了地址耗尽问题2）改进首部格式3）快速处理/转发数据报4）支持QoS IPv6数据报格式： IPv6和IPv4： IPv6基本地址类型：1）单播：一对一通信，可做源地址+目的地址2）多播：一对多通信，可做目的地址3）任播：一对多中的一个通信，可做目的地址 IPv6向IPv4过渡的策略：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"路由算法与路由协议概述","slug":"计算机基础/计算机网络原理/路由算法与路由协议概述","date":"2020-07-22T16:00:00.000Z","updated":"2021-05-20T09:37:00.309Z","comments":true,"path":"2020/07/23/计算机基础/计算机网络原理/路由算法与路由协议概述/","link":"","permalink":"http://example.com/2020/07/23/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E8%B7%AF%E7%94%B1%E7%AE%97%E6%B3%95%E4%B8%8E%E8%B7%AF%E7%94%B1%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0/","excerpt":"","text":"路由算法与路由协议概述： 路由算法的分类：1）静态路由算法（非自适应路由算法）：管理员手工配置路由信息【简便、可靠，在负荷稳定、拓扑变化不大的网络中运行效果很好，广泛用于高度安全性的军事网络和较小的商业网络】【路由更新慢，不适用大型网络】2）动态路由算法（自适应路由算法）：路由期间彼此交换信息，按照路由算法优化出路由表项【路由更新快，适用大型网络，及时响应链路费用或网络拓扑变化】【算法复杂，增加网络负担】 动态路由算法：1）全局性：链路状态路由算法：OSPF协议，所有路由器掌握完整的网络拓扑和链路费用信息2）分散性：距离向量路由算法：RIP协议，路由器只掌握物理相连的邻居及链路费用 分层次的路由选择协议：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"RIP协议与距离向量算法","slug":"计算机基础/计算机网络原理/RIP协议与距离向量算法","date":"2020-07-21T16:00:00.000Z","updated":"2021-05-20T09:44:01.753Z","comments":true,"path":"2020/07/22/计算机基础/计算机网络原理/RIP协议与距离向量算法/","link":"","permalink":"http://example.com/2020/07/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/RIP%E5%8D%8F%E8%AE%AE%E4%B8%8E%E8%B7%9D%E7%A6%BB%E5%90%91%E9%87%8F%E7%AE%97%E6%B3%95/","excerpt":"","text":"RIP协议与距离向量算法： RIP是一种分布式的基于距离向量的路由选择协议，是因特网的协议标准，最大优点是简单 RIP协议要求网络中每一个路由器都维护从它自己到其他每一个目的网络的唯一最佳距离记录（即一组距离） 距离：通常为“跳数”，即从源端口到目的端口所经过的路由器个数，经过一个路由器跳数+1。特别的，从一路由器到直接连接的网络距离为1，RIP允许一条路由最多只能包含15个路由器，因此距离为16表示网络不可达 RIP协议只适用于小互联网 RIP协议：1）仅和相邻路由器交换信息2）路由器交换的信息是自己的路由表3）每30s交换一次路由信息，然后路由器根据新信息更新路由表，若超过180s没收到邻居路由器的通告，则判定邻居没了，并更新自己路由表；路由器刚开始工作时，只知道直接连接的网络的距离（距离为1），接着每一个路由器也只和数目非常有限的相邻路由器交换并更新路由信息；经过若干次更新后，所有路由器最终都会知道到达本自治系统任何一个网络的最短距离和下一跳路由器的地址，即“收敛” 距离向量算法： RIP协议的报文格式： RIP的特点：当网络出现故障时，要经过比较长的时间（例如数分钟）才能将此信息传送到所有的路由，“慢收敛”","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"OSPF协议与链路状态算法","slug":"计算机基础/计算机网络原理/OSPF协议与链路状态算法","date":"2020-07-20T16:00:00.000Z","updated":"2021-05-20T09:43:38.596Z","comments":true,"path":"2020/07/21/计算机基础/计算机网络原理/OSPF协议与链路状态算法/","link":"","permalink":"http://example.com/2020/07/21/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/OSPF%E5%8D%8F%E8%AE%AE%E4%B8%8E%E9%93%BE%E8%B7%AF%E7%8A%B6%E6%80%81%E7%AE%97%E6%B3%95/","excerpt":"","text":"OSPF协议与链路状态算法： 开放最短路径优先OSPF协议：“开放”标明OSPF协议不是受某一家厂商控制，而是公开发表的；“最短路径优先”是因为使用了Dijkstra提出的最短路径算法SPF OSPF最主要的特征就是使用分布式的链路状态协议 链路状态路由算法： OSPF的区域： OSPF分组： OSPF其他特点：1）每隔30min，要刷新一次数据库中的链路状态2）由于一个路由器的链路状态只涉及到与相连路由器的连通状态，因而与整个互联网的规模并无直接关系，因此当互联网规模很大时，OSPF协议要比距离向量协议RIP好很多3）OSPF不存在坏消息传的慢的问题，它的收敛速度很快","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"BGP协议","slug":"计算机基础/计算机网络原理/BGP协议","date":"2020-07-19T16:00:00.000Z","updated":"2021-05-20T09:41:33.133Z","comments":true,"path":"2020/07/20/计算机基础/计算机网络原理/BGP协议/","link":"","permalink":"http://example.com/2020/07/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/BGP%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"BGP协议： 1）和谁交换：与其他AS的邻站BGP发言人交换信息2）交换什么：交换的网络可达性的信息，即要到达某个网络所要经过的一系列AS3）多久交换：发生变化时更新有变化的部分 BGP协议交换信息的过程：BGP所交换的网络可达性的信息就是要到达某个网络所要经过的一系列AS，当BGP发言人互相交换了网络可达性的信息后，各BGP发言人就根据所采用的策略从收到的路由信息中找出到达各AS的较好路由 BGP协议报文格式： BGP协议特点：1）BGP支持CIDR，因此BGP的路由表也就应当包括目的网络前缀、下一跳路由器，以及到达该目的网络所要经过的各个自治系统序列2）在BGP刚刚运行时，BGP的邻站是交换整个的BGP路由表，但以后只需要在发生变化时更新有变化的部分，这样做对节省网络带宽和减少路由器的处理开销都有好处 BGP-4的四种报文： 三种路由协议比较：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"IP组播","slug":"计算机基础/计算机网络原理/IP组播","date":"2020-07-18T16:00:00.000Z","updated":"2021-05-20T09:43:05.077Z","comments":true,"path":"2020/07/19/计算机基础/计算机网络原理/IP组播/","link":"","permalink":"http://example.com/2020/07/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/IP%E7%BB%84%E6%92%AD/","excerpt":"","text":"IP组播： IP数据报的三种传输方式：1）单播：单播用于发送数据包到单个目的地，且每发送一份单播报文都使用一个单播IP地址作为目的地址，是一种点对点传输方式2）广播：广播是指发送数据包到同一广播域或子网内的所有设备的一种数据传输方式，是一种点对多点传输方式3）组播(多播)：当网络中的某些用户需要特定数据时，组播数据发送者仅发送一次数据，借助组播路由协议为组播数据包建立组播分发树，被传递的数据到达距离用户端尽可能近的节点后才开始复制和分发，是一种点对多点传输方式 IP组播地址： 硬件组播： —————————————————— 网际组管理协议IGMP： IGMP工作的两个阶段：1）某主机要加入组播组时，该主机向组播组的组播地址发送一个IGMP报文，声明自己要成为该组的成员；本地组播路由器收到IGMP报文后，要利用组播路由选择协议把这组成员关系发给因特网上的其他组播路由器2）本地组播路由器周期性探寻本地局域网上的主机，以便知道这些主机是否还是组播组的成员；只要有一个主机对某个组响应，那么组播路由器就认为这个组是活跃的，如果经过几次探寻后没有一个主机响应，组播路由器就认为本网络上没有此组播组的主机，因此就不再把这组的成员关系发给其他的组播路由器 组播路由器知道的成员关系只是所连接的局域网中有无组播组的成员 组播路由选择协议目的是找出以源主机为根节点的组播转发树 构造树可以避免在路由器之间兜圈子 对不同的多播组对应于不同的多播转发树；同一个多播组，对不同的源点也会有不同的多播转发树 组播路由选择协议常使用的三种算法：1）基于链路状态的路由选择2）基于距离-向量的路由选择3）协议无关的组播（稀疏/密集）","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"移动IP","slug":"计算机基础/计算机网络原理/移动IP","date":"2020-07-17T16:00:00.000Z","updated":"2021-05-20T09:40:34.981Z","comments":true,"path":"2020/07/18/计算机基础/计算机网络原理/移动IP/","link":"","permalink":"http://example.com/2020/07/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E7%A7%BB%E5%8A%A8IP/","excerpt":"","text":"移动IP： 移动IP技术是移动结点（计算机/服务器等）以固定的网络IP地址，实现跨越不同网段的漫游功能，并保证了基于网络IP的网络权限在漫游过程中不发生任何改变 移动结点：具有永久IP地址的移动设备 归属代理（本地代理）：一个移动结点拥有的旧“居所”称为归属网络，在归属网络中代表移动结点执行移动管理功能的实体叫做归属代理 外部代理（外地代理）：在外部网络中帮助移动结点完成移动管理功能的实体称为外部代理 永久地址（归属地址/主地址）：移动站点在归属网络中的原始地址 转交地址（辅地址）：移动站点在外部网络使用的临时地址 移动IP通信过程：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"网络层设备","slug":"计算机基础/计算机网络原理/网络层设备","date":"2020-07-16T16:00:00.000Z","updated":"2021-05-20T09:38:58.323Z","comments":true,"path":"2020/07/17/计算机基础/计算机网络原理/网络层设备/","link":"","permalink":"http://example.com/2020/07/17/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E7%BD%91%E7%BB%9C%E5%B1%82%E8%AE%BE%E5%A4%87/","excerpt":"","text":"网络层设备： 路由器：是一种具有多个输入端口和多个输出端口的专用计算机，其任务是转发分组 输入端口对线路上收到的分组的处理：输入端口中的查找和转发功能在路由器的交换功能中是最重要的 输出端口将交换结构传送来的分组发送到线路：若路由器处理分组的速率赶不上分组进入队列的速率，则队列的存储空间最终必定减少到零，这就使后面再进入队列的分组由于没有存储空间而只能被丢弃【路由器中的输入或输出队列产生溢出是造成分组丢失的重要原因】 三层设备的区别：1）集线器：不能互联两个物理层不同的网段2）网桥：可以互联两个物理层和链路层不同的网段3）路由器：可以互联两个不同网络层协议的网段 路由表与路由转发：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"传输层概述","slug":"计算机基础/计算机网络原理/传输层概述","date":"2020-07-15T16:00:00.000Z","updated":"2021-05-20T09:35:16.811Z","comments":true,"path":"2020/07/16/计算机基础/计算机网络原理/传输层概述/","link":"","permalink":"http://example.com/2020/07/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E4%BC%A0%E8%BE%93%E5%B1%82%E6%A6%82%E8%BF%B0/","excerpt":"","text":"传输层概述： 传输层：只有主机才有的层次，为应用层提供通信服务，使用网络层的服务 传输层的功能：1）传输层提供进程和进程之间的逻辑通信，网络层提供主机之间的逻辑通信2）复用和分用3）传输层对收到的报文进行差错检测4）传输层的两种协议 1）面向连接的传输控制协议TCP：传送数据之前必须建立连接，数据传送结束后要释放连接，不提供广播或多播服务，由于TCP要提供可靠的面向连接的传输服务，因此不可避免增加了许多开销：确认、流量控制、计时器及连接管理等【可靠，面向连接，时延大，适用于大文件】2）无连接的用户数据报协议UDP：传送数据前不需要建立连接，收到UDP报文后也不需要给出任何确认【不可靠，无连接，时延小，适用于小文件】 传输层的寻址与端口： 复用：应用层所有的应用进程都可以通过传输层再传输到网络层分用：传输层从网络层收到数据后交付指明的应用进程 端口是传输层的SAP，标识主机中的应用进程【逻辑端口/软件端口】 端口号只有本地意义，在因特网中不同计算机的相同端口是没有联系的 端口号长度为16bit，能表示65536个不同的端口号在网络中采用发送方和接收方的套接字组合来识别端点，套接字唯一标识了网络中的一个主机和它上面的一个进程 套接字Socket=（主机IP地址，端口号）","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"UDP协议","slug":"计算机基础/计算机网络原理/UDP协议","date":"2020-07-14T16:00:00.000Z","updated":"2021-05-20T09:44:24.778Z","comments":true,"path":"2020/07/15/计算机基础/计算机网络原理/UDP协议/","link":"","permalink":"http://example.com/2020/07/15/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/UDP%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"UDP协议： 用户数据报协议UDP只在IP数据报服务之上增加了很少功能，即复用分用和差错检测功能 UDP的主要特点：1）UDP是无连接的，减少开销和发送数据之前的时延2）UDP使用最大努力交付，即不保证可靠交付3）UDP是面向报文的，适合一次性传输少量数据的网络应用4）UDP无拥塞控制，适合很多实时应用5）UDP首部开销小，8B，TCP 20B UDP首部格式： UDP校验：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"TCP协议","slug":"计算机基础/计算机网络原理/TCP协议","date":"2020-07-13T16:00:00.000Z","updated":"2021-05-20T09:44:13.580Z","comments":true,"path":"2020/07/14/计算机基础/计算机网络原理/TCP协议/","link":"","permalink":"http://example.com/2020/07/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/TCP%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"TCP协议： —————————————— TCP协议特点和TCP报文段格式TCP连接管理TCP可靠传输TCP流量控制TCP拥塞控制 —————————————— TCP协议的特点：1）TCP是面向连接（虚连接）的传输层协议2）每一条TCP连接只能有两个端点，每一条TCP连接只能是点对点的3）TCP提供可靠交付的服务，无差错、不丢失、不重复、按序到达【可靠有序，不丢不重】4）TCP提供全双工通信：【发送缓存：准备发送的数据、已发送但尚未收到确认的数据；接收缓存：按序到达但尚未被接受应用程序读取的数据、不按序到达的数据】5）TCP面向字节流：TCP把应用程序交下来的数据看成仅仅是一连串的无结构的字节流【流：流入到进程或从进程流出的字节序列】 TCP报文段首部格式：—————————————————— TCP连接管理： TCP连接传输三个阶段：1）连接建立2）数据传送3）连接释放 TCP连接的建立采用客户服务器方式，主动发起连接建立的应用进程叫做客户，而被动等待连接建立的应用进程叫服务器 TCP的连接建立(三次握手)：假设运行在一台主机（客户）上的一个进程想与另一台主机（服务器）上的一个进程建立一条连接，客户应用进程首先通知客户TCP，它想建立一个与服务器上某个进程之间的连接，客户中的TCP会用以下步骤与服务器中的TCP建立一条TCP连接：【seq：序号，ack：确认号】 SYN洪泛攻击：【解决办法：SYN cookie】 TCP的连接释放(四次挥手)：参与一条TCP连接的两个进程中的任何一个都能终止该连接，连接结束后，主机中的“资源”（缓存和变量）将被释放 ———————————————— TCP可靠传输： 网络层：提供尽最大努力交付，不可靠传输传输层：使用TCP实现可靠传输【如果使用UDP协议，则在应用层实现可靠传输】 可靠：保证接收方进程从缓存区读出的字节流与发送方发出的字节流是完全一样的 TCP实现可靠传输的机制：1）校验：与UDP校验一样，增加伪首部2）序号3）确认：TCP默认使用累计确认4）重传：确认重传不分家，TCP的发送方在规定的时间内没有收到确认就要重传已发送的报文段【超时重传，TCP采用自适应算法，动态改变重传时间RTTs(加权平均往返时间)】 等太久了怎么办？？？ ————————————————— TCP流量控制：让发送方慢点，要让接收方来得及接收 TCP利用滑动窗口机制实现流量控制 在通信过程中，接收方根据自己接收缓存的大小，动态的调整发送方的发送窗口大小，即接收窗口rwnd（接收方设置确认报文段的窗口字段来将rwnd通知给发送方），发送方的发送窗口取接收窗口rwnd和拥塞窗口cwnd的最小值【接收窗口：接收方根据接受缓存设置的值，并告知给发送方，反映接收方容量；拥塞窗口：发送方根据自己估算的网络拥塞程度而设置的窗口值，反映网络当前容量】 这个时候假设B给A发了一个非零的rwnd，但是在路上丢失了，主机A在等着B发送非零窗口，主机B在等着A的确认消息，两者相互等待，造成死锁 解决方法：1）TCP为每一个连接设有一个持续计时器，只要TCP连接的一方收到对方的零窗口通知，就启动持续计时器2）若持续计时器设置的时间到期，就发送一个零窗口探测报文段，接收方收到探测报文段时给出现在的窗口值3）若窗口仍然是0，那么发送方就重新设置持续计时器 ———————————————— TCP拥塞控制：防止过多的数据注入到网络中【全局性】 出现拥塞的条件：对资源需求的总和&gt;可用资源【网络中有许多资源同时呈现供应不足—&gt;网络性能变坏—&gt;网络吞吐量将随输入负荷增大而下降】 拥塞控制四种算法：1）慢开始、拥塞避免2）快重传、快恢复","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"网络应用模型","slug":"计算机基础/计算机网络原理/网络应用模型","date":"2020-07-12T16:00:00.000Z","updated":"2021-05-20T09:39:09.846Z","comments":true,"path":"2020/07/13/计算机基础/计算机网络原理/网络应用模型/","link":"","permalink":"http://example.com/2020/07/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E6%A8%A1%E5%9E%8B/","excerpt":"","text":"网络应用模型： 应用层对应用程序的通信提供服务 应用层的功能：1）文件传输、访问和管理2）电子邮件3）虚拟终端4）查询服务和远程作业登录 应用层的重要协议：1）FTP、TFTP2）SMTP、POP3、IMAP3）HTTP 网络应用模型：1）客户/服务器模型（Client/Server）2）P2P模型（Peer-to-Peer） ————————— 服务器：提供计算服务的设备【永久提供服务、永久性访问地址/域名】 客户机：请求计算服务的主机1）与服务器通信，使用服务器提供的服务2）间歇性接入网络3）可能使用动态IP地址4）不与其他客户机直接通信 应用：Web、文件传输FTP、远程登录、电子邮件 ————————— P2P模型：1）不存在永远在线的服务器2）每个主机既可以提供服务，也可以请求服务3）任意端系统/节点之间可以直接通讯4）节点间歇性接入网络5）节点可能改变IP地址6）可扩展性好7）网络健壮性强","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"域名解析系统DNS","slug":"计算机基础/计算机网络原理/域名解析系统DNS","date":"2020-07-11T16:00:00.000Z","updated":"2021-05-20T09:40:57.366Z","comments":true,"path":"2020/07/12/计算机基础/计算机网络原理/域名解析系统DNS/","link":"","permalink":"http://example.com/2020/07/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E7%B3%BB%E7%BB%9FDNS/","excerpt":"","text":"域名解析系统DNS： ———————————————————","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"文件传输协议FTP","slug":"计算机基础/计算机网络原理/文件传输协议FTP","date":"2020-07-10T16:00:00.000Z","updated":"2021-05-20T09:39:21.256Z","comments":true,"path":"2020/07/11/计算机基础/计算机网络原理/文件传输协议FTP/","link":"","permalink":"http://example.com/2020/07/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AEFTP/","excerpt":"","text":"文件传输协议FTP： 文件传送协议：1）文件传送协议FTP(File Transfer Protocol)：提供不同种类主机系统（硬、软件体系等都可以不同）之间的文件传输能力【拷贝：上传、下载】2）简单文件传送协议TFTP FTP服务器和用户端：1）FTP是基于客户/服务器（C/S）的协议2）用户通过一个客户机程序连接至在远程计算机上运行的服务器程序3）依照FTP协议提供服务，进行文件传送的计算机就是FTP服务器4）连接FTP服务器，遵循FTP协议与服务器传送文件的电脑就是FTP客户端 FTP工作原理：1）登陆：FTP地址、用户名、密码匿名登陆：2）FTP使用TCP实现可靠传输【FTP服务器进程：一个主进程、n个从属进程】【控制进程和数据传送进程都属于从属进程】 FTP传输模式：1）文本模式：ASCII模式，以文本序列传输数据2）二进制模式：Binary模式，以二进制序列传输数据","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"电子邮件","slug":"计算机基础/计算机网络原理/电子邮件","date":"2020-07-09T16:00:00.000Z","updated":"2021-05-20T09:35:38.543Z","comments":true,"path":"2020/07/10/计算机基础/计算机网络原理/电子邮件/","link":"","permalink":"http://example.com/2020/07/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6/","excerpt":"","text":"电子邮件： 组成结构： —————————————————— 简单邮件传送协议SMTP【使用TCP连接、端口号为25、C/S】【MIME】：1）SMTP规定了在两个相互通信的SMTP进程之间应如何交换信息2）负责发送邮件的SMTP进程就是SMTP客户，负责接收邮件的进程就是SMTP服务器3）SMTP规定了14条命令（几个字母）和21种应答信息（三位数字代码+简单文字说明） SMTP通信三个阶段： SMTP的缺点：1）SMTP不能传送可执行文件或者其他二进制对象2）SMTP仅限于传送7位ASCII码，不能传送其他非英语国家的文字3）SMTP服务器会拒绝超过一定长度的邮件 ——————————————————— 邮局协议POP3【TCP连接、端口号为110、C/S】:POP3工作方式：下载并保留(在服务器)、下载并删除 ————————————————— 网际报文存取协议IMAP：1）IMAP协议比POP协议复杂，当用户Pc上的IMAP客户程序打开IMAP服务器的邮箱时，用户可以看到邮箱的首部，若用户需要打开某个邮件，该邮件才上传到用户的计算机上2）IMAP可以让用户在不同的地方使用不同的计算机随时上网阅读处理邮件，还允许只读取邮件中的某一个部分（先看正文，有WI-FI的时候再下载附件） ———————————————— 基于万维网的电子邮件（方便）：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"万维网和HTTP协议","slug":"计算机基础/计算机网络原理/万维网和HTTP协议","date":"2020-07-08T16:00:00.000Z","updated":"2021-05-20T09:38:35.543Z","comments":true,"path":"2020/07/09/计算机基础/计算机网络原理/万维网和HTTP协议/","link":"","permalink":"http://example.com/2020/07/09/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/%E4%B8%87%E7%BB%B4%E7%BD%91%E5%92%8CHTTP%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"万维网和HTTP协议： 万维网WWW（World Wide Web）是一个大规模的、联机式的信息储藏所/资料空间，是无数个网络站点和网页的集合用户通过点击超链接（http://www.baidu.com）获取资源，这些资源通过超文本传输协议HTTP传送给使用者 万维网以客户/服务器方式工作，用户使用的浏览器就是万维网客户程序，万维网文档所驻留的主机运行服务器程序 万维网使用超文本标记语言HTML，使得万维网页面设计者可以很方便的从一个界面的链接转到另一个界面，并能够在自己的屏幕上显示出来 ——————————————————— 超文本传输协议HTTP：HTTP协议定义了浏览器（万维网客户进程）怎样向万维网服务器请求万维网文档，以及服务器怎样把文档传送给浏览器 HTTP协议的特点：1）HTTP协议是无状态的【但是在实际工作中，一些万维网站点常常希望能够识别用户（淘宝、Cookie），Cookie是存储在用户主机中的文本文件，记录一段时间内某用户（使用识别码识别，如“123456”）的访问记录、提供个性化服务】2）HTTP采用TCP作为运输层协议，但HTTP协议本身是无连接的（通信双方在交换HTTP报文之前不需要先建立HTTP连接） HTTP的连接方式：1）持久连接(Keep-alive)：非流水线、流水线2）非持久连接(Close) HTTP报文结构：","categories":[{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"}],"tags":[{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"}]},{"title":"数据结构和算法的基本概念","slug":"数据结构、算法笔记/数据结构和算法的基本概念","date":"2020-01-30T16:00:00.000Z","updated":"2021-06-26T15:59:17.006Z","comments":true,"path":"2020/01/31/数据结构、算法笔记/数据结构和算法的基本概念/","link":"","permalink":"http://example.com/2020/01/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E7%AE%97%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","excerpt":"","text":"数据：数据是信息的载体，是描述客观事物属性的数、字符及所有能输入到计算机中并被计算机程序识别和处理的符号的集合，数据是计算机程序加工的原料 数据元素和数据项：数据元素是数据的基本单位，通常作为一个整体进行考虑和处理；一个数据元素可由若干数据项组成，数据项是构成数据元素的不可分割的最小单位 结构：各个元素之间的关系 数据结构：是相互之间存在一种或多种特定关系的数据元素的集合数据对象：是具有相同性质的数据元素的集合，是数据的一个子集 数据结构的三要素： 逻辑结构：数据元素之间的逻辑关系是什么【集合、线性结构、树形结构、图状结构(网状结构)】 物理结构(存储结构)：各个数据元素在内存中如何存储，如何用计算机表示数据元素的逻辑关系【顺序存储、链式存储、索引存储、散列存储】 数据的运算：施加在数据上的运算包括运算的定义和实现，运算的定义是针对逻辑结构的，指出运算的功能；运算的实现是针对存储结构的，指出运算的具体操作步骤 线性结构：1）顺序存储：把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现2）链式存储：逻辑上相邻的元素在物理位置上可以不相邻，借助指示元素存储地址的指针来表示元素之间的逻辑关系3）索引存储：在存储元素信息的同时，还建立附加的索引表，索引表的每项称为索引项，索引项的一般形式是（关键字，地址）4）散列存储：根据元素的关键字直接计算出该元素的存储地址，又称哈希存储 数据类型：一个值的集合和定义在此集合上的一组操作的总称1）原子类型【bool、int】2）结构类型【struct】 抽象数据类型（ADT）：是抽象数据组织及与之相关的操作 程序=数据结构+算法 算法的特性：1）有穷性：一个算法必须总在执行有穷步之后结束，且每一步都可在有穷时间内完成【算法必须是有穷的，而程序可以是无穷的】2）确定性：算法中每条指令必须有确切的含义，对于相同的输入只能得出相同的输出3）可行性：算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现4）输入和输出 好算法的特质：1）正确性：算法应能够正确的解决求解问题2）可读性：算法应具有良好的可读性，以帮助人们理解3）健壮性：输入非法数据时，算法能适当的做出反应或进行处理，而不会产生莫名其妙的输出结果4）高效率与低存储量需求","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"算法的时间复杂度和空间复杂度","slug":"数据结构、算法笔记/算法的时间复杂度和空间复杂度","date":"2020-01-29T16:00:00.000Z","updated":"2021-06-26T15:58:11.698Z","comments":true,"path":"2020/01/30/数据结构、算法笔记/算法的时间复杂度和空间复杂度/","link":"","permalink":"http://example.com/2020/01/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/","excerpt":"","text":"算法时间复杂度和空间复杂度如何评估算法时间开销：让算法先运行，事后统计运行时间？【存在问题：和机器性能有关；和编程语言有关，越高级的语言执行效率越低；和编译程序产生的机器指令质量有关；有些算法是不能事后再统计的(导弹控制算法)】 算法时间复杂度：事前预估算法时间开销T(n)与问题规模n的关系1）最坏时间复杂度2）平均时间复杂度3）最好时间复杂度 O(1)&lt;O(log2n)&lt;O(n)&lt;O(nlog2n)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n) 测试算法效率(时钟打点)问题： 源代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465&#x2F;&#x2F;clock():捕捉从程序开始运行到clock()被调用时所耗费的时间。这个时间单位是clock tick，即“时钟打点”&#x2F;&#x2F;常数CLK_TCK:机器时钟每秒所走的时钟打点数&#x2F;&#x2F;让被测函数重复运行充分多次，使得测出的总的时钟打点间隔充分长，最后计算被测函数平均每次运行的时间即可#include&lt;stdio.h&gt;#include&lt;time.h&gt;#include&lt;math.h&gt;#define MAXN 10#define MAXK 1e7&#x2F;&#x2F;被测函数最大重复调用次数clock_t start,stop;&#x2F;&#x2F;clock_t是clock()函数返回的变量类型double duration;&#x2F;&#x2F;记录被测函数运行时间，以秒为单位double f1(int n,double a[],double x)&#123; int i; double p&#x3D;a[0]; for(i&#x3D;1;i&lt;&#x3D;n;i++)&#123; p +&#x3D; (a[i]*pow(x,i)); &#125; return p;&#125;double f2(int n,double a[],double x)&#123; int i; double p&#x3D;a[0]; for(i&#x3D;1;i&lt;&#x3D;n;i++)&#123; p+&#x3D;(a[i]*pow(x,i)); &#125; return p;&#125;int main()&#123; int i,CLK_TCK; double a[MAXN];&#x2F;&#x2F;存储多项式的系数 for(i&#x3D;0;i&lt;MAXN;i++)&#123; a[i]&#x3D;(double)i; &#125; &#x2F;&#x2F;不在测试范围内的准备工作写在clock()调用之前 start&#x3D;clock();&#x2F;&#x2F;开始计时 for(i&#x3D;0;i&lt;MAXK;i++)&#123; f1(MAXN-1,a,1.1);&#x2F;&#x2F;把被测函数加在这里 &#125; stop&#x3D;clock();&#x2F;&#x2F;停止计时 duration&#x3D;((double)(stop-start))&#x2F;CLK_TCK&#x2F;MAXK;&#x2F;&#x2F;计算函数单次运行时间 printf(&quot;ticks1&#x3D;%f\\n&quot;,(double)(stop-start)); printf(&quot;duration1&#x3D;%6.2e\\n&quot;,duration); &#x2F;&#x2F;其他不在测试范围的处理写在后面，例如输出duration的值 start&#x3D;clock();&#x2F;&#x2F;开始计时 for(i&#x3D;0;i&lt;MAXK;i++)&#123; f2(MAXN-1,a,1.1);&#x2F;&#x2F;把被测函数加在这里 &#125; stop&#x3D;clock();&#x2F;&#x2F;停止计时 duration&#x3D;((double)(stop-start))&#x2F;CLK_TCK&#x2F;MAXK;&#x2F;&#x2F;计算函数单次运行时间 printf(&quot;ticks2&#x3D;%f\\n&quot;,(double)(stop-start)); printf(&quot;duration2&#x3D;%6.2e\\n&quot;,duration); return 0;&#125;","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"线性表的定义和基本操作","slug":"数据结构、算法笔记/线性表的定义和基本操作","date":"2020-01-28T16:00:00.000Z","updated":"2021-06-26T15:56:49.754Z","comments":true,"path":"2020/01/29/数据结构、算法笔记/线性表的定义和基本操作/","link":"","permalink":"http://example.com/2020/01/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/","excerpt":"","text":"线性表：是具有相同数据类型的n(n&gt;=0)个数据元素的有限序列，其中n为表长，当n=0时线性表是一个空表【位序从1开始，数组下标从0开始】 线性表的基本操作： InitList(&amp;L)：初始化表，构造一个空的线性表L，分配内存空间 DestroyList(&amp;L)：销毁操作，销毁线性表，并释放线性表L所占用的内存空间 ListInsert(&amp;L,i,e)：插入操作，在表L中的第i个位置上插入指定元素e ListDelete(&amp;L,i,&amp;e)：删除操作，删除表L中第i个位置的元素，并用e返回删除元素的值 LocateElem(L,e)：按值查找操作，在表L中查找具有给定关键字值的元素 GetElem(L,i)：按位查找操作，获取表L中第i个位置的元素的值 Length(L)：求表长，返回线性表L的长度，即L中数据元素的个数 PrintList(L)：输出操作，按前后顺序输出线性表L的所有元素值 Empty(L)：判空操作，若L为空表，则返回true，否则返回false","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"顺序表的定义","slug":"数据结构、算法笔记/顺序表的定义","date":"2020-01-27T16:00:00.000Z","updated":"2021-06-26T15:58:35.844Z","comments":true,"path":"2020/01/28/数据结构、算法笔记/顺序表的定义/","link":"","permalink":"http://example.com/2020/01/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E5%AE%9A%E4%B9%89/","excerpt":"","text":"顺序表：用顺序存储的方式实现线性表，每个结点中只存放数据元素 顺序表的特点： 随机访问，即可以在O(1)时间内找到第i个元素 存储密度高，每个节点只存储数据元素 拓展容量不方便（即便采用动态分配的方式实现，拓展长度的时间复杂度也比较高） 插入、删除操作不方便，需要移动大量元素 顺序表的实现（静态分配）： 12345678910111213141516171819202122232425262728&#x2F;&#x2F;顺序表的静态分配#include &lt;stdio.h&gt;#define MaxSize 10 &#x2F;&#x2F;定义最大长度typedef struct&#123; int data[MaxSize]; &#x2F;&#x2F;用静态的“数组”存放数据元素 int length; &#x2F;&#x2F;顺序表的当前长度&#125;SqList; &#x2F;&#x2F;顺序表的类型定义&#x2F;&#x2F;基本操作：初始化一个顺序表void InitList(SqList *L)&#123; for(int i&#x3D;0;i&lt;MaxSize;i++)&#123; L-&gt;data[i]&#x3D;0; &#x2F;&#x2F;将所有数据元素设置为默认初始值 &#125; L-&gt;length&#x3D;0; &#x2F;&#x2F;顺序表初始长度为0&#125;int main()&#123; SqList L; &#x2F;&#x2F;声明一个顺序表 InitList(&amp;L); &#x2F;&#x2F;初始化顺序表 &#x2F;&#x2F;...未完待续，后续操作 return 0;&#125; 顺序表的实现（动态分配）： 123456789101112131415161718192021222324252627282930313233343536373839&#x2F;&#x2F;顺序表的动态分配#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define InitSize 10 &#x2F;&#x2F;默认的最大长度typedef struct&#123; int *data; &#x2F;&#x2F;指示动态分配数组的指针 int MaxSize; &#x2F;&#x2F;顺序表的最大容量 int length; &#x2F;&#x2F;顺序表的当前长度&#125;SeqList;void InitList(SeqList *L)&#123; &#x2F;&#x2F;用malloc函数申请一片连续的存储空间 L-&gt;data&#x3D;(int *)malloc(InitSize*sizeof(int)); L-&gt;length&#x3D;0; L-&gt;MaxSize&#x3D;InitSize;&#125;&#x2F;&#x2F;增加动态数组的长度void IncreaseSize(SeqList *L,int len)&#123; int *p&#x3D;L-&gt;data; L-&gt;data&#x3D;(int *)malloc((L-&gt;MaxSize+len)*sizeof(int)); for(int i&#x3D;0;i&lt;L-&gt;length;i++)&#123; L-&gt;data[i]&#x3D;p[i]; &#x2F;&#x2F;将数据复制到新区域 &#125; L-&gt;MaxSize&#x3D;L-&gt;MaxSize+len; &#x2F;&#x2F;顺序表最大长度增加len free(p); &#x2F;&#x2F;释放原来的内存空间&#125;int main()&#123; SeqList L; &#x2F;&#x2F;声明一个顺序表 InitList(&amp;L); &#x2F;&#x2F;初始化顺序表 &#x2F;&#x2F;往顺序表加入几个元素，加满 IncreaseSize(&amp;L,5); return 0;&#125;","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"顺序表的插入和删除","slug":"数据结构、算法笔记/顺序表的插入和删除","date":"2020-01-26T16:00:00.000Z","updated":"2021-06-26T15:58:51.820Z","comments":true,"path":"2020/01/27/数据结构、算法笔记/顺序表的插入和删除/","link":"","permalink":"http://example.com/2020/01/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4/","excerpt":"","text":"顺序表的插入(最好O(1),最坏O(n),平均O(n)) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&#x2F;&#x2F;顺序表的插入#include &lt;stdio.h&gt;#include&lt;stdbool.h&gt; &#x2F;&#x2F;可以使用bool了#define MaxSize 10 &#x2F;&#x2F;定义最大长度typedef struct&#123; int data[MaxSize]; &#x2F;&#x2F;用静态的“数组”存放数据元素 int length; &#x2F;&#x2F;顺序表的当前长度&#125;SqList; &#x2F;&#x2F;顺序表的类型定义&#x2F;&#x2F;基本操作：初始化一个顺序表void InitList(SqList *L)&#123; for(int i&#x3D;0;i&lt;MaxSize;i++)&#123; L-&gt;data[i]&#x3D;0; &#x2F;&#x2F;将所有数据元素设置为默认初始值 &#125; L-&gt;length&#x3D;0; &#x2F;&#x2F;顺序表初始长度为0&#125;&#x2F;&#x2F;i的取值：[1,length+1]，因为顺序表是连续排列的bool ListInsert(SqList *L,int i,int e)&#123; if(i&lt;1 || i&gt;L-&gt;length+1)&#123; &#x2F;&#x2F;判断i的范围是否有效 return false; &#125; if(L-&gt;length &gt;&#x3D; MaxSize)&#123; &#x2F;&#x2F;当前存储空间已满，不能插入 return false; &#125; for(int j&#x3D;L-&gt;length;j&gt;&#x3D;i;j--)&#123; &#x2F;&#x2F;将第i个元素及之后的元素后移 L-&gt;data[i]&#x3D;L-&gt;data[j-1]; &#125; L-&gt;data[i-1]&#x3D;e; &#x2F;&#x2F;在位置i处放入e L-&gt;length++; &#x2F;&#x2F;长度加1 return true;&#125;int main()&#123; SqList L; &#x2F;&#x2F;声明一个顺序表 InitList(&amp;L); &#x2F;&#x2F;初始化顺序表 &#x2F;&#x2F;...此处插入几个元素 bool b&#x3D;ListInsert(&amp;L, 3, 4); &#x2F;&#x2F;在位置3处放入4 return 0;&#125; 顺序表的删除(最好O(1),最坏O(n),平均O(n)) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152&#x2F;&#x2F;顺序表的删除#include &lt;stdio.h&gt;#include&lt;stdbool.h&gt; &#x2F;&#x2F;可以使用bool了#define MaxSize 10 &#x2F;&#x2F;定义最大长度typedef struct&#123; int data[MaxSize]; &#x2F;&#x2F;用静态的“数组”存放数据元素 int length; &#x2F;&#x2F;顺序表的当前长度&#125;SqList; &#x2F;&#x2F;顺序表的类型定义&#x2F;&#x2F;基本操作：初始化一个顺序表void InitList(SqList *L)&#123; for(int i&#x3D;0;i&lt;MaxSize;i++)&#123; L-&gt;data[i]&#x3D;0; &#x2F;&#x2F;将所有数据元素设置为默认初始值 &#125; L-&gt;length&#x3D;0; &#x2F;&#x2F;顺序表初始长度为0&#125;bool ListDelete(SqList *L,int i,int *e)&#123; if(i&lt;1 || i&gt;L-&gt;length)&#123; &#x2F;&#x2F;判断i的范围是否有效 return false; &#125; *e&#x3D;L-&gt;data[i-1]; &#x2F;&#x2F;将被删除的元素赋值给e for(int j&#x3D;i;j&lt;L-&gt;length;j++)&#123; &#x2F;&#x2F;将第i个位置后的元素前移 L-&gt;data[j-1]&#x3D;L-&gt;data[j]; &#125; L-&gt;length--; &#x2F;&#x2F;线性表长度减1 return true;&#125;int main()&#123; SqList L; &#x2F;&#x2F;声明一个顺序表 InitList(&amp;L); &#x2F;&#x2F;初始化顺序表 &#x2F;&#x2F;...此处插入几个元素 int e&#x3D;-1; &#x2F;&#x2F;用变量e把删除的元素“带回来” if(ListDelete(&amp;L, 3, &amp;e))&#123; printf(&quot;已删除第3个元素，删除元素值为%d\\n&quot;,e); &#125; else&#123; printf(&quot;位序i不合法，删除失败\\n&quot;); &#125; return 0;&#125;","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"顺序表的查找","slug":"数据结构、算法笔记/顺序表的查找","date":"2020-01-25T16:00:00.000Z","updated":"2021-06-26T15:58:43.716Z","comments":true,"path":"2020/01/26/数据结构、算法笔记/顺序表的查找/","link":"","permalink":"http://example.com/2020/01/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE/","excerpt":"","text":"顺序表的按位查找(时间复杂度：O(1))GetElem(L,i)：按位查找操作，获取表L中第i个位置的元素的值 静态分配： 123456789101112131415161718192021222324252627282930313233343536&#x2F;&#x2F;顺序表的按位查找（静态分配）#include &lt;stdio.h&gt;#define MaxSize 10 &#x2F;&#x2F;定义最大长度typedef struct&#123; int data[MaxSize]; &#x2F;&#x2F;用静态的“数组”存放数据元素 int length; &#x2F;&#x2F;顺序表的当前长度&#125;SqList; &#x2F;&#x2F;顺序表的类型定义&#x2F;&#x2F;基本操作：初始化一个顺序表void InitList(SqList *L)&#123; for(int i&#x3D;0;i&lt;MaxSize;i++)&#123; L-&gt;data[i]&#x3D;0; &#x2F;&#x2F;将所有数据元素设置为默认初始值 &#125; L-&gt;length&#x3D;0; &#x2F;&#x2F;顺序表初始长度为0&#125;int GetElem(SqList *L,int i)&#123; return L-&gt;data[i-1];&#125;int main()&#123; SqList L; &#x2F;&#x2F;声明一个顺序表 InitList(&amp;L); &#x2F;&#x2F;初始化顺序表 &#x2F;&#x2F;...此处插入几个元素 int num&#x3D;GetElem(&amp;L, 3); &#x2F;&#x2F;查找表L中第3个位置的元素的值 return 0;&#125; 动态分配： 1234567891011121314151617181920212223242526272829303132333435&#x2F;&#x2F;顺序表的按位查找（动态分配）#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define InitSize 10 &#x2F;&#x2F;默认的最大长度typedef struct&#123; int *data; &#x2F;&#x2F;指示动态分配数组的指针 int MaxSize; &#x2F;&#x2F;顺序表的最大容量 int length; &#x2F;&#x2F;顺序表的当前长度&#125;SeqList;void InitList(SeqList *L)&#123; &#x2F;&#x2F;用malloc函数申请一片连续的存储空间 L-&gt;data&#x3D;(int *)malloc(InitSize*sizeof(int)); L-&gt;length&#x3D;0; L-&gt;MaxSize&#x3D;InitSize;&#125;int GetElem(SeqList *L,int i)&#123; return L-&gt;data[i-1];&#125;int main()&#123; SeqList L; &#x2F;&#x2F;声明一个顺序表 InitList(&amp;L); &#x2F;&#x2F;初始化顺序表 &#x2F;&#x2F;...往顺序表加入几个元素 int num&#x3D;GetElem(&amp;L, 3); &#x2F;&#x2F;查找表L中第3个位置的元素的值 return 0;&#125; 顺序表的按值查找(最好O(1),最坏O(n),平均O(n))LocateElem(L,e)：按值查找操作，在表L中查找具有给定关键字值的元素 1234567891011121314151617181920212223242526272829303132333435363738394041&#x2F;&#x2F;顺序表的按值查找#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#define InitSize 10 &#x2F;&#x2F;默认的最大长度typedef struct&#123; int *data; &#x2F;&#x2F;指示动态分配数组的指针 int MaxSize; &#x2F;&#x2F;顺序表的最大容量 int length; &#x2F;&#x2F;顺序表的当前长度&#125;SeqList;void InitList(SeqList *L)&#123; &#x2F;&#x2F;用malloc函数申请一片连续的存储空间 L-&gt;data&#x3D;(int *)malloc(InitSize*sizeof(int)); L-&gt;length&#x3D;0; L-&gt;MaxSize&#x3D;InitSize;&#125;&#x2F;&#x2F;在顺序表L中查找第一个元素值等于e的元素，并返回其位序int LocateElem(SeqList *L,int e)&#123; for(int i&#x3D;0;i&lt;L-&gt;length;i++)&#123; if(L-&gt;data[i] &#x3D;&#x3D; e)&#123; return i+1; &#x2F;&#x2F;数组下标为i的元素值等于e，返回其位序i+1 &#125; &#125; return 0; &#x2F;&#x2F;退出循环，说明查找失败&#125;int main()&#123; SeqList L; &#x2F;&#x2F;声明一个顺序表 InitList(&amp;L); &#x2F;&#x2F;初始化顺序表 &#x2F;&#x2F;...往顺序表加入几个元素 int num&#x3D;LocateElem(&amp;L, 3); &#x2F;&#x2F;查找表L中第3个位置的元素的值 return 0;&#125;","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"单链表的定义","slug":"数据结构、算法笔记/单链表的定义","date":"2020-01-24T16:00:00.000Z","updated":"2021-06-26T16:04:25.654Z","comments":true,"path":"2020/01/25/数据结构、算法笔记/单链表的定义/","link":"","permalink":"http://example.com/2020/01/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%AE%9A%E4%B9%89/","excerpt":"","text":"单链表：用链式存储的方式实现线性表，每个结点除了存放数据元素外，还要存储指向下个节点的指针 单链表的特点： 不要求大片连续空间，改变容量方便 不可随机存取，要耗费一定空间存放指针 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;typedef struct LNode&#123; &#x2F;&#x2F;LNode:结点 int data; &#x2F;&#x2F;数据域：每个结点存放一个数据元素 struct LNode *next; &#x2F;&#x2F;指针域：指针指向下一个结点&#125;LNode,*LinkList; &#x2F;&#x2F;typedef struct LNode *LinkList; 要表示一个单链表时，只需声明一个头指针L，指向单链表的第一个结点&#x2F;&#x2F;初始化一个空的链表(不带头结点)&#x2F;&#x2F;bool InitList(LinkList *L)&#123;&#x2F;&#x2F; (*L)&#x3D;NULL; &#x2F;&#x2F;空表，暂时还没有任何结点，防止脏数据&#x2F;&#x2F; return true;&#x2F;&#x2F;&#125;&#x2F;&#x2F;判断单链表是否为空(不带头结点)&#x2F;&#x2F;bool Empty(LinkList *L)&#123;&#x2F;&#x2F; if((*L) &#x3D;&#x3D; NULL)&#123;&#x2F;&#x2F; return true;&#x2F;&#x2F; &#125;&#x2F;&#x2F; else&#123;&#x2F;&#x2F; return false;&#x2F;&#x2F; &#125;&#x2F;&#x2F;&#125;&#x2F;&#x2F;这里LNode *和LinkList是等价的，LinkList强调这是一个单链表，LNode *强调这是一个结点&#x2F;&#x2F;LNode * GetElem(LinkList L,int i)&#123;&#x2F;&#x2F; int j&#x3D;1;&#x2F;&#x2F; LNode *p&#x3D;L-&gt;next;&#x2F;&#x2F; if(i &#x3D;&#x3D; 0)&#123;&#x2F;&#x2F; return L;&#x2F;&#x2F; &#125;&#x2F;&#x2F; if(i&lt;1)&#123;&#x2F;&#x2F; return NULL;&#x2F;&#x2F; &#125;&#x2F;&#x2F; while(p !&#x3D; NULL &amp;&amp; j&lt;i)&#123;&#x2F;&#x2F; p&#x3D;p-&gt;next;&#x2F;&#x2F; j++;&#x2F;&#x2F; &#125;&#x2F;&#x2F; return p;&#x2F;&#x2F;&#125;&#x2F;&#x2F;初始化一个单链表(带头结点)bool InitList(LinkList *L)&#123; (*L)&#x3D;(LNode *)malloc(sizeof(LNode)); &#x2F;&#x2F;分配一个头结点,并使得头指针*L指向这个头结点 if((*L) &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;内存不足，分配失败 return false; &#125; (*L)-&gt;data&#x3D;0; &#x2F;&#x2F;头结点不存储数据 (*L)-&gt;next&#x3D;NULL; &#x2F;&#x2F;头结点之后暂时还没有结点 return true;&#125;&#x2F;&#x2F;判断单链表是否为空(带头结点)bool Empty(LinkList *L)&#123; if((*L)-&gt;next &#x3D;&#x3D; NULL)&#123; return true; &#125; else&#123; return false; &#125;&#125;int main()&#123; LinkList L; &#x2F;&#x2F;等价于LNode *L; 声明一个指向单链表的第一个结点的指针，注意此处并没有创建一个结点 InitList(&amp;L); &#x2F;&#x2F;初始化一个空表 &#x2F;&#x2F;...后续代码&#125; 不带头结点写代码更麻烦，带头结点写代码更方便","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"单链表的插入和删除","slug":"数据结构、算法笔记/单链表的插入和删除","date":"2020-01-23T16:00:00.000Z","updated":"2021-06-26T16:04:42.239Z","comments":true,"path":"2020/01/24/数据结构、算法笔记/单链表的插入和删除/","link":"","permalink":"http://example.com/2020/01/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%8F%92%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4/","excerpt":"","text":"单链表的插入按位序插入（带头结点）：在表L中的第i个位置上插入指定元素e（最好O(1),最坏O(n),平均O(n)） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;typedef struct LNode&#123; &#x2F;&#x2F;LNode:结点 int data; &#x2F;&#x2F;数据域：每个结点存放一个数据元素 struct LNode *next; &#x2F;&#x2F;指针域：指针指向下一个结点&#125;LNode,*LinkList; &#x2F;&#x2F;typedef struct LNode *LinkList; 要表示一个单链表时，只需声明一个头指针L，指向单链表的第一个结点&#x2F;&#x2F;初始化一个单链表(带头结点)bool InitList(LinkList *L)&#123; (*L)&#x3D;(LNode *)malloc(sizeof(LNode)); &#x2F;&#x2F;分配一个头结点,并使得头指针*L指向这个头结点 if((*L) &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;内存不足，分配失败 return false; &#125; (*L)-&gt;data&#x3D;0; &#x2F;&#x2F;头结点不存储数据 (*L)-&gt;next&#x3D;NULL; &#x2F;&#x2F;头结点之后暂时还没有结点 return true;&#125;&#x2F;&#x2F;在第i个位置插入元素e(带头结点)bool ListInsert(LinkList *L,int i,int e)&#123; if(i&lt;1)&#123; return false; &#125; LNode *p; &#x2F;&#x2F;指针p指向当前扫描到的结点 int j&#x3D;0; &#x2F;&#x2F;当前p指向的是第几个结点 p&#x3D;*L; &#x2F;&#x2F;L指向头结点，头结点是第0个结点(不存数据) while(p !&#x3D; NULL &amp;&amp; j&lt;i-1)&#123; &#x2F;&#x2F;循环找到第i-1个结点 p&#x3D;p-&gt;next; j++; &#125; if(p &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;i值不合法 return false; &#125; LNode *s&#x3D;(LNode *)malloc(sizeof(LNode)); s-&gt;data&#x3D;e; s-&gt;next&#x3D;p-&gt;next; &#x2F;&#x2F;这行代码跟下一行代码顺序不能调换 p-&gt;next&#x3D;s; &#x2F;&#x2F;将结点s连到p之后 return true; &#x2F;&#x2F;插入成功&#125;int main()&#123; LinkList L; &#x2F;&#x2F;等价于LNode *L; 声明一个指向单链表的第一个结点的指针，注意此处并没有创建一个结点 InitList(&amp;L); &#x2F;&#x2F;初始化一个空表 &#x2F;&#x2F;...后续代码 if(ListInsert(&amp;L, 2, 3))&#123; &#x2F;&#x2F;在第2个位置插入元素3 printf(&quot;插入成功&quot;); &#125; else&#123; printf(&quot;插入失败&quot;); &#125;&#125; 按位序插入(不带头结点)：因为不存在“第0个”结点，因此i=1时需要特殊处理 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;typedef struct LNode&#123; &#x2F;&#x2F;LNode:结点 int data; &#x2F;&#x2F;数据域：每个结点存放一个数据元素 struct LNode *next; &#x2F;&#x2F;指针域：指针指向下一个结点&#125;LNode,*LinkList; &#x2F;&#x2F;typedef struct LNode *LinkList; 要表示一个单链表时，只需声明一个头指针L，指向单链表的第一个结点&#x2F;&#x2F;初始化一个空的链表(不带头结点)bool InitList(LinkList *L)&#123; (*L)&#x3D;NULL; &#x2F;&#x2F;空表，暂时还没有任何结点，防止脏数据 return true;&#125;&#x2F;&#x2F;在第i个位置插入元素e(不带头结点)bool ListInsert(LinkList *L,int i,int e)&#123; if(i&lt;1)&#123; return false; &#125; &#x2F;&#x2F;如果不带头结点，则插入、删除第1个元素时，需要更改头指针L if(i &#x3D;&#x3D; 1)&#123; &#x2F;&#x2F;插入第1个结点的操作与其他结点操作不同 LNode *s &#x3D; (LNode *)malloc(sizeof(LNode)); s-&gt;data&#x3D;e; s-&gt;next&#x3D;*L; *L&#x3D;s; &#x2F;&#x2F;头指针指向新结点 return true; &#125; LNode *p; &#x2F;&#x2F;指针p指向当前扫描到的结点 int j&#x3D;0; &#x2F;&#x2F;当前p指向的是第几个结点 p&#x3D;*L; &#x2F;&#x2F;L指向头结点，头结点是第0个结点(不存数据) while(p !&#x3D; NULL &amp;&amp; j&lt;i-1)&#123; &#x2F;&#x2F;循环找到第i-1个结点 p&#x3D;p-&gt;next; j++; &#125; if(p &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;i值不合法 return false; &#125; LNode *s&#x3D;(LNode *)malloc(sizeof(LNode)); s-&gt;data&#x3D;e; s-&gt;next&#x3D;p-&gt;next; &#x2F;&#x2F;这行代码跟下一行代码顺序不能调换 p-&gt;next&#x3D;s; &#x2F;&#x2F;将结点s连到p之后 return true; &#x2F;&#x2F;插入成功&#125;int main()&#123; LinkList L; &#x2F;&#x2F;等价于LNode *L; 声明一个指向单链表的第一个结点的指针，注意此处并没有创建一个结点 InitList(&amp;L); &#x2F;&#x2F;初始化一个空表 &#x2F;&#x2F;...后续代码 if(ListInsert(&amp;L, 2, 3))&#123; &#x2F;&#x2F;在第2个位置插入元素3 printf(&quot;插入成功&quot;); &#125; else&#123; printf(&quot;插入失败&quot;); &#125;&#125; 指定结点的后插操作（O(1)）： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;typedef struct LNode&#123; &#x2F;&#x2F;LNode:结点 int data; &#x2F;&#x2F;数据域：每个结点存放一个数据元素 struct LNode *next; &#x2F;&#x2F;指针域：指针指向下一个结点&#125;LNode,*LinkList; &#x2F;&#x2F;typedef struct LNode *LinkList; 要表示一个单链表时，只需声明一个头指针L，指向单链表的第一个结点&#x2F;&#x2F;初始化一个单链表(带头结点)bool InitList(LinkList *L)&#123; (*L)&#x3D;(LNode *)malloc(sizeof(LNode)); &#x2F;&#x2F;分配一个头结点,并使得头指针*L指向这个头结点 if((*L) &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;内存不足，分配失败 return false; &#125; (*L)-&gt;data&#x3D;0; &#x2F;&#x2F;头结点不存储数据 (*L)-&gt;next&#x3D;NULL; &#x2F;&#x2F;头结点之后暂时还没有结点 return true;&#125;&#x2F;&#x2F;后插操作：在p结点之后插入元素e(带头结点)bool InsertNextNode(LNode *p,int e)&#123; if(p &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;i值不合法 return false; &#125; LNode *s&#x3D;(LNode *)malloc(sizeof(LNode)); if(s &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;内存分配失败，某些情况下有可能分配失败（如内存不足） return false; &#125; s-&gt;data&#x3D;e; &#x2F;&#x2F;用结点s保存数据元素e s-&gt;next&#x3D;p-&gt;next; &#x2F;&#x2F;这行代码跟下一行代码顺序不能调换 p-&gt;next&#x3D;s; &#x2F;&#x2F;将结点s连到p之后 return true; &#x2F;&#x2F;插入成功&#125;int main()&#123; LinkList L; &#x2F;&#x2F;等价于LNode *L; 声明一个指向单链表的第一个结点的指针，注意此处并没有创建一个结点 InitList(&amp;L); &#x2F;&#x2F;初始化一个空表 &#x2F;&#x2F;...后续代码 if(InsertNextNode(L, 3))&#123; &#x2F;&#x2F;在p结点位置后插入元素3 printf(&quot;插入成功&quot;); &#125; else&#123; printf(&quot;插入失败&quot;); &#125;&#125; 指定结点的前插操作：在p结点之前插入元素e（O(1)） 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;typedef struct LNode&#123; &#x2F;&#x2F;LNode:结点 int data; &#x2F;&#x2F;数据域：每个结点存放一个数据元素 struct LNode *next; &#x2F;&#x2F;指针域：指针指向下一个结点&#125;LNode,*LinkList; &#x2F;&#x2F;typedef struct LNode *LinkList; 要表示一个单链表时，只需声明一个头指针L，指向单链表的第一个结点&#x2F;&#x2F;初始化一个单链表(带头结点)bool InitList(LinkList *L)&#123; (*L)&#x3D;(LNode *)malloc(sizeof(LNode)); &#x2F;&#x2F;分配一个头结点,并使得头指针*L指向这个头结点 if((*L) &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;内存不足，分配失败 return false; &#125; (*L)-&gt;data&#x3D;0; &#x2F;&#x2F;头结点不存储数据 (*L)-&gt;next&#x3D;NULL; &#x2F;&#x2F;头结点之后暂时还没有结点 return true;&#125;&#x2F;&#x2F;前插操作：在p结点之前插入元素e(带头结点)bool InsertPriorNode(LNode *p,int e)&#123; if(p &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;i值不合法 return false; &#125; LNode *s&#x3D;(LNode *)malloc(sizeof(LNode)); if(s &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;内存分配失败，某些情况下有可能分配失败（如内存不足） return false; &#125; s-&gt;next&#x3D;p-&gt;next; p-&gt;next&#x3D;s; &#x2F;&#x2F;新结点s连到p之后 s-&gt;data&#x3D;p-&gt;data; &#x2F;&#x2F;将p中元素复制到s中 p-&gt;data&#x3D;e; &#x2F;&#x2F;p中元素覆盖为e return true; &#x2F;&#x2F;插入成功&#125;int main()&#123; LinkList L; &#x2F;&#x2F;等价于LNode *L; 声明一个指向单链表的第一个结点的指针，注意此处并没有创建一个结点 InitList(&amp;L); &#x2F;&#x2F;初始化一个空表 &#x2F;&#x2F;...后续代码 if(InsertPriorNode(L, 3))&#123; &#x2F;&#x2F;在p结点位置前插入元素3 printf(&quot;插入成功&quot;); &#125; else&#123; printf(&quot;插入失败&quot;); &#125;&#125; 单链表的删除按位序删除(带头结点，最坏、平均O(n),最好O(1))：删除表L中第i个位置的元素，并用e返回删除元素的值（找到第i-1个结点，并将其指针指向第i+1个结点，并释放第i个结点） 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;typedef struct LNode&#123; &#x2F;&#x2F;LNode:结点 int data; &#x2F;&#x2F;数据域：每个结点存放一个数据元素 struct LNode *next; &#x2F;&#x2F;指针域：指针指向下一个结点&#125;LNode,*LinkList; &#x2F;&#x2F;typedef struct LNode *LinkList; 要表示一个单链表时，只需声明一个头指针L，指向单链表的第一个结点&#x2F;&#x2F;初始化一个单链表(带头结点)bool InitList(LinkList *L)&#123; (*L)&#x3D;(LNode *)malloc(sizeof(LNode)); &#x2F;&#x2F;分配一个头结点,并使得头指针*L指向这个头结点 if((*L) &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;内存不足，分配失败 return false; &#125; (*L)-&gt;data&#x3D;0; &#x2F;&#x2F;头结点不存储数据 (*L)-&gt;next&#x3D;NULL; &#x2F;&#x2F;头结点之后暂时还没有结点 return true;&#125;&#x2F;&#x2F;按位序删除(带头结点)bool ListDelete(LinkList *L,int i,int *e)&#123; if(i&lt;1)&#123; return false; &#125; LNode *p; &#x2F;&#x2F;指针p指向当前扫描到的结点 int j&#x3D;0; &#x2F;&#x2F;当前p指向的是第几个结点 p&#x3D;*L; &#x2F;&#x2F;L指向头结点，头结点是第0个结点(不存数据) while(p !&#x3D; NULL &amp;&amp; j&lt;i-1)&#123; &#x2F;&#x2F;循环找到第i-1个结点 p&#x3D;p-&gt;next; j++; &#125; if(p &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;i值不合法 return false; &#125; if(p-&gt;next &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;在第i-1个结点之后已无其他结点 return false; &#125; LNode *q&#x3D;p-&gt;next; &#x2F;&#x2F;令q指向被删除结点 *e&#x3D;q-&gt;data; &#x2F;&#x2F;用e返回元素的值 p-&gt;next&#x3D;q-&gt;next; &#x2F;&#x2F;将*q结点从链中断开 free(q); &#x2F;&#x2F;释放结点的存储空间 return true; &#x2F;&#x2F;删除成功&#125;int main()&#123; LinkList L; &#x2F;&#x2F;等价于LNode *L; 声明一个指向单链表的第一个结点的指针，注意此处并没有创建一个结点 InitList(&amp;L); &#x2F;&#x2F;初始化一个空表 &#x2F;&#x2F;...后续代码 int e&#x3D;-1; &#x2F;&#x2F;用变量e把删除的元素“带回来” if(ListDelete(&amp;L, 2, &amp;e))&#123; printf(&quot;已删除第2个元素，删除元素值为%d\\n&quot;,e); &#125; else&#123; printf(&quot;删除失败\\n&quot;); &#125;&#125; 指定结点的删除（O(1)）： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;typedef struct LNode&#123; &#x2F;&#x2F;LNode:结点 int data; &#x2F;&#x2F;数据域：每个结点存放一个数据元素 struct LNode *next; &#x2F;&#x2F;指针域：指针指向下一个结点&#125;LNode,*LinkList; &#x2F;&#x2F;typedef struct LNode *LinkList; 要表示一个单链表时，只需声明一个头指针L，指向单链表的第一个结点&#x2F;&#x2F;初始化一个单链表(带头结点)bool InitList(LinkList *L)&#123; (*L)&#x3D;(LNode *)malloc(sizeof(LNode)); &#x2F;&#x2F;分配一个头结点,并使得头指针*L指向这个头结点 if((*L) &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;内存不足，分配失败 return false; &#125; (*L)-&gt;data&#x3D;0; &#x2F;&#x2F;头结点不存储数据 (*L)-&gt;next&#x3D;NULL; &#x2F;&#x2F;头结点之后暂时还没有结点 return true;&#125;&#x2F;&#x2F;删除指定结点p(带头结点)&#x2F;&#x2F;如果p是最后一个结点，这段代码就有点问题了，解决办法只能从表头开始依次寻找p的前驱，时间复杂度为O(n)&#x2F;&#x2F;单链表的局限性：无法逆向检索，有时候不太方便bool DeleteNode(LNode *p)&#123; if(p &#x3D;&#x3D; NULL)&#123; return false; &#125; LNode *q&#x3D;p-&gt;next; &#x2F;&#x2F;令q指向*p的后继结点 p-&gt;data&#x3D;p-&gt;next-&gt;data; &#x2F;&#x2F;和后继结点交换数据域 p-&gt;next&#x3D;q-&gt;next; &#x2F;&#x2F;将*q结点从链中“断开” free(q); &#x2F;&#x2F;释放后继结点的存储空间 return true; &#x2F;&#x2F;删除成功&#125;int main()&#123; LinkList L; &#x2F;&#x2F;等价于LNode *L; 声明一个指向单链表的第一个结点的指针，注意此处并没有创建一个结点 InitList(&amp;L); &#x2F;&#x2F;初始化一个空表 &#x2F;&#x2F;...后续代码 if(DeleteNode(L))&#123; printf(&quot;删除成功\\n&quot;); &#125; else&#123; printf(&quot;删除失败\\n&quot;); &#125;&#125;","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"单链表的查找","slug":"数据结构、算法笔记/单链表的查找","date":"2020-01-22T16:00:00.000Z","updated":"2021-06-26T16:04:34.510Z","comments":true,"path":"2020/01/23/数据结构、算法笔记/单链表的查找/","link":"","permalink":"http://example.com/2020/01/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E6%9F%A5%E6%89%BE/","excerpt":"","text":"单链表的按位查找(带头结点)：获取表L中第i个位置的元素的值，平均时间复杂度O(n) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;typedef struct LNode&#123; &#x2F;&#x2F;LNode:结点 int data; &#x2F;&#x2F;数据域：每个结点存放一个数据元素 struct LNode *next; &#x2F;&#x2F;指针域：指针指向下一个结点&#125;LNode,*LinkList; &#x2F;&#x2F;typedef struct LNode *LinkList; 要表示一个单链表时，只需声明一个头指针L，指向单链表的第一个结点&#x2F;&#x2F;初始化一个单链表(带头结点)bool InitList(LinkList *L)&#123; (*L)&#x3D;(LNode *)malloc(sizeof(LNode)); &#x2F;&#x2F;分配一个头结点,并使得头指针*L指向这个头结点 if((*L) &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;内存不足，分配失败 return false; &#125; (*L)-&gt;data&#x3D;0; &#x2F;&#x2F;头结点不存储数据 (*L)-&gt;next&#x3D;NULL; &#x2F;&#x2F;头结点之后暂时还没有结点 return true;&#125;&#x2F;&#x2F;按位查找，返回第i个元素(带头结点)LNode * GetElem(LinkList *L,int i)&#123; if(i&lt;0)&#123; return NULL; &#125; LNode *p; &#x2F;&#x2F;指针p指向当前扫描到的结点 int j&#x3D;0; &#x2F;&#x2F;当前p指向的是第几个结点 p&#x3D;*L; &#x2F;&#x2F;L指向头结点，头结点是第0个结点（不存数据） while(p !&#x3D; NULL &amp;&amp; j&lt;i)&#123; &#x2F;&#x2F;循环找到第i个结点 p&#x3D;p-&gt;next; j++; &#125; return p;&#125;int main()&#123; LinkList L; &#x2F;&#x2F;等价于LNode *L; 声明一个指向单链表的第一个结点的指针，注意此处并没有创建一个结点 InitList(&amp;L); &#x2F;&#x2F;初始化一个空表 &#x2F;&#x2F;...后续代码 LNode * a&#x3D;GetElem(&amp;L, 3);&#125; 单链表的按值查找(带头结点)：在表L中查找具有给定关键字值的元素,平均时间复杂度O(n) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;typedef struct LNode&#123; &#x2F;&#x2F;LNode:结点 int data; &#x2F;&#x2F;数据域：每个结点存放一个数据元素 struct LNode *next; &#x2F;&#x2F;指针域：指针指向下一个结点&#125;LNode,*LinkList; &#x2F;&#x2F;typedef struct LNode *LinkList; 要表示一个单链表时，只需声明一个头指针L，指向单链表的第一个结点&#x2F;&#x2F;初始化一个单链表(带头结点)bool InitList(LinkList *L)&#123; (*L)&#x3D;(LNode *)malloc(sizeof(LNode)); &#x2F;&#x2F;分配一个头结点,并使得头指针*L指向这个头结点 if((*L) &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;内存不足，分配失败 return false; &#125; (*L)-&gt;data&#x3D;0; &#x2F;&#x2F;头结点不存储数据 (*L)-&gt;next&#x3D;NULL; &#x2F;&#x2F;头结点之后暂时还没有结点 return true;&#125;&#x2F;&#x2F;按值查找，找到数据域&#x3D;&#x3D;e的结点(带头结点)LNode * LocateElem(LinkList *L,int e)&#123; LNode *p &#x3D;(*L)-&gt;next; &#x2F;&#x2F;从第1个结点开始查找数据域为e的结点 while(p !&#x3D; NULL &amp;&amp; p-&gt;data !&#x3D; e)&#123; p&#x3D;p-&gt;next; &#125; return p; &#x2F;&#x2F;找到后返回该结点指针，否则返回NULL&#125;&#x2F;&#x2F;求表的长度（时间复杂度O(n)）int Length(LinkList *L)&#123; int len&#x3D;0; &#x2F;&#x2F;统计表长 LNode *p&#x3D;*L; while(p-&gt;next !&#x3D; NULL)&#123; p&#x3D;p-&gt;next; len++; &#125; return len;&#125;int main()&#123; LinkList L; &#x2F;&#x2F;等价于LNode *L; 声明一个指向单链表的第一个结点的指针，注意此处并没有创建一个结点 InitList(&amp;L); &#x2F;&#x2F;初始化一个空表 &#x2F;&#x2F;...后续代码 LNode * a&#x3D;LocateElem(&amp;L, 3); &#x2F;&#x2F;找到数据域为3的结点，并返回 int b&#x3D;Length(&amp;L); &#x2F;&#x2F;返回表的长度&#125;","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"单链表的建立","slug":"数据结构、算法笔记/单链表的建立","date":"2020-01-21T16:00:00.000Z","updated":"2021-06-26T16:04:17.555Z","comments":true,"path":"2020/01/22/数据结构、算法笔记/单链表的建立/","link":"","permalink":"http://example.com/2020/01/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E5%BB%BA%E7%AB%8B/","excerpt":"","text":"如果给你很多个数据元素，要把它们存到一个空单链表里？ 尾插法(带头结点)，时间复杂度为O(n)：将数据元素一个一个的插入到单链表的尾部 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;typedef struct LNode&#123; &#x2F;&#x2F;LNode:结点 int data; &#x2F;&#x2F;数据域：每个结点存放一个数据元素 struct LNode *next; &#x2F;&#x2F;指针域：指针指向下一个结点&#125;LNode,*LinkList; &#x2F;&#x2F;typedef struct LNode *LinkList; 要表示一个单链表时，只需声明一个头指针L，指向单链表的第一个结点&#x2F;&#x2F;初始化一个单链表(带头结点)bool InitList(LinkList *L)&#123; (*L)&#x3D;(LNode *)malloc(sizeof(LNode)); &#x2F;&#x2F;分配一个头结点,并使得头指针*L指向这个头结点 if((*L) &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;内存不足，分配失败 return false; &#125; (*L)-&gt;data&#x3D;0; &#x2F;&#x2F;头结点不存储数据 (*L)-&gt;next&#x3D;NULL; &#x2F;&#x2F;头结点之后暂时还没有结点 return true;&#125;&#x2F;&#x2F;尾插法建立单链表LinkList List_TailInsert(LinkList *L)&#123; int x; LNode *s,*r&#x3D;*L; &#x2F;&#x2F;r为表尾指针 scanf(&quot;%d\\n&quot;,&amp;x); &#x2F;&#x2F;输入结点的值 while(x !&#x3D; 9999)&#123; &#x2F;&#x2F;输入9999表示结束 s&#x3D;(LNode *)malloc(sizeof(LNode)); s-&gt;data&#x3D;x; r-&gt;next&#x3D;s; r&#x3D;s; &#x2F;&#x2F;r指向新的表尾结点，永远保持r指向最后一个结点 scanf(&quot;%d\\n&quot;,&amp;x); &#125; r-&gt;next&#x3D;NULL; &#x2F;&#x2F;尾结点指针置空 return *L;&#125;int main()&#123; LinkList L; &#x2F;&#x2F;等价于LNode *L; 声明一个指向单链表的第一个结点的指针，注意此处并没有创建一个结点 InitList(&amp;L); &#x2F;&#x2F;初始化一个空表 LinkList a&#x3D;List_TailInsert(&amp;L); &#x2F;&#x2F;...后续代码&#125; 头插法(带头结点)：将数据元素一个一个的插入到头结点之后(逆向建立单链表)，注意是每一个数据元素都放到头结点后一个的位置 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;typedef struct LNode&#123; &#x2F;&#x2F;LNode:结点 int data; &#x2F;&#x2F;数据域：每个结点存放一个数据元素 struct LNode *next; &#x2F;&#x2F;指针域：指针指向下一个结点&#125;LNode,*LinkList; &#x2F;&#x2F;typedef struct LNode *LinkList; 要表示一个单链表时，只需声明一个头指针L，指向单链表的第一个结点&#x2F;&#x2F;初始化一个单链表(带头结点)bool InitList(LinkList *L)&#123; (*L)&#x3D;(LNode *)malloc(sizeof(LNode)); &#x2F;&#x2F;分配一个头结点,并使得头指针*L指向这个头结点 if((*L) &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;内存不足，分配失败 return false; &#125; (*L)-&gt;data&#x3D;0; &#x2F;&#x2F;头结点不存储数据 (*L)-&gt;next&#x3D;NULL; &#x2F;&#x2F;头结点之后暂时还没有结点 return true;&#125;&#x2F;&#x2F;头插法建立单链表LinkList List_HeadInsert(LinkList *L)&#123; int x; LNode *s; scanf(&quot;%d\\n&quot;,&amp;x); &#x2F;&#x2F;输入结点的值 while(x !&#x3D; 9999)&#123; &#x2F;&#x2F;输入9999表示结束 s&#x3D;(LNode *)malloc(sizeof(LNode)); s-&gt;data&#x3D;x; s-&gt;next&#x3D;(*L)-&gt;next; &#x2F;&#x2F;s-&gt;next指向NULL (*L)-&gt;next&#x3D;s; &#x2F;&#x2F;将新结点插入表中，L为头指针 scanf(&quot;%d\\n&quot;,&amp;x); &#125; return *L;&#125;int main()&#123; LinkList L; &#x2F;&#x2F;等价于LNode *L; 声明一个指向单链表的第一个结点的指针，注意此处并没有创建一个结点 InitList(&amp;L); &#x2F;&#x2F;初始化一个空表 LinkList a&#x3D;List_HeadInsert(&amp;L); &#x2F;&#x2F;...后续代码&#125;","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"双链表","slug":"数据结构、算法笔记/双链表","date":"2020-01-20T16:00:00.000Z","updated":"2021-06-26T15:58:59.947Z","comments":true,"path":"2020/01/21/数据结构、算法笔记/双链表/","link":"","permalink":"http://example.com/2020/01/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%8F%8C%E9%93%BE%E8%A1%A8/","excerpt":"","text":"单链表：无法逆向检索，有时候不太方便双链表：可进可退，但存储密度要更低一点 双链表的初始化、插入、删除(带头结点)： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;typedef struct DNode&#123; int data; &#x2F;&#x2F;数据域 struct DNode *prior,*next; &#x2F;&#x2F;指针域&#125;DNode,*DLinklist; &#x2F;&#x2F;DLinklist等价于DNode *&#x2F;&#x2F;初始化双链表bool InitDLinkList(DLinklist *L)&#123; (*L)&#x3D;(DNode *)malloc(sizeof(DNode)); &#x2F;&#x2F;分配一个头结点 if((*L) &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;内存不足，分配失败 return false; &#125; (*L)-&gt;prior&#x3D;NULL; &#x2F;&#x2F;头结点的prior永远指向NULL (*L)-&gt;next&#x3D;NULL; &#x2F;&#x2F;头结点之后暂时还没有结点 return true;&#125;&#x2F;&#x2F;判断双链表是否为空(带头结点)bool Empty(DLinklist *L)&#123; if((*L)-&gt;next &#x3D;&#x3D; NULL)&#123; return true; &#125; else&#123; return false; &#125;&#125;&#x2F;&#x2F;双链表的插入&#x2F;&#x2F;在p结点之后插入s结点&#x2F;&#x2F;如果要按位序插入，只需要从头结点找到这个位序的前驱结点，然后对这个前驱结点进行后插操作&#x2F;&#x2F;前插操作也是找到该结点的前驱结点，然后对这个前驱结点进行后插操作bool InsertNextDNode(DNode *p,DNode *s)&#123; if(p &#x3D;&#x3D; NULL || s &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;非法参数 return false; &#125; s-&gt;next&#x3D;p-&gt;next; &#x2F;&#x2F;将结点*s插入到结点*p之后 if(p-&gt;next !&#x3D; NULL)&#123; &#x2F;&#x2F;如果p结点有后继结点[如果是循环双链表，没有这个条件判断也是正确的] p-&gt;next-&gt;prior&#x3D;s; &#125; s-&gt;prior&#x3D;p; p-&gt;next&#x3D;s; return true;&#125;&#x2F;&#x2F;双链表的删除&#x2F;&#x2F;删除p结点的后继结点bool DeleteNextDNode(DNode *p)&#123; if(p &#x3D;&#x3D; NULL)&#123; return false; &#125; DNode *q&#x3D;p-&gt;next; &#x2F;&#x2F;找到p的后继结点q if(q &#x3D;&#x3D; NULL)&#123; return false; &#x2F;&#x2F;p没有后继 &#125; p-&gt;next&#x3D;q-&gt;next; if(q-&gt;next !&#x3D; NULL)&#123; &#x2F;&#x2F;q结点不是最后一个结点 q-&gt;next-&gt;prior&#x3D;p; &#125; free(q); &#x2F;&#x2F;释放结点空间 return true;&#125;&#x2F;&#x2F;销毁一个双链表void DestoryList(DLinklist *L)&#123; &#x2F;&#x2F;循环释放各个数据结点 while((*L)-&gt;next !&#x3D; NULL)&#123; DeleteNextDNode(*L); &#125; free(L); &#x2F;&#x2F;释放头结点 L&#x3D;NULL; &#x2F;&#x2F;头指针指向NULL&#125;int main()&#123; DLinklist L; InitDLinkList(&amp;L); &#x2F;&#x2F;初始化双链表 &#x2F;&#x2F;...后续代码&#125; 双链表的遍历[双链表不可随机存取，按位查找，按值查找操作都只能用遍历的方式实现，时间复杂度O(n)] 123456789101112&#x2F;&#x2F;后向遍历while(p !&#x3D; NULL)&#123; p&#x3D;p-&gt;next;&#125;&#x2F;&#x2F;前向遍历while(p !&#x3D; NULL)&#123; p&#x3D;p-&gt;prior;&#125;&#x2F;&#x2F;前向遍历，跳过头结点while(p-&gt;prior !&#x3D; NULL)&#123; p&#x3D;p-&gt;prior;&#125;","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"循环链表","slug":"数据结构、算法笔记/循环链表","date":"2020-01-19T16:00:00.000Z","updated":"2021-06-26T15:56:41.629Z","comments":true,"path":"2020/01/20/数据结构、算法笔记/循环链表/","link":"","permalink":"http://example.com/2020/01/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/","excerpt":"","text":"单链表：表尾结点的next指针指向NULL，从一个结点出发只能找到后续的各个结点循环单链表：表尾结点的next指针指向头结点，从一个结点出发可以找到其他任何一个结点 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;typedef struct LNode&#123; int data; &#x2F;&#x2F;数据域 struct LNode *next; &#x2F;&#x2F;指针域&#125;LNode,*LinkList; &#x2F;&#x2F;LinkList等价于LNode *&#x2F;&#x2F;初始化一个循环单链表bool InitList(LinkList *L)&#123; (*L)&#x3D;(LNode *)malloc(sizeof(LNode)); &#x2F;&#x2F;分配一个头结点 if((*L) &#x3D;&#x3D; NULL)&#123; return false; &#x2F;&#x2F;内存不足，分配失败 &#125; (*L)-&gt;next&#x3D;(*L); &#x2F;&#x2F;头结点next指针指向头结点 return true;&#125;&#x2F;&#x2F;判断循环单链表是否为空bool Empty(LinkList *L)&#123; if((*L)-&gt;next &#x3D;&#x3D; (*L))&#123; return true; &#125; else&#123; return false; &#125;&#125;&#x2F;&#x2F;判断结点p是否为循环单链表的表尾结点bool isTail(LinkList *L,LNode *p)&#123; if(p-&gt;next &#x3D;&#x3D; (*L))&#123; return true; &#125; else&#123; return false; &#125;&#125;int main()&#123; LinkList L; InitList(&amp;L); &#x2F;&#x2F;初始化双链表 &#x2F;&#x2F;...后续代码&#125; 双链表：表头结点的prior指向NULL，表尾结点的next指向NULL循环双链表：表头结点的prior指向表尾结点，表尾结点的next指向头结点 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;typedef struct DNode&#123; int data; &#x2F;&#x2F;数据域 struct DNode *prior,*next; &#x2F;&#x2F;指针域&#125;DNode,*DLinklist; &#x2F;&#x2F;DLinklist等价于DNode *&#x2F;&#x2F;初始化空的循环双链表bool InitDLinkList(DLinklist *L)&#123; (*L)&#x3D;(DNode *)malloc(sizeof(DNode)); &#x2F;&#x2F;分配一个头结点 if((*L) &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;内存不足，分配失败 return false; &#125; (*L)-&gt;prior&#x3D;(*L); &#x2F;&#x2F;头结点的prior指向头结点 (*L)-&gt;next&#x3D;(*L); &#x2F;&#x2F;头结点的next指向头结点 return true;&#125;&#x2F;&#x2F;判断循环双链表是否为空(带头结点)bool Empty(DLinklist *L)&#123; if((*L)-&gt;next &#x3D;&#x3D; (*L))&#123; return true; &#125; else&#123; return false; &#125;&#125;&#x2F;&#x2F;判断结点p是否为循环双链表的表尾结点bool isTail(DLinklist *L,DNode *p)&#123; if(p-&gt;next &#x3D;&#x3D; (*L))&#123; return true; &#125; else&#123; return false; &#125;&#125;int main()&#123; DLinklist L; InitDLinkList(&amp;L); &#x2F;&#x2F;初始化循环双链表 &#x2F;&#x2F;...后续代码&#125;","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"静态链表","slug":"数据结构、算法笔记/静态链表","date":"2020-01-18T16:00:00.000Z","updated":"2021-06-26T16:01:26.653Z","comments":true,"path":"2020/01/19/数据结构、算法笔记/静态链表/","link":"","permalink":"http://example.com/2020/01/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/","excerpt":"","text":"静态链表：用数组的方式实现的链表 优点：增、删操作不需要大量移动元素缺点：不能随机存取，只能从头结点开始依次往后查找；容量固定不可变 适用场景：不支持指针的低级语言；数据元素数量固定不变的场景(如操作系统的文件分配表FAT) 123456789101112131415161718192021222324252627#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;#define MaxSize 10 &#x2F;&#x2F;静态链表的最大长度&#x2F;&#x2F;用代码定义一个静态链表struct Node&#123; int data; &#x2F;&#x2F;存储数据元素 int next; &#x2F;&#x2F;下一个元素的数组下标&#125;;&#x2F;&#x2F;初始化静态链表：把a[0]的next设为-1，把其他结点的next设为一个特殊值用来表示结点空闲，如-2&#x2F;&#x2F;查找：从头结点出发挨个往后遍历结点（O(n)）&#x2F;&#x2F;插入位序为i的结点：1.找到一个空的结点，存入数据元素【如何判断结点为空？通过特殊值来判断】 2.从头结点出发找到位序为i-1的结点 3.修改i-1号结点的next 4.修改新结点的next&#x2F;&#x2F;删除某个结点：1.从头结点出发找到前驱结点 2.修改前驱结点的游标 3.被删除结点的next设为特殊值int main()&#123; struct Node a[MaxSize]; &#x2F;&#x2F;数组a作为静态链表 &#x2F;&#x2F;...后续代码&#125;","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"顺序表和链表的比较","slug":"数据结构、算法笔记/顺序表和链表的比较","date":"2020-01-17T16:00:00.000Z","updated":"2021-06-26T15:58:28.027Z","comments":true,"path":"2020/01/18/数据结构、算法笔记/顺序表和链表的比较/","link":"","permalink":"http://example.com/2020/01/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E9%A1%BA%E5%BA%8F%E8%A1%A8%E5%92%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%AF%94%E8%BE%83/","excerpt":"","text":"逻辑结构：都属于线性表，都是线性结构 存储结构： 顺序表：顺序存储，优点是支持随机存取，存储密度高；缺点是大片连续空间分配不方便，改变容量不方便 链表：链式存储，优点是离散的小空间分配方便，改变容量方便；缺点是不可随机存取，存储密度低 使用场景： 链表：表长难以预估，经常要增加/删除元素 顺序表：表长可预估，查询(搜索)操作较多","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"栈的基本概念","slug":"数据结构、算法笔记/栈的基本概念","date":"2020-01-16T16:00:00.000Z","updated":"2021-06-26T15:56:32.956Z","comments":true,"path":"2020/01/17/数据结构、算法笔记/栈的基本概念/","link":"","permalink":"http://example.com/2020/01/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%A0%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","excerpt":"","text":"栈(Stack)是只允许在一端进行插入或删除操作的线性表【空栈、栈顶：允许插入和删除的一端、栈底：不允许插入和删除的一端】 特点：后进先出【Last In First Out(LIFO)】 栈的基本操作： InitStack(&amp;S)：初始化栈，构造一个空栈S，分配内存空间 DestroyStack(&amp;L)：销毁栈，销毁并释放栈S所占用的内存空间 Push(&amp;S,x)：进栈，若栈S未满，则将x加入使之成为新栈顶 Pop(&amp;S,&amp;x)：出栈，若栈S非空，则弹出栈顶元素，并用x返回【删除栈顶元素】 GetTop(S,&amp;x)：读栈顶元素，若栈S非空，则用x返回栈顶元素【不删除栈顶元素，查栈的使用场景中大多只访问栈顶元素】 StackEmpty(S)：判读一个栈S是否为空，若S为空，则返回true，否则返回false","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"栈的顺序存储实现","slug":"数据结构、算法笔记/栈的顺序存储实现","date":"2020-01-15T16:00:00.000Z","updated":"2021-06-26T15:56:15.704Z","comments":true,"path":"2020/01/16/数据结构、算法笔记/栈的顺序存储实现/","link":"","permalink":"http://example.com/2020/01/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%A0%88%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AD%98%E5%82%A8%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"顺序栈的缺点：栈的大小不可变 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;#define MaxSize 10 &#x2F;&#x2F;定义栈中元素的最大个数&#x2F;&#x2F;顺序栈的定义typedef struct&#123; int data[MaxSize]; &#x2F;&#x2F;静态数组存放栈中元素 int top; &#x2F;&#x2F;栈顶指针，top指向当前栈顶元素&#125;SqStack; &#x2F;&#x2F;Sq：sequence，顺序&#x2F;&#x2F;初始化栈void InitStack(SqStack *S)&#123; S-&gt;top&#x3D;-1; &#x2F;&#x2F;初始化栈顶指针&#125;&#x2F;&#x2F;判断栈空bool StackEmpty(SqStack *S)&#123; if(S-&gt;top &#x3D;&#x3D; -1)&#123; return true; &#x2F;&#x2F;栈空 &#125; else&#123; return false; &#x2F;&#x2F;不空 &#125;&#125;&#x2F;&#x2F;进栈操作bool Push(SqStack *S,int x)&#123; if(S-&gt;top&#x3D;&#x3D;MaxSize-1)&#123; return false; &#x2F;&#x2F;栈满，报错 &#125; S-&gt;top&#x3D;S-&gt;top+1; &#x2F;&#x2F;指针先+1 S-&gt;data[S-&gt;top]&#x3D;x; &#x2F;&#x2F;新元素入栈 return true;&#125;&#x2F;&#x2F;出栈操作,并用x返回bool Pop(SqStack *S,int *x)&#123; if(S-&gt;top&#x3D;&#x3D;-1)&#123; return false; &#x2F;&#x2F;栈空，报错 &#125; (*x)&#x3D;S-&gt;data[S-&gt;top]; &#x2F;&#x2F;栈顶元素先出栈 S-&gt;top&#x3D;S-&gt;top-1; &#x2F;&#x2F;指针再-1，数据还残留在内存中，只是逻辑上被删除了 return true;&#125;&#x2F;&#x2F;读栈顶元素操作bool GetTop(SqStack *S,int *x)&#123; if(S-&gt;top&#x3D;&#x3D;-1)&#123; return false; &#x2F;&#x2F;栈空，报错 &#125; (*x)&#x3D;S-&gt;data[S-&gt;top]; &#x2F;&#x2F;x记录栈顶元素 return true;&#125;int main()&#123; SqStack S; &#x2F;&#x2F;声明一个顺序栈(分配空间) InitStack(&amp;S); &#x2F;&#x2F;...后续操作&#125; 共享栈： 12345678910111213141516171819202122232425262728#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;#define MaxSize 10 &#x2F;&#x2F;定义栈中元素的最大个数&#x2F;&#x2F;共享栈：两个栈共享同一片空间typedef struct&#123; int data[MaxSize]; &#x2F;&#x2F;静态数组存放栈中元素 int top0; &#x2F;&#x2F;0号栈顶指针 int top1; &#x2F;&#x2F;1号栈顶指针&#125;ShStack;&#x2F;&#x2F;初始化栈void InitStack(ShStack *S)&#123; S-&gt;top0&#x3D;-1; &#x2F;&#x2F;初始化栈顶指针 S-&gt;top1&#x3D;MaxSize;&#125;&#x2F;&#x2F;栈满条件：top0+1&#x3D;&#x3D;top1int main()&#123; ShStack S; &#x2F;&#x2F;声明一个顺序栈(分配空间) InitStack(&amp;S); &#x2F;&#x2F;...后续操作&#125;","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"栈的链式存储实现","slug":"数据结构、算法笔记/栈的链式存储实现","date":"2020-01-14T16:00:00.000Z","updated":"2021-06-26T15:56:24.164Z","comments":true,"path":"2020/01/15/数据结构、算法笔记/栈的链式存储实现/","link":"","permalink":"http://example.com/2020/01/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%A0%88%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AD%98%E5%82%A8%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"进栈操作：头插法建立单链表(对头结点的后插操作) 出栈操作：单链表的删除操作(对头结点的后删操作) 123456&#x2F;&#x2F;链栈的定义(带头结点的初始化，不带头结点的初始化)typedef struct Linknode&#123; int data; &#x2F;&#x2F;数据域 struct Linknode *next; &#x2F;&#x2F;指针域&#125;*Listack;","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"队列的基本概念","slug":"数据结构、算法笔记/队列的基本概念","date":"2020-01-13T16:00:00.000Z","updated":"2021-06-26T16:03:21.852Z","comments":true,"path":"2020/01/14/数据结构、算法笔记/队列的基本概念/","link":"","permalink":"http://example.com/2020/01/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E9%98%9F%E5%88%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","excerpt":"","text":"队列的定义：是只允许在一端进行插入，在另一端删除的线性表【空队列、队头：允许删除的一端、队尾：允许插入的一端】 特点：先进入队列的元素先出队【First In First Out(FIFO)】 队列的基本操作： InitQueue(&amp;Q)：初始化队列，构造一个空队列Q DestroyQueue(&amp;Q)：销毁队列，销毁并释放队列Q所占用的内存空间 EnQueue(&amp;Q,x)：入队，若队列Q未满，则将x加入使之成为新队尾 DeQueue(&amp;Q,&amp;x)：出队，若队列Q非空，则删除队头元素，并用x返回【删除队头元素】 GetHead(Q,&amp;x)：读队头元素，若队列Q非空，则用x返回队头元素【不删除队头元素，查队列的使用场景中大多只访问队头元素】 QueueEmpty(Q)：判断一个队列是否为空，若Q为空，则返回true，否则返回false","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"队列的顺序实现","slug":"数据结构、算法笔记/队列的顺序实现","date":"2020-01-12T16:00:00.000Z","updated":"2021-06-26T16:03:05.330Z","comments":true,"path":"2020/01/13/数据结构、算法笔记/队列的顺序实现/","link":"","permalink":"http://example.com/2020/01/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E9%98%9F%E5%88%97%E7%9A%84%E9%A1%BA%E5%BA%8F%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;#define MaxSize 10 &#x2F;&#x2F;定义队列中元素的最大个数&#x2F;&#x2F;队列的顺序实现【front指向队头元素，rear指向队尾元素的后一个位置；还有一种情况是rear指向队尾元素】typedef struct&#123; int data[MaxSize]; &#x2F;&#x2F;用静态数组存放队列元素 int front,rear; &#x2F;&#x2F;队头指针和队尾指针 &#x2F;&#x2F;int size; &#x2F;&#x2F;第二种判断队列已满&#x2F;已空的方法，定义一个size：队列当前长度 &#x2F;&#x2F;int tag; &#x2F;&#x2F;第三种判断队列已满&#x2F;已空的方法：最近进行的是删除还是插入&#125;SqQueue;&#x2F;&#x2F;初始化队列void InitQueue(SqQueue *Q)&#123; Q-&gt;front&#x3D;Q-&gt;rear&#x3D;0; &#x2F;&#x2F;初始时队头、队尾指针指向0 &#x2F;&#x2F;Q-&gt;size&#x3D;0; &#x2F;&#x2F;第二种判断队列已满&#x2F;已空的方法，插入成功size++，删除成功size--,队空条件:size&#x3D;&#x3D;0，队满条件：size&#x3D;&#x3D;MaxSize &#x2F;&#x2F;Q-&gt;tag&#x3D;0; &#x2F;&#x2F;第三种判断队列已满&#x2F;已空的方法：每次删除操作成功时，都令tag&#x3D;0,每次插入操作成功时都令tag&#x3D;1；只有删除操作，才可能导致队空，只有插入操作，才可能导致队满；队空条件：front&#x3D;&#x3D;rear &amp;&amp; tag&#x3D;&#x3D;0，队满条件：front&#x3D;&#x3D;rear &amp;&amp; tag&#x3D;&#x3D;1&#125;&#x2F;&#x2F;判断队列是否为空bool QueueEmpty(SqQueue *Q)&#123; if(Q-&gt;rear&#x3D;&#x3D;Q-&gt;front)&#123; &#x2F;&#x2F;队空条件 return true; &#125; else&#123; return false; &#125;&#125;&#x2F;&#x2F;循环队列：入队操作bool EnQueue(SqQueue *Q,int x)&#123; if((Q-&gt;rear+1)%MaxSize &#x3D;&#x3D; Q-&gt;front)&#123; &#x2F;&#x2F;队列已满的条件：队尾指针的再下一个位置是队头，代价：牺牲一个存储单元 return false; &#x2F;&#x2F;队满则报错 &#125; Q-&gt;data[Q-&gt;rear]&#x3D;x; &#x2F;&#x2F;新元素插入队尾 Q-&gt;rear&#x3D;(Q-&gt;rear+1)%MaxSize; &#x2F;&#x2F;队尾指针+1取模,用模运算将存储空间在逻辑上变成了“环状” &#x2F;&#x2F;这是rear指向队尾元素的情况 &#x2F;&#x2F;Q-&gt;rear&#x3D;(Q-&gt;rear+1)%MaxSize; &#x2F;&#x2F;Q-&gt;data[Q-&gt;rear]&#x3D;x; return true;&#125;&#x2F;&#x2F;循环队列：出队操作&#x2F;&#x2F;出队：删除一个队头元素，并用x返回bool DeQueue(SqQueue *Q,int *x)&#123; if(Q-&gt;rear&#x3D;&#x3D;Q-&gt;front)&#123; return false; &#x2F;&#x2F;队空则报错 &#125; (*x)&#x3D;Q-&gt;data[Q-&gt;front]; Q-&gt;front&#x3D;(Q-&gt;front+1)%MaxSize; &#x2F;&#x2F;队头指针后移 return true;&#125;&#x2F;&#x2F;获取队头元素的值，用x返回bool GetHead(SqQueue *Q,int *x)&#123; if(Q-&gt;rear&#x3D;&#x3D;Q-&gt;front)&#123; return false; &#125; (*x)&#x3D;Q-&gt;data[Q-&gt;front]; return true;&#125;&#x2F;&#x2F;队列元素个数：(rear+MaxSize-front)%MaxSizeint main()&#123; SqQueue Q; &#x2F;&#x2F;声明一个队列，顺序存储 InitQueue(&amp;Q); &#x2F;&#x2F;...后续操作&#125;","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"队列的链式实现","slug":"数据结构、算法笔记/队列的链式实现","date":"2020-01-11T16:00:00.000Z","updated":"2021-06-26T16:03:12.906Z","comments":true,"path":"2020/01/12/数据结构、算法笔记/队列的链式实现/","link":"","permalink":"http://example.com/2020/01/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E9%98%9F%E5%88%97%E7%9A%84%E9%93%BE%E5%BC%8F%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"顺序存储：预分配的空间耗尽时队满链式存储：一般不会队满，除非内存不足 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;&#x2F;&#x2F;队列的链式实现(带头结点和不带头结点)typedef struct LinkNode&#123; &#x2F;&#x2F;链式队列结点 int data; struct LinkNode *next;&#125;LinkNode;typedef struct&#123; &#x2F;&#x2F;链式队列 LinkNode *front,*rear; &#x2F;&#x2F;队列的队头和队尾指针 &#x2F;&#x2F;int length; &#x2F;&#x2F;求队列的长度&#125;LinkQueue;&#x2F;&#x2F;初始化队列(带头结点)void InitQueue(LinkQueue *Q)&#123; &#x2F;&#x2F;初始时，front、rear都指向头结点 Q-&gt;front&#x3D;Q-&gt;rear&#x3D;(LinkNode *)malloc(sizeof(LinkNode)); Q-&gt;front-&gt;next&#x3D;NULL;&#125;&#x2F;&#x2F;判断队列是否为空bool IsEmpty(LinkQueue *Q)&#123; if(Q-&gt;front&#x3D;&#x3D;Q-&gt;rear)&#123; return true; &#125; else&#123; return false; &#125;&#125;&#x2F;&#x2F;初始化(不带头结点)&#x2F;&#x2F;void InitQueue(LinkQueue *Q)&#123;&#x2F;&#x2F; &#x2F;&#x2F;初始时，front、rear都指向NULL&#x2F;&#x2F; Q-&gt;front&#x3D;NULL;&#x2F;&#x2F; Q-&gt;rear&#x3D;NULL;&#x2F;&#x2F;&#125;&#x2F;&#x2F;判断队列是否为空(不带头结点)&#x2F;&#x2F;bool IsEmpty(LinkQueue *Q)&#123;&#x2F;&#x2F; if(Q-&gt;front&#x3D;&#x3D;NULL)&#123;&#x2F;&#x2F; return true;&#x2F;&#x2F; &#125;&#x2F;&#x2F; else&#123;&#x2F;&#x2F; return false;&#x2F;&#x2F; &#125;&#x2F;&#x2F;&#125;&#x2F;&#x2F;新元素入队(带头结点)void EnQueue(LinkQueue *Q,int x)&#123; LinkNode *s&#x3D;(LinkNode *)malloc(sizeof(LinkNode)); s-&gt;data&#x3D;x; s-&gt;next&#x3D;NULL; Q-&gt;rear-&gt;next&#x3D;s; &#x2F;&#x2F;新结点插入到rear之后 Q-&gt;rear&#x3D;s; &#x2F;&#x2F;修改表尾指针&#125;&#x2F;&#x2F;新元素入队(不带头结点)&#x2F;&#x2F;void EnQueue(LinkQueue *Q,int x)&#123;&#x2F;&#x2F; LinkNode *s&#x3D;(LinkNode *)malloc(sizeof(LinkNode));&#x2F;&#x2F; s-&gt;data&#x3D;x;&#x2F;&#x2F; s-&gt;next&#x3D;NULL;&#x2F;&#x2F; if(Q-&gt;front &#x3D;&#x3D; NULL)&#123; &#x2F;&#x2F;在空队列中插入第一个元素&#x2F;&#x2F; Q-&gt;front&#x3D;s; &#x2F;&#x2F;修改队头队尾指针&#x2F;&#x2F; Q-&gt;rear&#x3D;s; &#x2F;&#x2F;不带头结点的队列，第一个元素入队时需要特别处理&#x2F;&#x2F; &#125;else&#123;&#x2F;&#x2F; Q-&gt;rear-&gt;next&#x3D;s; &#x2F;&#x2F;新结点插入到rear之后&#x2F;&#x2F; Q-&gt;rear&#x3D;s; &#x2F;&#x2F;修改rear指针&#x2F;&#x2F; &#125;&#x2F;&#x2F;&#125;&#x2F;&#x2F;队头元素出队(带头结点)bool DeQueue(LinkQueue *Q,int *x)&#123; if(Q-&gt;front&#x3D;&#x3D;Q-&gt;rear)&#123; return false; &#x2F;&#x2F;空队 &#125; LinkNode *p&#x3D;Q-&gt;front-&gt;next; *x&#x3D;p-&gt;data; &#x2F;&#x2F;用变量x返回队头元素 Q-&gt;front-&gt;next&#x3D;p-&gt;next; &#x2F;&#x2F;修改头结点的next指针 if(Q-&gt;rear&#x3D;&#x3D;p)&#123; &#x2F;&#x2F;此次是最后一个结点出队 Q-&gt;rear&#x3D;Q-&gt;front; &#x2F;&#x2F;修改rear指针 &#125; free(p); &#x2F;&#x2F;释放结点空间 return true;&#125;&#x2F;&#x2F;队头元素出队(不带头结点)&#x2F;&#x2F;bool DeQueue(LinkQueue *Q,int *x)&#123;&#x2F;&#x2F; if(Q-&gt;front&#x3D;&#x3D;NULL)&#123;&#x2F;&#x2F; return false; &#x2F;&#x2F;空队&#x2F;&#x2F; &#125;&#x2F;&#x2F; LinkNode *p&#x3D;Q-&gt;front; &#x2F;&#x2F;p指向此次出队的结点&#x2F;&#x2F; *x&#x3D;p-&gt;data; &#x2F;&#x2F;用变量x返回队头元素&#x2F;&#x2F; Q-&gt;front&#x3D;p-&gt;next; &#x2F;&#x2F;修改front指针&#x2F;&#x2F; if(Q-&gt;rear&#x3D;&#x3D;p)&#123; &#x2F;&#x2F;此次是最后一个结点出队&#x2F;&#x2F; Q-&gt;front&#x3D;NULL; &#x2F;&#x2F;front指向NULL&#x2F;&#x2F; Q-&gt;rear&#x3D;NULL; &#x2F;&#x2F;rear指向NULL&#x2F;&#x2F; &#125;&#x2F;&#x2F; free(p); &#x2F;&#x2F;释放结点空间&#x2F;&#x2F; return true;&#x2F;&#x2F;&#125;int main()&#123; LinkQueue Q; &#x2F;&#x2F;声明一个队列 InitQueue(&amp;Q); &#x2F;&#x2F;初始化队列 &#x2F;&#x2F;...后续操作&#125;","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"双端队列","slug":"数据结构、算法笔记/双端队列","date":"2020-01-10T16:00:00.000Z","updated":"2021-06-26T15:59:08.619Z","comments":true,"path":"2020/01/11/数据结构、算法笔记/双端队列/","link":"","permalink":"http://example.com/2020/01/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97/","excerpt":"","text":"双端队列：只允许从两端插入、两端删除的线性表【若只使用其中一端的插入、删除操作，则效果等同于栈】 输入受限的双端队列：只允许从一端插入、两端删除的线性表 输出受限的双端队列：只允许从两端插入、一端删除的线性表 在栈中合法的输出序列，在双端队列中必定合法","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"栈在括号匹配中的应用","slug":"数据结构、算法笔记/栈在括号匹配中的应用","date":"2020-01-09T16:00:00.000Z","updated":"2021-06-26T15:55:38.204Z","comments":true,"path":"2020/01/10/数据结构、算法笔记/栈在括号匹配中的应用/","link":"","permalink":"http://example.com/2020/01/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%A0%88%E5%9C%A8%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/","excerpt":"","text":"括号匹配问题： 遇到左括号就入栈，遇到右括号就消耗一个左括号 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include&lt;stdio.h&gt;#include&lt;stdbool.h&gt;#include&lt;stdlib.h&gt;&#x2F;&#x2F;万一存满了，可以用链栈#define MaxSize 10 &#x2F;&#x2F;定义栈中元素的最大个数typedef struct&#123; char data[MaxSize]; &#x2F;&#x2F;静态数组存放栈中元素 int top; &#x2F;&#x2F;栈顶指针&#125;SqStack;&#x2F;&#x2F;初始化栈void InitStack(SqStack *S)&#123; S-&gt;top&#x3D;-1; &#x2F;&#x2F;初始化栈顶指针&#125;&#x2F;&#x2F;判断栈空bool StackEmpty(SqStack *S)&#123; if(S-&gt;top &#x3D;&#x3D; -1)&#123; return true; &#x2F;&#x2F;栈空 &#125; else&#123; return false; &#x2F;&#x2F;不空 &#125;&#125;&#x2F;&#x2F;新元素入栈bool Push(SqStack *S,char x)&#123; if(S-&gt;top&#x3D;&#x3D;MaxSize-1)&#123; return false; &#x2F;&#x2F;栈满，报错 &#125; S-&gt;top&#x3D;S-&gt;top+1; &#x2F;&#x2F;指针先+1 S-&gt;data[S-&gt;top]&#x3D;x; &#x2F;&#x2F;新元素入栈 return true;&#125;&#x2F;&#x2F;栈顶元素出栈，用x返回bool Pop(SqStack *S,char *x)&#123; if(S-&gt;top&#x3D;&#x3D;-1)&#123; return false; &#x2F;&#x2F;栈空，报错 &#125; (*x)&#x3D;S-&gt;data[S-&gt;top]; &#x2F;&#x2F;栈顶元素先出栈 S-&gt;top&#x3D;S-&gt;top-1; &#x2F;&#x2F;指针再-1，数据还残留在内存中，只是逻辑上被删除了 return true;&#125;bool bracketCheck(char str[],int length)&#123; SqStack S; InitStack(&amp;S); &#x2F;&#x2F;初始化一个栈 for(int i&#x3D;0;i&lt;length;i++)&#123; if(str[i]&#x3D;&#x3D;&#39;(&#39; || str[i]&#x3D;&#x3D;&#39;[&#39; || str[i]&#x3D;&#x3D;&#39;&#123;&#39;)&#123; Push(&amp;S,str[i]); &#x2F;&#x2F;扫描到左括号，入栈 &#125;else&#123; if(StackEmpty(&amp;S))&#123; &#x2F;&#x2F;扫描到右括号，且当前栈空 return false; &#x2F;&#x2F;匹配失败 &#125; char topElem; Pop(&amp;S,&amp;topElem); &#x2F;&#x2F;栈顶元素出栈 if(str[i]&#x3D;&#x3D;&#39;)&#39; &amp;&amp; topElem !&#x3D; &#39;)&#39;)&#123; return false; &#125; if(str[i]&#x3D;&#x3D;&#39;]&#39; &amp;&amp; topElem !&#x3D; &#39;[&#39;)&#123; return false; &#125; if(str[i]&#x3D;&#x3D;&#39;&#125;&#39; &amp;&amp; topElem !&#x3D; &#39;&#123;&#39;)&#123; return false; &#125; &#125; &#125; return StackEmpty(&amp;S); &#x2F;&#x2F;检索完全部括号后，栈空说明匹配成功&#125;","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"栈在表达式求值中的应用","slug":"数据结构、算法笔记/栈在表达式求值中的应用","date":"2020-01-08T16:00:00.000Z","updated":"2021-06-26T15:56:07.373Z","comments":true,"path":"2020/01/09/数据结构、算法笔记/栈在表达式求值中的应用/","link":"","permalink":"http://example.com/2020/01/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%A0%88%E5%9C%A8%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/","excerpt":"","text":"可以不用界限符也能无歧义的表达运算顺序？【逆波兰表达式=后缀表达式，波兰表达式=前缀表达式】 中缀表达式转后缀表达式：初始化一个栈，用于保存暂时还不能确定运算顺序的运算符从左到右处理各个元素，直到末尾，可能遇到三种情况：1.遇到操作数，直接加入后缀表达式2.遇到界限符，遇到“(”直接入栈，遇到“)”则依次弹出栈内运算符并加入后缀表达式，直到弹出”(“为止，注意：”(“不加入后缀表达式3.遇到运算符，依次弹出栈中优先级高于或等于当前运算符的所有运算符，并加入后缀表达式，若碰到“(”或栈空则停止，之后再把当前运算符入栈按上述方法处理完所有字符后，将栈中剩余运算符依次弹出，并加入后缀表达式 用栈实现后缀表达式的计算：【栈是用于存放当前暂时还不能确定运算次序的操作数】1.从左到右扫描下一个元素，直到处理完所有元素2.若扫描到操作数则压入栈，并回到1；否则执行33.若扫描到运算符，则弹出两个栈顶元素，执行相应运算[注意先出栈的是右操作数]，运算结果压回栈底，回到1若表达式合法，则最后栈中只会留下一个元素，就是最终结果 用栈实现中缀表达式的计算：（中缀转后缀+后缀表达式求值，两个算法的结合）初始化两个栈，操作数栈和运算符栈若扫描到操作数，压入操作数栈若扫描到运算符或界限符，则按照“中缀转后缀”相同相同的逻辑压入运算符栈（期间也会弹出运算符，每当弹出一个运算符时，就需要再弹出两个操作数栈的栈顶元素并执行相应运算，运算结果再压回操作数栈） 用栈实现前缀表达式的计算：1.从右往左扫描下一个元素，直到处理完所有元素2.若扫描到操作数则压入栈，并回到1，否则执行33.若扫描到运算符，则弹出两个栈顶元素，执行相应运算[先出栈的是左操作数]，运算结果压回栈底，回到1","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"栈在递归中的应用","slug":"数据结构、算法笔记/栈在递归中的应用","date":"2020-01-07T16:00:00.000Z","updated":"2021-06-26T15:55:46.538Z","comments":true,"path":"2020/01/08/数据结构、算法笔记/栈在递归中的应用/","link":"","permalink":"http://example.com/2020/01/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%A0%88%E5%9C%A8%E9%80%92%E5%BD%92%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/","excerpt":"","text":"递归函数调用的特点：最后被调用的函数最先执行结束(LIFO) 函数调用时，需要用一个栈存储：调用返回地址、实参、局部变量 适合用“递归”算法解决：可以把原始问题转换为属性相同，但规模较小的问题 递归调用时，函数调用栈可称为“递归工作栈”，每进入一层递归，就将递归调用所需信息压入栈顶，每退出一层递归，就从栈顶弹出相应信息【缺点：效率低，太多层递归可能会导致栈溢出，可能包含很多重复计算】","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"队列的应用","slug":"数据结构、算法笔记/队列的应用","date":"2020-01-06T16:00:00.000Z","updated":"2021-06-26T16:02:56.187Z","comments":true,"path":"2020/01/07/数据结构、算法笔记/队列的应用/","link":"","permalink":"http://example.com/2020/01/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8/","excerpt":"","text":"队列的应用： 树的层次遍历 图的广度优先遍历 队列在操作系统中的应用：多个进程争抢着使用有限的系统资源时，FCFS（First Come First Service，先来先服务）是一种常用策略 打印数据缓冲区：打印机缓冲区用“队列”组织打印数据，可缓解主机与打印机速度不匹配的问题【先来先打印】","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"特殊矩阵的压缩存储","slug":"数据结构、算法笔记/特殊矩阵的压缩存储","date":"2020-01-05T16:00:00.000Z","updated":"2021-06-26T15:57:54.646Z","comments":true,"path":"2020/01/06/数据结构、算法笔记/特殊矩阵的压缩存储/","link":"","permalink":"http://example.com/2020/01/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E7%89%B9%E6%AE%8A%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%AD%98%E5%82%A8/","excerpt":"","text":"普通矩阵的存储：可用二维数组存储【描述矩阵元素时，行、列号通常从1开始，而描述数组时通常下标从0开始】 特殊矩阵（某些特殊矩阵可以压缩存储空间）： 对称矩阵 三角矩阵 三对角矩阵 稀疏矩阵","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"串的定义和基本操作","slug":"数据结构、算法笔记/串的定义和基本操作","date":"2020-01-04T16:00:00.000Z","updated":"2021-06-26T16:04:57.670Z","comments":true,"path":"2020/01/05/数据结构、算法笔记/串的定义和基本操作/","link":"","permalink":"http://example.com/2020/01/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E4%B8%B2%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/","excerpt":"","text":"串：即字符串(String)，是由零个或多个字符组成的有限序列，串中字符的个数n称为串的长度，n=0时的串称为空串 S=&quot;Hello World!&quot;，有的地方用双引号(Java、C)，有的地方用单引号(Python)，注意里面包含空格，空格也是字符 子串：串中任意个连续的字符组成的子序列主串：包含子串的串字符在主串中的位置：字符在串中的序号子串在主串中的位置：子串的第一个字符在主串中的位置【注意位序从1开始，而不是从0开始】 空串：M=””空格串：N=” “，[每个空格字符占1B] 串是一种特殊的线性表，数据元素之间呈线性关系，串的数据对象限定为字符集(如中文字符、英文字符、数字字符、标点字符) 串的基本操作。如增删改查等通常以子串为操作对象 串的基本操作： StrAssign(&amp;T,chars)：赋值操作，把串T赋值为chars StrCopy(&amp;T,S)：复制操作，由串S复制得到串T StrEmpty(S)：判空操作，若S为空串，则返回true，否则返回False StrLength(S)：求串长，返回串S的元素个数 ClearString(&amp;S)：清空操作，将S清为空串 DestroyString(&amp;S)：销毁串，将串S销毁(回收存储空间) Concat(&amp;T,S1,S2)：串联接，用T返回由S1和S2联接而成的新串【问题：存储空间扩展？】 SubString(&amp;Sub,S,pos,len)：求子串，用Sub返回串S的第pos个字符起长度为len的子串 Index(S,T)：定位操作，若主串S中存在与串T值相同的子串，则返回它在主串S中第一次出现的位置；否则函数值为0 StrCompare(S,T)：比较操作，若S&gt;T，则返回值&gt;0；若S=T，则返回值=0；若S&lt;T，则返回值&lt;0【从第一个字符开始往后依次对比，先出现更大字符的串就更大；长串的前缀与短串相同时，长串更大；只有两个串完全相同时才相等】 字符集：英文字符(ASCII字符)、中英文(Unicode字符集，UIF-8,UIF-16)","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"串的存储结构","slug":"数据结构、算法笔记/串的存储结构","date":"2020-01-03T16:00:00.000Z","updated":"2021-06-26T16:05:06.825Z","comments":true,"path":"2020/01/04/数据结构、算法笔记/串的存储结构/","link":"","permalink":"http://example.com/2020/01/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E4%B8%B2%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/","excerpt":"","text":"串的顺序存储：【默认使用方案四】 12345678910111213141516171819202122232425262728293031#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#define MAXIEN 255 &#x2F;&#x2F;预定义最大串长为255&#x2F;&#x2F;静态数组实现(定长顺序存储)typedef struct&#123; char ch[MAXIEN]; &#x2F;&#x2F;每个分量存储一个字符 int length; &#x2F;&#x2F;串的实际长度&#125;SString;&#x2F;&#x2F;动态数组实现(堆分配存储)typedef struct&#123; char *ch; &#x2F;&#x2F;按串长分配存储区，ch指向串的基地址 int length; &#x2F;&#x2F;串的长度&#125;HString;&#x2F;&#x2F;初始化动态数组void Init(HString *S)&#123; S-&gt;ch&#x3D;(char *)malloc(MAXIEN * sizeof(char)); &#x2F;&#x2F;用完需要手动free S-&gt;length&#x3D;0;&#125;int main()&#123; HString S; Init(&amp;S);&#125; 串的基本操作实现： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;stdbool.h&gt;#define MAXIEN 255 &#x2F;&#x2F;预定义最大串长为255&#x2F;&#x2F;静态数组实现(定长顺序存储)typedef struct&#123; char ch[MAXIEN]; &#x2F;&#x2F;每个分量存储一个字符 int length; &#x2F;&#x2F;串的实际长度&#125;SString;&#x2F;&#x2F;基本操作的实现&#x2F;&#x2F;1.求子串：用Sub返回串S的第pos个字符起长度为len的子串bool SubString(SString *Sub,SString *S,int pos,int len)&#123; &#x2F;&#x2F;子串范围越界 if(pos+len-1 &gt; S-&gt;length)&#123; return false; &#125; for(int i&#x3D;pos-1;i&lt;pos+len-1;i++)&#123; Sub-&gt;ch[i-pos+1]&#x3D;S-&gt;ch[i]; &#125; Sub-&gt;length&#x3D;len; return true;&#125;&#x2F;&#x2F;2.比较操作：若S&gt;T，则返回值&gt;0；若S&#x3D;T，则返回值&#x3D;0；若S&lt;T，则返回值&lt;0int StrCompare(SString *S,SString *T)&#123; for(int i&#x3D;1;i&lt;&#x3D;S-&gt;length &amp;&amp; i&lt;&#x3D;T-&gt;length;i++)&#123; if(S-&gt;ch[i] !&#x3D; T-&gt;ch[i])&#123; return S-&gt;ch[i]-T-&gt;ch[i]; &#125; &#125; &#x2F;&#x2F;扫描过的所有字符都相同，则长度长的串更大 return S-&gt;length-T-&gt;length;&#125;&#x2F;&#x2F;求串长，返回串S的元素个数[未完成代码]int StrLength(SString *S)&#123; return 0;&#125;&#x2F;&#x2F;3.定位操作，若主串S中存在与串T值相同的子串，则返回它在主串S中第一次出现的位置，否则函数值为0int Index(SString *S,SString *T)&#123; int i&#x3D;1,n&#x3D;StrLength(S),m&#x3D;StrLength(T); SString sub; &#x2F;&#x2F;用于暂存字符串 while(i&lt;&#x3D;n-m+1)&#123; SubString(&amp;sub, S, i, m); if(StrCompare(&amp;sub, T) !&#x3D; 0)&#123; ++i; &#125;else&#123; return i; &#x2F;&#x2F;返回子串在主串中的位置 &#125; &#125; return 0; &#x2F;&#x2F;S中不存在与T相等的子串&#125;int main()&#123; SString S&#x3D;&#123;&quot;hello world!&quot;,12&#125;; SString Sub&#x3D;&#123;&quot;&quot;,0&#125;; &#x2F;&#x2F;初始化时清空数组 if(SubString(&amp;Sub, &amp;S, 3, 5))&#123; printf(&quot;%s\\n&quot;,Sub.ch); &#125;&#125; 串的链式存储：","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"串的朴素模式匹配算法","slug":"数据结构、算法笔记/串的朴素模式匹配算法","date":"2020-01-02T16:00:00.000Z","updated":"2021-06-26T16:04:50.076Z","comments":true,"path":"2020/01/03/数据结构、算法笔记/串的朴素模式匹配算法/","link":"","permalink":"http://example.com/2020/01/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E4%B8%B2%E7%9A%84%E6%9C%B4%E7%B4%A0%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95/","excerpt":"","text":"一定是主串中存在的才叫“子串” 模式串：想尝试在主串中找到的串，未必存在 串的模式匹配：在主串中找到与模式串相同的子串，并返回其所在位置【就是定位操作】 朴素模式匹配算法： 【比较好的情况：每个子串的第一个字符就与模式串不匹配，若模式串长度为m，主串长度为n，则匹配成功的最好时间复杂度：O(m)，匹配失败的最好时间复杂度：O(n-m+1)=O(n-m)=O(n)】 【若模式串长度为m，主串长度为n，则直接匹配成功/匹配失败最多需要(n-m+1)*m次比较，最坏时间复杂度：O(nm)，这种情况就是每个子串的前m-1个字符都和模式串匹配，只有第m个字符不匹配，所以指针需要回溯重新来匹配】 12345678910111213141516171819202122232425262728293031323334353637#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;stdbool.h&gt;#define MAXIEN 255 &#x2F;&#x2F;预定义最大串长为255typedef struct&#123; char ch[MAXIEN]; &#x2F;&#x2F;每个分量存储一个字符 int length; &#x2F;&#x2F;串的实际长度&#125;SString;&#x2F;&#x2F;只要有一个字符不同，就可以停止检查当前子串，所有对应位置的字符都相同，则匹配成功，返回kint Index(SString *S,SString *T)&#123; int k&#x3D;1; &#x2F;&#x2F;k记录当前检查的子串起始位置 int i&#x3D;k,j&#x3D;1; while(i&lt;&#x3D;S-&gt;length &amp;&amp; j&lt;&#x3D;S-&gt;length)&#123; if(S-&gt;ch[i] &#x3D;&#x3D; T-&gt;ch[i])&#123; ++i; ++j; &#x2F;&#x2F;继续比较后继字符 &#125; else&#123; k++; &#x2F;&#x2F;检查下一个子串 i&#x3D;k; j&#x3D;1; &#125; &#125; if(j&lt;T-&gt;length)&#123; return k; &#125;else&#123; return 0; &#125;&#125;int main()&#123; SString S;&#125;","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"KMP算法","slug":"数据结构、算法笔记/KMP算法","date":"2020-01-01T16:00:00.000Z","updated":"2021-06-26T15:54:12.518Z","comments":true,"path":"2020/01/02/数据结构、算法笔记/KMP算法/","link":"","permalink":"http://example.com/2020/01/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/KMP%E7%AE%97%E6%B3%95/","excerpt":"","text":"朴素模式匹配算法的缺点：当某些子串与模式串能部分匹配时，主串的扫描指针i经常回溯，导致时间开销增加 改进思路：主串指针不回溯，只有模式串指针回溯 求模式串的next数组：当模式串的第j个字符匹配失败时，令模式串跳到next[j]再继续匹配 串的前缀：包含第一个字符，且不包含最后一个字符的子串串的后缀：包含最后一个字符，且不包含第一个字符的子串 手写求next： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;stdio.h&gt;#include&lt;stdlib.h&gt;#include&lt;stdbool.h&gt;#define MAXIEN 255 &#x2F;&#x2F;预定义最大串长为255typedef struct&#123; char ch[MAXIEN]; &#x2F;&#x2F;每个分量存储一个字符 int length; &#x2F;&#x2F;串的实际长度&#125;SString;&#x2F;&#x2F;求模式串T的next数组void get_next(SString *T,int next[])&#123; int i&#x3D;1,j&#x3D;0; next[1]&#x3D;0; while(i&lt;T-&gt;length)&#123; if(j&#x3D;&#x3D;0 || T-&gt;ch[i] &#x3D;&#x3D; T-&gt;ch[j])&#123; ++i; ++j; &#x2F;&#x2F;若pi&#x3D;pj，则next[j+1]&#x3D;next[j]+1 next[i]&#x3D;j; &#125; else&#123; &#x2F;&#x2F;否则令j&#x3D;next[j]，循环继续 j&#x3D;next[j]; &#125; &#125;&#125;&#x2F;&#x2F;KMP算法代码【平均时间复杂度O(n+m)】int Index_KMP(SString *S,SString *T)&#123; int i&#x3D;1,j&#x3D;1; int next[T-&gt;length+1]; get_next(T, next); &#x2F;&#x2F;求模式串的next数组 while(i&lt;&#x3D;S-&gt;length &amp;&amp; j&lt;&#x3D;T-&gt;length)&#123; if(j&#x3D;&#x3D;0 || S-&gt;ch[i] &#x3D;&#x3D; T-&gt;ch[i])&#123; ++i; ++j; &#x2F;&#x2F;继续比较后继字符 &#125;else&#123; j&#x3D;next[j]; &#x2F;&#x2F;模式串向右移动 &#125; &#125; if(j&gt;T-&gt;length)&#123; return i-T-&gt;length; &#x2F;&#x2F;匹配成功 &#125;else&#123; return 0; &#125;&#125;int main()&#123; SString S;&#125; KMP算法存在的问题：多进行了一次无意义的对比 KMP算法进一步优化：nextval数组","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"树的基本概念","slug":"数据结构、算法笔记/树的基本概念","date":"2019-12-31T16:00:00.000Z","updated":"2021-06-26T15:59:33.820Z","comments":true,"path":"2020/01/01/数据结构、算法笔记/树的基本概念/","link":"","permalink":"http://example.com/2020/01/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","excerpt":"","text":"树是n(n&gt;=0)个结点的有限集合，n=0时，称为空树 而任意非空树应满足： 有且仅有一个特定的称为根的结点 当n&gt;1时，其余结点可分为m(m&gt;0)个互不相交的有限集合，其中每一个集合本身又是一棵树，称为根结点的子树 基本术语： 祖先结点和子孙结点、双亲结点和孩子结点、兄弟结点 树中一个结点的子结点的个数称为该结点的度；树中各结点度的最大值称为树的度 度大于0的结点称为分支结点度为0的结点称为叶子结点 结点的层数【自顶向下】结点的高度【自底向上】结点的深度【自顶向下】树的高度(深度)是树中结点的最大层数树中每一层结点个数的最大值称为树的宽度 路径：树中两个结点之间的路径是由这两个结点之间所经过的结点序列构成的【树中的分支是有向的，即从双亲结点指向孩子结点，所以路径一定是自上而下的】 路径长度：路径上所经历边的个数 有序树：树中任意结点的子结点之间有顺序关系无序树：树中任意结点的子结点之间没有顺序关系，也叫自由树 树的性质： n个结点的树中只有n-1条边 树中的结点数等于所有结点的度数+1 度为m的树中第i层上至多有m^(i-1)个结点(i&gt;=1) 高度为h的m叉树至多有(m^h-1)/(m-1)个结点 具有n个结点的m叉树的最小高度为 森林：m(m&gt;=0)棵互不相交的树的集合","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"二叉树的概念","slug":"数据结构、算法笔记/二叉树的概念","date":"2019-12-30T16:00:00.000Z","updated":"2021-06-26T16:02:23.017Z","comments":true,"path":"2019/12/31/数据结构、算法笔记/二叉树的概念/","link":"","permalink":"http://example.com/2019/12/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%A6%82%E5%BF%B5/","excerpt":"","text":"二叉树是n(n&gt;=0)个结点的有限集合1）n=0时，二叉树为空2）n&gt;0时，由根结点和两个互不相交的被称为根的左子树和右子树组成，左子树和右子树也分别是一棵二叉树 特点： 每个结点最多有两颗子树，所以二叉树中不存在度大于2的结点 二叉树的左右子树不能任意颠倒，如果某结点只有一棵子树，一定要指明它是左子树还是右子树 二叉树 VS 度为2的有序树：1）二叉树可以为空，而度为2的有序树至少有三个结点2）二叉树的孩子结点始终有左右之分，而度为2的有序树的孩子结点次序是相对的 斜树：所有结点都只有左子树的二叉树称为左斜树，所有结点都只有右子树的二叉树称为右斜树 每一层只有一个结点 斜树的结点个数与其深度相同 满二叉树：一棵高度为h，且含有2^h-1个结点的二叉树为满二叉树【在一棵二叉树中，所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上】 叶子只能出现在最下一层 只有度为0和度为2的结点 完全二叉树：设一个高度为h、有n个结点的二叉树，当且仅当其每个结点都与高度为h的满二叉树中编号1～n的结点一一对应时，称为完全二叉树 深度为k的完全二叉树在k-1层是满二叉树 叶子结点只能出现在最下两层，且最下层的叶子结点都集中在左侧连续的位置 如果有度为1的结点，只可能有一个，且该结点只有左孩子 完全二叉树的性质： 二叉排序树：一棵二叉树，若树非空则具有如下性质：对任意结点若存在左子树或右子树，则其左子树上所有结点的关键字均小于该结点，右子树上所有结点的关键字均大于该结点 平衡二叉树：树上任意结点的左子树和右子树的高度差不超过1 二叉树的性质：","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"二叉树的存储结构","slug":"数据结构、算法笔记/二叉树的存储结构","date":"2019-12-29T16:00:00.000Z","updated":"2021-06-26T16:02:32.651Z","comments":true,"path":"2019/12/30/数据结构、算法笔记/二叉树的存储结构/","link":"","permalink":"http://example.com/2019/12/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/","excerpt":"","text":"二叉树的顺序存储：用一组连续的存储单元依次自上而下、自左至右存储完全二叉树上的结点元素 二叉树的链式存储：用链表来存放一棵二叉树，二叉树中每个结点用链表的一个链结点来存储","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"二叉树的遍历","slug":"数据结构、算法笔记/二叉树的遍历","date":"2019-12-28T16:00:00.000Z","updated":"2021-06-26T16:02:40.545Z","comments":true,"path":"2019/12/29/数据结构、算法笔记/二叉树的遍历/","link":"","permalink":"http://example.com/2019/12/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/","excerpt":"","text":"二叉树的遍历：按某条搜索路径访问树中的每个结点，树的每个结点均被访问一次，而且只访问一次 先序遍历(递归实现)： 中序遍历(递归实现)： 中序遍历非递归算法： 后序遍历(递归实现)： 层次遍历： 由遍历序列构造二叉树：","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"线索二叉树","slug":"数据结构、算法笔记/线索二叉树","date":"2019-12-27T16:00:00.000Z","updated":"2021-06-26T15:57:07.495Z","comments":true,"path":"2019/12/28/数据结构、算法笔记/线索二叉树/","link":"","permalink":"http://example.com/2019/12/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E7%BA%BF%E7%B4%A2%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"线索化：若无左子树，则将左指针指向其前驱结点；若无右子树，则将右指针指向其后继结点","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"树的存储结构","slug":"数据结构、算法笔记/树的存储结构","date":"2019-12-26T16:00:00.000Z","updated":"2021-06-26T15:59:41.813Z","comments":true,"path":"2019/12/27/数据结构、算法笔记/树的存储结构/","link":"","permalink":"http://example.com/2019/12/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%A0%91%E7%9A%84%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84/","excerpt":"","text":"双亲表示法：采用一组连续的存储空间来存储每个结点，同时在每个结点中增设一个伪指针，指示双亲结点在数组中的位置，根结点的下标为0，其伪指针域为-1 123456789101112#define MAX_TREE_SIZE 100typedef struct&#123; int data; int parent;&#125;PINode;typedef struct&#123; PINode nodes[MAX_TREE_SIZE]; int n;&#125;PTree; 孩子表示法：将每个结点的孩子结点都用单链表连接起来形成一个线性结构，n个结点具有n个孩子链表 1234567891011121314151617#define MAX_TREE_SIZE 100typedef struct&#123; int child; struct CNode *next;&#125;CNode;typedef struct&#123; int data; struct CNode *child;&#125;PNode;typedef struct&#123; PNode nodes[MAX_TREE_SIZE]; int n;&#125;CTree; 孩子兄弟表示法： 12345typedef struct CSNode&#123; int data; struct CSNode *firstchild,*nextsibling;&#125;CSNode,CSTRee; 双亲表示法：寻找结点的双亲结点效率高，寻找结点的孩子结点效率低孩子表示法：寻找结点的孩子结点效率高，寻找结点的双亲结点效率低孩子兄弟表示法：寻找结点的孩子结点效率高，方便实现树转换为二叉树，寻找双亲结点的效率低","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"树和森林","slug":"数据结构、算法笔记/树和森林","date":"2019-12-25T16:00:00.000Z","updated":"2021-06-26T15:59:25.493Z","comments":true,"path":"2019/12/26/数据结构、算法笔记/树和森林/","link":"","permalink":"http://example.com/2019/12/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%A0%91%E5%92%8C%E6%A3%AE%E6%9E%97/","excerpt":"","text":"树与二叉树的转换：左孩子右兄弟 森林与二叉树的转换： 树的遍历：按照某种方式访问树中的每个结点，且仅访问一次 先根遍历：若树非空，则先访问根结点，再按从左到右的顺序遍历根结点的每棵子树 后根遍历：若树非空，则先按从左到右的顺序遍历根结点的每棵子树，再访问根结点 层次遍历 森林的遍历： 先序遍历：若森林非空，则访问森林中第一棵树的根结点，先序遍历第一棵树的子树森林，先序遍历除去第一棵树之后剩余的树构成的子树森林 后序遍历：若森林非空，则后序遍历第一棵树的根结点的子树森林，访问第一棵树的根结点，后序遍历除去第一棵树之后剩余的树构成的子树森林","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"二叉排序树","slug":"数据结构、算法笔记/二叉排序树","date":"2019-12-24T16:00:00.000Z","updated":"2021-06-26T16:02:48.542Z","comments":true,"path":"2019/12/25/数据结构、算法笔记/二叉排序树/","link":"","permalink":"http://example.com/2019/12/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E4%BA%8C%E5%8F%89%E6%8E%92%E5%BA%8F%E6%A0%91/","excerpt":"","text":"二叉排序树：BST，也称二叉查找树 二叉排序树或者为空树，或者为非空树，当为非空树时有如下特点：1）若左子树非空，则左子树上所有结点关键字值均小于根结点的关键字2）若右子树非空，则右子树上所有结点关键字值均大于根结点的关键字3）左、右子树本身也分别是一棵二叉排序树 二叉排序树的查找：二叉树非空时，查找根结点，若相等则查找成功；若不等，则当小于根结点值时查找左子树，当大于根结点的值时，查找右子树，当查找到叶结点仍没查找到相应的值，则查找失败 二叉排序树的插入：若二叉排序树为空，则直接插入结点；若二叉排序树非空，当值小于根结点时，插入左子树；当值大于根结点时，插入右子树；当值等于根结点时不进行插入 构造二叉排序树：读入一个元素并建立结点，若二叉树为空将其作为根结点；若二叉排序树非空，当值小于根结点时，插入左子树；当值大于根结点时，插入右子树；当值等于根结点时不进行插入 二叉排序树的删除：1）若被删除结点z是叶子结点，则直接删除2）若被删除结点z只有一棵子树，则让z的子树成为z父结点的子树，代替z结点3）若被删除结点z有两棵子树，则让z的‘中序序列直接后继’代替z，并删去直接后继结点 在二叉排序树中删除并插入某结点，得到的二叉排序树与原来不一定相同 二叉排序树的查找效率：","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"平衡二叉树","slug":"数据结构、算法笔记/平衡二叉树","date":"2019-12-23T16:00:00.000Z","updated":"2021-06-26T16:00:24.814Z","comments":true,"path":"2019/12/24/数据结构、算法笔记/平衡二叉树/","link":"","permalink":"http://example.com/2019/12/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"平衡二叉树：AVL，任意结点的平衡因子的绝对值不超过1（平衡因子：左子树高度-右子树高度） 平衡二叉树的判断：利用递归的后续遍历过程1）判断左子树是一棵平衡二叉树2）判断右子树是一棵平衡二叉树3）判断以该结点为根的二叉树为平衡二叉树【判断条件：若左子树和右子树均为平衡二叉树，且左子树与右子树高度差的绝对值小于等于1，则平衡】 平衡二叉树的插入： 1）LL平衡旋转(右单旋转)原因：在结点A的左孩子的左子树上插入了新结点调整方法：右旋操作，将A的左孩子B代替A，将A结点称为B的右子树根结点，而B的原右子树则作为A的左子树 2）RR平衡旋转(左单旋转)原因：在结点A的右孩子的右子树上插入了新结点调整方法：左旋操作，将A的右孩子B代替A，将A结点称为B的左子树根结点，而B的原左子树则作为A的右子树 3）LR平衡旋转(先左后右双旋转)原因：在结点A的左孩子的右子树上插入了新结点调整方法：先左旋后右旋操作，将A的左孩子B的右孩子结点C代替B，然后再将C结点向上代替A的位置 4）RL平衡旋转(先右后左双旋转)原因：在结点A的右孩子的左子树上插入了新结点调整方法：先右旋后左旋操作，将A的右孩子B的左孩子结点C代替B，然后再将C结点向上代替A的位置","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"哈夫曼树","slug":"数据结构、算法笔记/哈夫曼树","date":"2019-12-22T16:00:00.000Z","updated":"2021-06-26T16:01:42.554Z","comments":true,"path":"2019/12/23/数据结构、算法笔记/哈夫曼树/","link":"","permalink":"http://example.com/2019/12/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/","excerpt":"","text":"路径长度：路径上所经历边的个数结点的权：结点被赋予的数值 树的带权路径长度：WPL，树中所有叶结点的带权路径长度之和 哈夫曼树：也称最优二叉树，含有n个带权叶子结点带权路径长度最小的二叉树 哈夫曼树的构造算法：1）将n个结点作为n棵仅含有一个根结点的二叉树，构造森林F2）生成一个新结点，并从F中找出根结点权值最小的两棵树作为它的左右子树，且新结点的权值为两棵子树根结点的权值之和3）从F中删除这两棵树，并将新生成的树加入到F中4）重复2，3步骤，直到F中只有一棵树为止 哈夫曼树的性质：1）每个初始结点都会成为叶结点，双支结点都为新生成的结点2）权值越大离根结点越近，反之权值越小离根结点越远3）哈夫曼树中没有结点的度为14）n个叶子结点的哈夫曼树的结点总数为2n-1，其中度为2的结点数为n-1","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"图的基本概念","slug":"数据结构、算法笔记/图的基本概念","date":"2019-12-21T16:00:00.000Z","updated":"2021-06-26T15:57:37.097Z","comments":true,"path":"2019/12/22/数据结构、算法笔记/图的基本概念/","link":"","permalink":"http://example.com/2019/12/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","excerpt":"","text":"图G由顶点集V和边集E组成，记为G=(V,E)，其中V(G)表示图G中顶点的有限非空集；E(G)表示图G中顶点之间的关系(边)集合|V|表示图G中顶点的个数，也称图G的阶；|E|表示图G中边的条数 无向图和有向图： 简单图和多重图： 在图中，权通常是对边赋予的有意义的数值量，边上带权的图称为带权图或网图： 完全图： 稠密图、稀疏图 顶点的度：以该顶点为一个端点的边的数目 无向图顶点v的度为以v为端点的边的个数，记为TD(v)；n顶点、e条边的无向图中度的总数为2e 有向图：出度指以v为起点的有向边的条数，记OD(v)；入度指以v为终点的有向边的条数，记ID(v)；TD(v)=OD(v)+ID(v)；n顶点、e条边的有向图中出度、入度为e 有向树：一个顶点的入度为0，其余顶点的入度均为1的有向图 路径：图中顶点v到顶点w的顶点序列，序列中顶点不重复的路径称为简单路径 路径长度：路径上边的数目，若该路径最短则称其为距离 回路：第一个顶点和最后一个顶点相同的路径 除了第一个顶点和最后一个顶点之外，其余顶点不重复出现的回路称为简单回路 子图：设有两个图G=(V,E)和G’=(V’,E’)，若V’是V的子集，且E’是E的子集，则称G’为G的子图；且若V(G)=V(G’)则称G’为G的生成子图 无向图只有连通：若从顶点v到顶点w有路径存在，则称v和w是连通【连通图：任意两个结点之间都是连通的】【连通分量：极大连通子图】 有向图只有强连通：若从顶点v到顶点w和顶点w到顶点v都有路径存在，则称v和w是强连通【强连通图：任意两个结点之间都是强连通的】【强连通分量：极大强连通子图】 对于G的一个(强)连通子图G’，如果不存在G的另一个(强)连通子图G’’，使得G’属于G’’，则称G’为G的(强)连通分量 极小连通子图：连通子图且包含的边最少 生成树：连通图包含全部顶点的一个极小连通子图(n个顶点图的生成树有n-1条边) 生成森林：非连通图所有连通分量的生成树组成连通森林","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"邻接矩阵法","slug":"数据结构、算法笔记/邻接矩阵法","date":"2019-12-20T16:00:00.000Z","updated":"2021-06-26T16:00:56.035Z","comments":true,"path":"2019/12/21/数据结构、算法笔记/邻接矩阵法/","link":"","permalink":"http://example.com/2019/12/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E6%B3%95/","excerpt":"","text":"图的邻接矩阵存储也称数组表示法，用一个一维数组存储图中的顶点，用一个二维数组存储图中的边，存储顶点之间邻接关系的二维数组称为邻接矩阵 邻接矩阵的性质：1）邻接矩阵的空间复杂度为O(n^2)，适用于稠密图2）无向图的邻接矩阵为对称矩阵3）无向图中第i行(或第i列)非0元素(非正无穷)的个数为第i个顶点的度4）有向图中第i行(或第i列)非0元素(非正无穷)的个数为第i个顶点的出度(入度)","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"邻接表法","slug":"数据结构、算法笔记/邻接表法","date":"2019-12-19T16:00:00.000Z","updated":"2021-06-26T16:01:11.493Z","comments":true,"path":"2019/12/20/数据结构、算法笔记/邻接表法/","link":"","permalink":"http://example.com/2019/12/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E9%82%BB%E6%8E%A5%E8%A1%A8%E6%B3%95/","excerpt":"","text":"邻接矩阵法存储稀疏图会有许多空间浪费 邻接表法：为每一个顶点建立一个单链表存放与它相邻的边 邻接表的特点：1）若G为无向图，存储空间为O(|V|+2|E|)若G为有向图，存储空间为O(|V|+|E|)2）邻接表更加适用于稀疏图3）若G为无向图，则结点的度为该结点边表的长度若G为有向图，则结点的出度为该结点边表的长度，计算入度则要遍历整个邻接表4）邻接表不唯一，边表结点的顺序根据算法和输入的不同可能会不同","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"十字链表","slug":"数据结构、算法笔记/十字链表","date":"2019-12-18T16:00:00.000Z","updated":"2021-06-26T15:59:50.348Z","comments":true,"path":"2019/12/19/数据结构、算法笔记/十字链表/","link":"","permalink":"http://example.com/2019/12/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8/","excerpt":"","text":"十字链表：有向图的一种链式存储结构","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"邻接多重表","slug":"数据结构、算法笔记/邻接多重表","date":"2019-12-17T16:00:00.000Z","updated":"2021-06-26T16:01:03.610Z","comments":true,"path":"2019/12/18/数据结构、算法笔记/邻接多重表/","link":"","permalink":"http://example.com/2019/12/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E9%82%BB%E6%8E%A5%E5%A4%9A%E9%87%8D%E8%A1%A8/","excerpt":"","text":"用邻接表存储无向图，每条边的两个顶点分别在该边所依附的两个顶点的边表中，这种重复存储给图的某些操作带来不便，例如对已访问过的边做标记，或者要删除图中某一条边等，都需要找到表示同一条边的两个边表结点。 邻接多重表：主要用于存储无向图","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"图的基本操作","slug":"数据结构、算法笔记/图的基本操作","date":"2019-12-16T16:00:00.000Z","updated":"2021-06-26T15:57:45.939Z","comments":true,"path":"2019/12/17/数据结构、算法笔记/图的基本操作/","link":"","permalink":"http://example.com/2019/12/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/","excerpt":"","text":"Adjacent(G,x,y)：判断图G是否存在边&lt;x,y&gt;或(x,y)【邻接矩阵效率高】 Neighbors(G,x)：列出图G中与结点x邻接的边【无向图邻接表效率高，有向图邻接矩阵效率高】 InsertVertex(G,x)：在图G中插入顶点x DeleteVertex(G,x)：从图G中删除顶点x AddEdge(G,x,y)：若无向边(x,y)或者有向边&lt;x,y&gt;不存在，则向图G中添加该边 RemoveEdge(G,x,y)：若无向边(x,y)或者有向边&lt;x,y&gt;存在，则在图G中删除该边【邻接矩阵效率高】 FirstNeighbor(G,x)：求图G中顶点x的第一个邻接点，若有则返回顶点号，若没有邻接点或图不存在x，则返回-1NextNeighbor(G,x)：假设图G中顶点y是顶点x的一个邻接点，返回除y之外顶点x的下一个邻接点的顶点号，若y是x的最后一个邻接点，则返回-1 Get_edge_value(G,x,y)：获取图G中边(x,y)或&lt;x,y&gt;对应的权值vSet_edge_value(G,x,y)：设置图G中边(x,y)或&lt;x,y&gt;对应的权值为v","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"广度优先搜索","slug":"数据结构、算法笔记/广度优先搜索","date":"2019-12-15T16:00:00.000Z","updated":"2021-06-26T16:01:58.753Z","comments":true,"path":"2019/12/16/数据结构、算法笔记/广度优先搜索/","link":"","permalink":"http://example.com/2019/12/16/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/","excerpt":"","text":"图的遍历：从图中某一顶点出发，按照某种搜索方法沿着图中的边对图中的所有顶点访问一次且仅访问一次 广度优先搜索(BFS)：1）首先访问起始顶点v2）接着由v出发依次访问v的各个未被访问过的邻接顶点w1，w2…wi3）然后依次访问w1，w2…wi的所有未被访问过的邻接顶点4）从这些访问过的顶点出发，访问它们所有未被访问过的邻接顶点，以此类推 BFS算法的性能分析：1）空间复杂度：O(|V|)2）时间复杂度：邻接矩阵法O(|V|^2)，邻接表法O(|V|+|E|) 无权图单源最短路径问题：定义从顶点u到顶点v的最短路径d(u,v)为从u到v的任何路径中最少的边数，若从u到v没有通路，则d(u,v)=正无穷 广度优先生成树：在广度遍历过程中，我们可以得到一棵遍历树，称为广度优先生成树(生成森林)【邻接矩阵法的广度优先生成树唯一，邻接表法的不唯一】","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"深度优先搜索","slug":"数据结构、算法笔记/深度优先搜索","date":"2019-12-14T16:00:00.000Z","updated":"2021-06-26T15:59:58.984Z","comments":true,"path":"2019/12/15/数据结构、算法笔记/深度优先搜索/","link":"","permalink":"http://example.com/2019/12/15/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/","excerpt":"","text":"深度优先搜索DFS：【与树的先序遍历类似】1）首先访问起始顶点v2）接着由v出发访问v的任意一个邻接且未被访问的邻接顶点wi3）然后再访问与wi邻接且未被访问的任意顶点yi4）若wi没有邻接且未被访问的顶点时，退回到它的上一层顶点v5）重复上述过程，直到所有顶点被访问为止 借助递归(栈)+辅助标记数组来实现：【邻接矩阵法的DFS(BFS)序列唯一，邻接表法的不唯一】DFS序列：ACDEB DFS算法的性能分析：1）空间复杂度：O(|V|)2）时间复杂度：邻接矩阵法O(|V|^2)，邻接表法O(|V|+|E|) 深度优先生成树：在深度遍历过程中，我们可以得到一棵遍历树，称为深度优先生成树（生成森林）【邻接矩阵法的深度优先生成树唯一，邻接表法的不唯一】 遍历与连通性问题：1）在无向图中，在任意结点出发进行一次遍历(调用一次BFS或DFS)，若能访问全部结点，说明该无向图是连通的2）在无向图中，调用遍历函数(BFS或DFS)的次数为连通分量的个数有向图中上面两个结论都不成立：","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"最小生成树","slug":"数据结构、算法笔记/最小生成树","date":"2019-12-13T16:00:00.000Z","updated":"2021-06-26T15:54:36.725Z","comments":true,"path":"2019/12/14/数据结构、算法笔记/最小生成树/","link":"","permalink":"http://example.com/2019/12/14/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/","excerpt":"","text":"生成树：连通图包含全部顶点的一个极小连通子图 最小生成树：对于带权无向连通图G=(V,E)，G的所有生成树当中边的权值之和最小的生成树为G的最小生成树（MST） 性质：1）最小生成树不一定唯一，即最小生成树的树形不一定唯一，当带权无向连通图G的各边权值不等时或G只有结点数-1条边时，MST唯一2）最小生成树的权值是唯一的，且是最小3）最小生成树的边数为顶点数-1 Prim算法： 时间复杂度：O(|V|^2)，适用于稠密图 Kruskal算法： 时间复杂度：O(|E|log|E|)，适用于稀疏图","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"最短路径","slug":"数据结构、算法笔记/最短路径","date":"2019-12-12T16:00:00.000Z","updated":"2021-06-26T15:54:53.079Z","comments":true,"path":"2019/12/13/数据结构、算法笔记/最短路径/","link":"","permalink":"http://example.com/2019/12/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/","excerpt":"","text":"最短路径：两个顶点之间带权路径长度最短的路径为最短路径 在带权图当中，把从一个顶点v到另一个顶点u所经历的边的权值之和称为路径的带权路径长度 Dijkstra算法：带权图单源最短路径 时间复杂度：O(|V|^2) Dijkstra算法并不适用于含有负权边的图 Floyd算法：各顶点之间的最短路径 时间复杂度：O(|V|^3)","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"拓扑排序","slug":"数据结构、算法笔记/拓扑排序","date":"2019-12-11T16:00:00.000Z","updated":"2021-06-26T15:58:03.506Z","comments":true,"path":"2019/12/12/数据结构、算法笔记/拓扑排序/","link":"","permalink":"http://example.com/2019/12/12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/","excerpt":"","text":"有向无环图：不存在环的有向图，简称DAG图 在一个表示工程的有向图中，用顶点表示活动，用弧表示活动之间的优先关系，称这样的有向图为顶点表示活动的网，简称AOV网 在AOV网中，不能出现回路 若从顶点vi到vj有一条路径，则在顶点序列中顶点vi必在vj之前，对一个有向图构造拓扑序列的过程称为拓扑排序 基本思想：1）从AOV网中选择一个没有前驱的顶点并输出2）从AOV网中删去该顶点以及所有以该顶点为尾的弧3）重复上述两步，直到全部顶点都被输出，或AOV网中不存在没有前驱的顶点 算法结束时没有访问所有顶点，则存在以剩下顶点组成的环 拓扑排序的结果不一定唯一 时间复杂度：O(|V|+|E|) 若邻接矩阵为三角矩阵，则存在拓扑排序，反之不一定成立","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"关键路径","slug":"数据结构、算法笔记/关键路径","date":"2019-12-10T16:00:00.000Z","updated":"2021-06-26T16:02:06.943Z","comments":true,"path":"2019/12/11/数据结构、算法笔记/关键路径/","link":"","permalink":"http://example.com/2019/12/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%85%B3%E9%94%AE%E8%B7%AF%E5%BE%84/","excerpt":"","text":"在一个表示工程的带权有向图中，用顶点表示事件，用有向边表示活动，边上的权值表示活动的持续时间，称这样的有向图为边表示活动的网，简称AOE网 在AOE网中，所有活动都完成才能到达终点，因此完成整个工程所必须花费的时间(即最短工期)应该为源点到终点的最大路径长度，具有最大路径长度的路径称为关键路径，关键路径上的活动称为关键活动 缩短关键活动时间可以加快整个工程，但缩短到一定大小时关键路径会发生改变 当网中关键路径不唯一时，只有加快的关键活动或关键活动组合包括在所有的关键路径上才能缩短工期","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"查找的基本概念","slug":"数据结构、算法笔记/查找的基本概念","date":"2019-12-09T16:00:00.000Z","updated":"2021-06-26T16:05:14.862Z","comments":true,"path":"2019/12/10/数据结构、算法笔记/查找的基本概念/","link":"","permalink":"http://example.com/2019/12/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%9F%A5%E6%89%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","excerpt":"","text":"查找：在数据集合中寻找满足某种条件的数据元素的过程，查找结果分为查找成功和查找失败 查找表：用于查找的数据集合，由同一种数据类型(或记录)组成，可以是一个数组或链表等数据类型 查找表的操作：1）查询某个特定的数据元素是否在查找表中2）检索满足条件的某个特定的数据元素的各种属性3）从查找表中插入一个数据元素4）从查找表中删除一个数据元素 不涉及插入和删除操作的查找称为静态查找，涉及插入和删除操作的查找称为动态查找 关键字：数据元素中唯一标识该元素的某个数据项的值，使用基于关键字的查找，查找结果应该是唯一的 平均查找长度：查找时，关键字比较次数的平均值 线性表：适用于静态查找，主要采用顺序查找技术、折半查找技术树表：适用于动态查找，主要采用二叉排序树、平衡二叉树、B树等查找技术散列表：静态查找和动态查找均适用，主要采用散列查找技术","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"顺序查找","slug":"数据结构、算法笔记/顺序查找","date":"2019-12-08T16:00:00.000Z","updated":"2021-06-26T15:58:19.718Z","comments":true,"path":"2019/12/09/数据结构、算法笔记/顺序查找/","link":"","permalink":"http://example.com/2019/12/09/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE/","excerpt":"","text":"顺序查找：又称线性查找，主要用于在线性表中进行查找，从线性表的一端向另一端逐个将记录与给定值进行比较，若相等则查找成功，给出该记录在表中的位置；若整个表检测完仍未找到与给定值相等的记录，则查找失败，给出失败信息 对无序线性表进行查找： 对无序线性表进行顺序查找，查找失败时要遍历整个线性表 查找成功的比较次数为(n+1)/2，查找失败的比较次数为n+1【设置哨兵，哨兵就是待查值，存放在查找方向的尽头处，在查找过程中每次比较后，不用判断查找位置是否越界，从而提高了查找速度】 对有序线性表进行查找： 对关键字有序线性表进行顺序查找，查找失败时不一定要遍历整个线性表 有序线性表查找失败的比较次数：n/2+n/(n+1)","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"折半查找","slug":"数据结构、算法笔记/折半查找","date":"2019-12-07T16:00:00.000Z","updated":"2021-06-26T15:55:18.870Z","comments":true,"path":"2019/12/08/数据结构、算法笔记/折半查找/","link":"","permalink":"http://example.com/2019/12/08/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%8A%98%E5%8D%8A%E6%9F%A5%E6%89%BE/","excerpt":"","text":"折半查找：又称二分查找，仅适用于有序的顺序表 算法思想：1）首先将给定值key与表中中间位置元素的关键字比较2）若相等，则返回该元素的位置；若不等，则在前半部分或者是后半部分进行查找3）查找序列升序时，若key小于中间元素，则查找前半部分；若key大于中间元素，则查找后半部分4）重复该过程，直到找到查找的元素为止，或查找失败 注意low&lt;=high： 折半查找的判定树： 查找成功的平均比较次数：[log2(n+1)]-1，折半查找的时间复杂度为O(log2n) 顺序查找适用于顺序存储和链式存储，序列有序无序皆可；折半查找只适用于顺序存储，且要求序列一定有序","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"分块查找","slug":"数据结构、算法笔记/分块查找","date":"2019-12-06T16:00:00.000Z","updated":"2021-06-26T16:02:15.184Z","comments":true,"path":"2019/12/07/数据结构、算法笔记/分块查找/","link":"","permalink":"http://example.com/2019/12/07/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%88%86%E5%9D%97%E6%9F%A5%E6%89%BE/","excerpt":"","text":"分块查找：又称索引顺序查找，其查找性能介于折半查找和顺序查找之间 分块查找的使用前提是将线性表进行分块，并使其分块有序，所谓分块有序是指将线性表划分为若干块，每一块内不要求有序(即块内无序)，但要求第二块中所有记录的关键码均大于第一块中所有记录的关键码，第三块中所有记录的关键码均大于第二块中所有记录的关键码，以此类推(即块间有序) 分块查找还需要建立一个索引表，每块对应一个索引项，各索引项按关键码有序排序 分块查找需要分两步进行：第一步在索引表中确定待查关键码所在的块；第二步在相应块中查找待查关键码。由于索引表是按关键码有序排列，可使用顺序查找，也可使用折半查找；在块内进行查找时，由于块内是无序的，只能使用顺序查找","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"B树","slug":"数据结构、算法笔记/B树","date":"2019-12-05T16:00:00.000Z","updated":"2021-06-26T15:54:21.090Z","comments":true,"path":"2019/12/06/数据结构、算法笔记/B树/","link":"","permalink":"http://example.com/2019/12/06/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/B%E6%A0%91/","excerpt":"","text":"B树的定义： 查找：B树的查找类似于二叉排序树的查找，不同的是B树的每个结点是多关键码的有序表，在到达某个结点时，先在有序表中查找，若找到则查找成功；否则按照指针到相应的子树中查找，到达空指针(即外部结点)时，查找失败 在B树上的查找过程是一个顺指针查找结点和在结点中查找关键码交叉进行的过程。由于B树通常存储在磁盘上，则前一个查找操作是在磁盘上进行，而后一个查找操作是在内存中进行，即在磁盘上找到某结点后，先将结点的信息读入内存,然后再查找等于k的关键码。显然,在磁盘上进行一次查找比在内存中进行一次查找耗费的时间多得多，因此，在磁盘上进行查找的次数，即待查关键码所在结点在B树的层数，是决定B树查找效率的首要因素。 插入： 删除：","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"B+树","slug":"数据结构、算法笔记/B+树","date":"2019-12-04T16:00:00.000Z","updated":"2021-06-26T15:54:29.264Z","comments":true,"path":"2019/12/05/数据结构、算法笔记/B+树/","link":"","permalink":"http://example.com/2019/12/05/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/B+%E6%A0%91/","excerpt":"","text":"B+树的定义：","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"散列表的基本概念","slug":"数据结构、算法笔记/散列表的基本概念","date":"2019-12-03T16:00:00.000Z","updated":"2021-06-26T16:00:14.984Z","comments":true,"path":"2019/12/04/数据结构、算法笔记/散列表的基本概念/","link":"","permalink":"http://example.com/2019/12/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%95%A3%E5%88%97%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","excerpt":"","text":"散列函数：一个把查找表中的关键字映射成该关键字对应的地址的函数 散列表：根据关键字而直接进行访问的数据结构，它建立了关键字与存储地址之间的一种直接映射关系 在散列技术中，由于记录的定位主要基于散列函数的计算,不需要进行关键码的多次比较，所以，一般情况下,散列技术的查找速度要比基于比较的查找技术的查找速度快。但是，散列技术-般不适用于多个记录有相同关键码的情况，也不适用于范围查找。散列技术最适合回答的问题是:如果有的话，哪个记录的关键码等于待查值。 冲突(碰撞)：散列函数可能会把多个不同的关键字映射到同一地址下的情况，同一地址下的多个关键字称为同义词","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"散列函数的设计和冲突处理","slug":"数据结构、算法笔记/散列函数的设计和冲突处理","date":"2019-12-02T16:00:00.000Z","updated":"2021-06-26T16:00:07.329Z","comments":true,"path":"2019/12/03/数据结构、算法笔记/散列函数的设计和冲突处理/","link":"","permalink":"http://example.com/2019/12/03/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E5%86%B2%E7%AA%81%E5%A4%84%E7%90%86/","excerpt":"","text":"散列函数的设计： 设计散列函数一般遵循以下基本原则:1）计算简单。散列函数不应该有很大的计算量，否则会降低查找效率;2）函数值(即散列地址)分布均匀中，希望散列函数能够把记录以相同的概率“散列”到散列表的所有地址空间中，这样才能保证存储空间的有效利用,并减少冲突。 冲突处理：","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"排序的基本概念","slug":"数据结构、算法笔记/排序的基本概念","date":"2019-12-01T16:00:00.000Z","updated":"2021-06-26T16:00:33.129Z","comments":true,"path":"2019/12/02/数据结构、算法笔记/排序的基本概念/","link":"","permalink":"http://example.com/2019/12/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%8E%92%E5%BA%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","excerpt":"","text":"排序：重新排列表中的元素，使表中的元素满足按关键字递增或递减 算法的稳定性：若待排序表中有两个元素Ri和Rj，其对应的关键字Ki=Kj，且在排序前Ri在Rj前面，若使用某排序算法后，Ri仍然在Rj前面，则称这个排序算法是稳定的，否则称排序算法不稳定 算法的稳定性是算法的性质，并不能衡量一个算法的优劣 时空复杂度决定内部排序算法的性能 内部排序：指在排序期间元素全部存放在内存中的排序 外部排序：指在排序期间元素无法全部同时存放在内存中，必须在排序的过程中根据要求不断的在内、外存之间进行移动","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"直接插入排序","slug":"数据结构、算法笔记/直接插入排序","date":"2019-11-30T16:00:00.000Z","updated":"2021-06-26T15:55:10.384Z","comments":true,"path":"2019/12/01/数据结构、算法笔记/直接插入排序/","link":"","permalink":"http://example.com/2019/12/01/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/","excerpt":"","text":"插入排序：每次将一个待排序的序列插入到一个前面已排好序的子序列当中 直接插入排序(稳定的算法)：【空间复杂度为O(1)】【最好时间复杂度为O(n)，最坏、平均复杂度为O(n^2)】适用于顺序存储和链式存储","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"折半插入排序","slug":"数据结构、算法笔记/折半插入排序","date":"2019-11-29T16:00:00.000Z","updated":"2021-06-26T15:55:29.363Z","comments":true,"path":"2019/11/30/数据结构、算法笔记/折半插入排序/","link":"","permalink":"http://example.com/2019/11/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%8A%98%E5%8D%8A%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/","excerpt":"","text":"折半插入排序(稳定的算法)：【时间复杂度为O(n^2)】【空间复杂度为O(1)】只适用于顺序存储","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"希尔排序","slug":"数据结构、算法笔记/希尔排序","date":"2019-11-28T16:00:00.000Z","updated":"2021-06-26T15:57:16.764Z","comments":true,"path":"2019/11/29/数据结构、算法笔记/希尔排序/","link":"","permalink":"http://example.com/2019/11/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/","excerpt":"","text":"希尔排序(不稳定算法)：缩小增量排序【最坏时间复杂度为O(n^2)，空间复杂度为O(1)】只适用于顺序存储 基本思想：先将排序表分割成d个形如L[i,i+d,i+2d,…,i+kd]的特殊子表，分别进行直接插入排序，当整个表中的元素已呈“基本有序时”，再对全体记录进行一次直接插入排序【d1=n/2(取下界),d(i+1)=(di)/2(取下界)，直到最后一个dk=1】","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"冒泡排序","slug":"数据结构、算法笔记/冒泡排序","date":"2019-11-27T16:00:00.000Z","updated":"2021-06-26T16:00:48.186Z","comments":true,"path":"2019/11/28/数据结构、算法笔记/冒泡排序/","link":"","permalink":"http://example.com/2019/11/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/","excerpt":"","text":"冒泡排序(稳定的算法)：假设待排序表长为n，从前往后(从后往前)两两比较相邻元素的值，若为逆序(即A[i-1]&gt;A[i])，则交换他们直到序列比较结束【一次冒泡会将一个元素放置到它最终的位置上】 适用于顺序存储和链式存储 最好时间复杂度为O(n)，最坏、平均时间复杂度为O(n^2)，空间复杂度为O(1)：","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"快速排序","slug":"数据结构、算法笔记/快速排序","date":"2019-11-26T16:00:00.000Z","updated":"2021-06-26T16:01:18.979Z","comments":true,"path":"2019/11/27/数据结构、算法笔记/快速排序/","link":"","permalink":"http://example.com/2019/11/27/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/","excerpt":"","text":"快速排序(不稳定的算法)：【时间复杂度为O(high-low+1)】【最好、平均空间复杂度为O(log2(n))、最坏空间复杂度O(n)】【最好、平均时间复杂度为O(nlog2(n))、最坏时间复杂度为O(n^2)】 初始基本有序或逆序的情况下时间、空间复杂度最坏 适用于顺序存储(链式存储) Partition基本思路：初始化标记low为划分部分第一个元素的位置，high为最后一个元素的位置，然后不断的移动两标记并交换元素：1）high向前移动找到第一个比pivot小的元素2）low向后移动找到第一个比pivot大的元素3）交换当前两个位置的元素4）继续移动标记，执行1、2、3过程，直到low大于等于high为止","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"直接选择排序","slug":"数据结构、算法笔记/直接选择排序","date":"2019-11-25T16:00:00.000Z","updated":"2021-06-26T15:55:02.901Z","comments":true,"path":"2019/11/26/数据结构、算法笔记/直接选择排序/","link":"","permalink":"http://example.com/2019/11/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E7%9B%B4%E6%8E%A5%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/","excerpt":"","text":"选择排序(不稳定的算法)：【时间复杂度为O(n^2)】【空间复杂度为O(1)】 时间复杂度与初始序列无关 适用于顺序存储和链式存储","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"堆排序","slug":"数据结构、算法笔记/堆排序","date":"2019-11-24T16:00:00.000Z","updated":"2021-06-26T16:04:09.694Z","comments":true,"path":"2019/11/25/数据结构、算法笔记/堆排序/","link":"","permalink":"http://example.com/2019/11/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%A0%86%E6%8E%92%E5%BA%8F/","excerpt":"","text":"堆：n个关键字序列L[1…n]称为堆，当且仅当该序列满足：(1&lt;=i&lt;=(n/2)(取下界))1）若L(i)&lt;=L(2i)且L(i)&lt;=L(2i+1)，则称该堆为小根堆2）若L(i)&gt;=L(2i)且L(i)&gt;=L(2i+1)，则称该堆为大根堆 在排序过程中将L[1…n]视为一棵完全二叉树的顺序存储结构 堆的初始化(以大根堆为例)： 堆排序(不稳定的算法)：不断的输出栈顶元素，并向下调整【时间复杂度为O(nlog2(n))】【空间复杂度为O(1)】 适用于顺序存储(链式存储) 堆的插入：将新结点放置在末端然后进行向上调整","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"归并排序","slug":"数据结构、算法笔记/归并排序","date":"2019-11-23T16:00:00.000Z","updated":"2021-06-26T16:01:50.703Z","comments":true,"path":"2019/11/24/数据结构、算法笔记/归并排序/","link":"","permalink":"http://example.com/2019/11/24/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/","excerpt":"","text":"2路归并排序： 合并两个有序线性表： 归并排序(稳定的算法)：【时间复杂度O(nlog2(n))】【空间复杂度为O(n)】 适用于顺序存储和链式存储","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"基数排序","slug":"数据结构、算法笔记/基数排序","date":"2019-11-22T16:00:00.000Z","updated":"2021-06-26T16:01:34.654Z","comments":true,"path":"2019/11/23/数据结构、算法笔记/基数排序/","link":"","permalink":"http://example.com/2019/11/23/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/","excerpt":"","text":"基数排序：不基于比较，借助“分配”和“收集”两种操作对单逻辑关键字进行排序，分为最高位优先(MSD)和最低位优先(LSD) 以r为基数的最低位优先基数排序的过程(稳定的算法)：【时间复杂度为O(d(n+r))】【空间复杂度为O(r)】","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"内部排序算法的比较及应用","slug":"数据结构、算法笔记/内部排序算法的比较及应用","date":"2019-11-21T16:00:00.000Z","updated":"2021-06-26T16:00:40.825Z","comments":true,"path":"2019/11/22/数据结构、算法笔记/内部排序算法的比较及应用/","link":"","permalink":"http://example.com/2019/11/22/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%86%85%E9%83%A8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E7%9A%84%E6%AF%94%E8%BE%83%E5%8F%8A%E5%BA%94%E7%94%A8/","excerpt":"","text":"冒泡排序、直接选择排序、快速排序、堆排序：一趟排序可以确定一个元素的位置 应用：","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"外部排序的方法","slug":"数据结构、算法笔记/外部排序的方法","date":"2019-11-20T16:00:00.000Z","updated":"2021-06-26T15:57:28.063Z","comments":true,"path":"2019/11/21/数据结构、算法笔记/外部排序的方法/","link":"","permalink":"http://example.com/2019/11/21/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E5%A4%96%E9%83%A8%E6%8E%92%E5%BA%8F%E7%9A%84%E6%96%B9%E6%B3%95/","excerpt":"","text":"外部排序通常采用归并排序的方法 首先根据缓冲区的大小将外存上含有n个记录的文件分成若干长度为h的子文件，依次读入内存并利用有限的内部排序算法对它们进行排序，并将排序后得到的有序子文件重新写回外存，通常称这些有序子文件为归并段或顺串 然后对这些归并段进行逐趟归并，使归并段逐渐由小到大直至得到整个有序文件 外部排序的总时间：内部排序所需时间+外存信息读写时间+内部归并所需时间如果变成4路归并：","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"败者树","slug":"数据结构、算法笔记/败者树","date":"2019-11-19T16:00:00.000Z","updated":"2021-06-26T16:05:26.365Z","comments":true,"path":"2019/11/20/数据结构、算法笔记/败者树/","link":"","permalink":"http://example.com/2019/11/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E8%B4%A5%E8%80%85%E6%A0%91/","excerpt":"","text":"失败树：树形选择排序的一种变体，可视为一棵完全二叉树 每个叶结点存放各归并段在归并过程中当前参加比较的记录，内部结点用来记忆左右子树中的‘失败者’，胜利者向上继续进行比较，直到根结点","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"置换-选择排序","slug":"数据结构、算法笔记/置换-选择排序","date":"2019-11-18T16:00:00.000Z","updated":"2021-06-26T15:53:25.234Z","comments":true,"path":"2019/11/19/数据结构、算法笔记/置换-选择排序/","link":"","permalink":"http://example.com/2019/11/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E7%BD%AE%E6%8D%A2-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/","excerpt":"","text":"置换-选择排序：","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"最佳归并树","slug":"数据结构、算法笔记/最佳归并树","date":"2019-11-17T16:00:00.000Z","updated":"2021-06-26T15:53:08.624Z","comments":true,"path":"2019/11/18/数据结构、算法笔记/最佳归并树/","link":"","permalink":"http://example.com/2019/11/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/%E6%9C%80%E4%BD%B3%E5%BD%92%E5%B9%B6%E6%A0%91/","excerpt":"","text":"m路归并排序可用一棵m叉树描述 归并树：用来描述m归并，并只有度为0和度为m的结点的严格m叉树 带权路径长度之和为归并过程中的总读记录数： 用哈夫曼树构造的叫最佳归并树：","categories":[{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[]},{"title":"Objective-C概述：","slug":"开发语言/Objective-C/Objective-C概述：","date":"2019-09-29T16:00:00.000Z","updated":"2021-05-20T15:53:07.459Z","comments":true,"path":"2019/09/30/开发语言/Objective-C/Objective-C概述：/","link":"","permalink":"http://example.com/2019/09/30/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/Objective-C%E6%A6%82%E8%BF%B0%EF%BC%9A/","excerpt":"","text":"Objective-C简称Obj-C或者OC Objective-C：面向对象的C语言，所以，OC的本质还是C语言 OC是在C的基础之上增加了一小部分的面向对象的语法，将C语言复杂的、繁琐的语法封装的更为简单 完全兼容C语言，也就是说在OC语言中可以写任意的C语言的代码 OC简要发展历史： 20世纪80年代初期，Brad Cox结合C语言和Smalltalk的优势设计出了Objective-C语言 1985年，乔布斯创建NeXT公司，致力于设计经济实惠且功能强大的工作站，并选择Unix作为其工作站的操作系统 后来，NeXT公司设计出了NextStep(使用OC语言编写的一套功能强大的界面工具包) 1995年，NeXT公司获得OC的全部商业版权 1996年，苹果公司收购NeXT，NextStep得到了Mac开发人员的广泛认可，NextStep更名为Cocoa，从此OC成为开发Mac平台的主力语言 随着iPhone、iPad的火爆，OC又成为了iOS平台上的中流砥柱 OC的未来： 苹果在2014年的WWDC大会上正式推出Swift，在2015年的WWDC上宣布年底发布的Swift 2.0将开源 Swift语言的优点：快速、现代、安全、互动且全面优于Objective-C语言 按照苹果的行事风格，Swift一定会取代OC成为iOS开发的主力语言，但是目前来看，要实现这一目标，还有一段路需要走【很多的企业在此之前他们已经使用Objective-C语言开发好了自己的程序，使用Swift重写是不可能的、Swift刚刚发布，还有很多Bug没有完善，企业不愿意当小白鼠、Swift本身还没有成型，在后期发布的版本中有大量的变化甚至包括语法的变化】 OC的光芒注定要被Swift的闪耀遮盖","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"Objective-C基础语法：","slug":"开发语言/Objective-C/Objective-C基础语法：","date":"2019-09-28T16:00:00.000Z","updated":"2021-05-20T15:52:55.008Z","comments":true,"path":"2019/09/29/开发语言/Objective-C/Objective-C基础语法：/","link":"","permalink":"http://example.com/2019/09/29/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/Objective-C%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%9A/","excerpt":"","text":"OC程序源文件的后缀名是.m【m是message，代表OC中最重要的消息机制】C程序源文件的后缀名为.c #import指令： 1）以#开头，是一个预处理指令2）是#include指令的增强版，将文件的内容在预编译的时候拷贝到写指令的地方，同一个文件无论被#import多少次，只会包含一次；如果#include指令要实现这个效果，就必须要配合条件编译指令来实现3）简要原理：#import指令在包含文件的时候，底层会先判断这个文件是否被包含，如果被包含就会略过，否则才会包含 框架： 是一个功能集，苹果或者第三方事先将一些程序在开发程序的时候经常要用到的功能事先写好，把这些功能封装在一个一个的类或者函数中，这些函数和类的集合就叫做框架【有点像C语言的函数库】 Foundation:这个框架提供了一些最基础的功能【输入输出，数据类型】Foundation.h这个文件包含了Foundation框架中的其他的所有的头文件，所以，我们只要包含Foundation.h就相当于包含了Foundation框架中所有的头文件，那么Foundation框架中的所有的函数和类就可以直接使用 @autoreleasepool是自动释放池 NSLog函数： 是printf函数的增强版，向控制台输出信息 NSLog(@“格式控制字符串”，变量列表); 增强点：1）输出一些调试相关信息【执行这段代码的时间，程序的名称，进程编号，线程编号，输出的信息】2）在输出完信息之后会自动换行3）OC中其实新增了一些数据类型，NSLog函数不仅仅可以输出C数据类型变量的值还可以输出OC新增的数据类型的变量的值 如果在字符串的末尾加了一个‘\\n’代表换行，那么函数的自动换行功能就会失效 字符串的存储方式： C语言的字符串的存储方式：1）使用字符数组存储2）使用字符指针 OC中设计了一个更为好用的用来存储字符串的一个类型：NSStringNSString类型的指针变量专门用来存储OC字符串的地址 OC的字符串常量必须要使用一个前缀@符号，NSString类型的指针变量只能存储OC字符串的地址NSString *str=@“jack”; NSLog函数的第一个参数是一个OC字符串，所以NSLog函数的第一个实参应该以@符号开头 NS前缀：NextStep—&gt;Cocoa—&gt;Foundation框架之中 @符号：1）将C字符串转换为OC字符串2）OC中的绝大部分的关键字都是以@符号开头","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"终端写第一个OC程序：","slug":"开发语言/Objective-C/终端写第一个OC程序：","date":"2019-09-27T16:00:00.000Z","updated":"2021-05-20T15:52:42.898Z","comments":true,"path":"2019/09/28/开发语言/Objective-C/终端写第一个OC程序：/","link":"","permalink":"http://example.com/2019/09/28/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E7%BB%88%E7%AB%AF%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AAOC%E7%A8%8B%E5%BA%8F%EF%BC%9A/","excerpt":"","text":"OC程序的编译，链接，执行： 在.m文件中写上符合OC语法规范的源代码：clear清屏cd /Users/ljlmacbookair/Desktop/OC2touch main.m 使用编译器将源代码编译为目标文件【预处理，检查语法，编译】cc -c main.m 链接如果程序中使用到了框架中的函数或者类，那么在链接的时候，就必须要告诉编译器去哪一个框架中找这个函数或者类cc main.o -framework Foundation 链接成功以后就会生成一个a.out可执行文件，执行就可以了./a.out OC程序和C程序各个阶段的后缀名：源文件 目标文件 可执行文件 C .c .o .outOC .m .o .out","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"OC与C的对比：","slug":"开发语言/Objective-C/OC与C的对比：","date":"2019-09-26T16:00:00.000Z","updated":"2021-05-20T15:52:31.392Z","comments":true,"path":"2019/09/27/开发语言/Objective-C/OC与C的对比：/","link":"","permalink":"http://example.com/2019/09/27/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/OC%E4%B8%8EC%E7%9A%84%E5%AF%B9%E6%AF%94%EF%BC%9A/","excerpt":"","text":"数据类型： OC中支持C语言的所有的数据类型 BOOL类型：可以存储YES或者NO中的任意一个数据；一般情况下BOOL类型的变量用来存储条件表达式的结果 typedef signed char BOOL;BOOL类型变量的本质实际上是一个有符号的char变量 Boolean类型的变量可以存储true或者false typedef unsigned char BOOL;Boolean类型变量的本质实际上是一个无符号的char变量 class 类型：类 id类型：万能指针 nil与NULL差不多 SEL：方法选择器 block：代码段 运算符：OC支持C语言中所有的运算符： 赋值运算符：= 算术运算符：+、-、*、/、% 复合赋值运算符：+=、-=、*=、/=、%= 自增与自减：++、—- 关系运算符：&gt;、&gt;=、&lt;、&lt;=、==、!= 逻辑运算符：&amp;&amp;、||、! 取地址运算符：&amp; 指针访问运算符：* 位运算符：&amp;、|、^、~ 控制语句：OC支持C所有的控制语句： if结构 switch-case结构 while循环 do-while循环 for循环 数组 函数 指针 关键字： OC支持C语言中全部的关键字，并且效果一致 OC也新增了一些关键字，OC新增的关键字绝大多数都是以@开头 @interface @implmentation @public 函数的定义和调用：函数的定义和调用与C语言的完全一致","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"面向过程和面向对象：","slug":"开发语言/Objective-C/面向过程和面向对象：","date":"2019-09-25T16:00:00.000Z","updated":"2021-05-20T15:52:20.141Z","comments":true,"path":"2019/09/26/开发语言/Objective-C/面向过程和面向对象：/","link":"","permalink":"http://example.com/2019/09/26/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E5%92%8C%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%EF%BC%9A/","excerpt":"","text":"优缺点分析： 面向过程的解决问题的缺点：后期的维护和修改不方便 面向对象的解决问题的优点：1）后期的维护和修改十分方便2）使用面向对象设计我们的程序，可以让我们的程序在后期的维护和修改当中更加的方便和快捷","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"类和对象：","slug":"开发语言/Objective-C/类和对象：","date":"2019-09-24T16:00:00.000Z","updated":"2021-05-20T15:52:08.770Z","comments":true,"path":"2019/09/25/开发语言/Objective-C/类和对象：/","link":"","permalink":"http://example.com/2019/09/25/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%EF%BC%9A/","excerpt":"","text":"对象：现实生活中的一个具体存在，看得见摸得着，拿过来就可以直接使用 类：对一群具有相同特征或者行为的事物的一个统称，抽象的，不能直接使用 类是模版，类的对象是根据这个模版创建出来的，类模版中有什么，对象中就有什么，绝不可能多，也绝不可能少 设计类的三要素：1）类的名字2）这类事物具有的相同的特征3）这类事物具有的共同的行为 注意：1）类必须要有声明和实现2）类名的首字母必须要以大写开头3）属性的名字必须要以_开头（下划线） 定义类的语法： 位置：直接写在源文件中，不要写在main函数之中 类的定义分为两部分：1）类的声明 @inteface 类名：NSObject{ 这类事物具有的共同的特征，将他们定义为变量 } //一类事物不仅具有相同的特征还具有相同的行为，行为就是一个功能，C语言中使用函数来表示一个功能，OC的类具有的行为，我们使用方法来表示 //将方法的声明写在这里 (返回值类型)方法名称； @end 2）类的实现 @implementation 类名 //将方法的实现写在这里 @end 创建类的对象： 类名 *对象名=[类名 new]; 使用对象： 访问对象的属性：默认情况下，对象的属性是不允许被外界直接访问的，如果允许对象的属性可以被外界访问，那么就在声明属性的时候加一个@public关键字 访问对象属性的方式： 对象名-&gt;属性名=值；(*对象名).属性名； 无参方法的声明和实现： 有一个参数方法的声明和实现： 带多个参数方法的声明和实现： 在方法的实现中，可以直接访问属性，这个方法是通过哪一个对象来调用的，那么方法中的直接访问的属性就是哪一个对象的：","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"对象在内存中是如何存储的：","slug":"开发语言/Objective-C/对象在内存中是如何存储的：","date":"2019-09-23T16:00:00.000Z","updated":"2021-05-20T15:51:57.940Z","comments":true,"path":"2019/09/24/开发语言/Objective-C/对象在内存中是如何存储的：/","link":"","permalink":"http://example.com/2019/09/24/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E6%98%AF%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8%E7%9A%84%EF%BC%9A/","excerpt":"","text":"内存中的五大区域： 栈：存储局部变量 堆：程序员手动申请的字节空间 BSS段：存储未被初始化的全局变量、静态变量 数据段（常量区）：存储已被初始化的全局变量、静态变量、常量数据 代码段：存储代码，存储程序的代码 类加载：在程序运行期间，当某个类第一次被访问到的时候，会将这个类存储到内存中的代码段区域，这个过程叫做类加载；只有类在第一次被访问的时候才会做类加载，一旦类被加载到代码段以后，直到程序结束的时候才会被释放。1）在创建对象的时候，肯定是需要访问类的2）声明一个类的指针变量也会访问类的 对象在内存中究竟是如何存储的：假设这个写在函数之中：Person *p1=[Person new]; Person *p1：会在栈内存中申请一块空间，在栈内存中声明一个Person类型的指针变量p1。p1是一个指针变量，只能存储地址 [Person new]：真正在内存中创建对象的其实是这句代码 New做的事情： 在堆内存中申请一块合适大小的空间 在这个空间中根据类的模版创建对象，类模版中定义了什么属性，就把这些属性依次的声明在对象之中，对象中还有另外一个属性，叫做isa，是一个指针，指向对象所属的类在代码段中的地址 初始化对象的属性：如果属性的类型是基本数据类型，那么就赋值为0；如果是C语言的指针类型就赋值为NULL；如果是OC的类指针类型，就赋值为nil NULL(nil)只能作为指针变量的值，如果一个指针变量的值是NULL(nil)代表这个指针不指向内存中的任何一块空间，NULL(nil)其实是一个宏，就是0 建议：C指针用NULL，int *p1=NULL; OC的类指针用nil，Person *p1=nil; 如果一个类指针的值为nil，代表这个指针不指向任何对象：Person *p1=nil;这个时候，如果通过p1指针去访问p1指针指向的对象的属性，会运行报错；如果通过p1指针去调用对象的方法，运行不会报错但是方法不会执行，没有反应 返回对象的地址： 注意： 对象中只有属性，而没有方法，自己类的属性+一个isa指针指向代码段中的类 如何访问对象的属性：指针名-&gt;属性名；根据指针，找到指针所指的对象，再找到对象中的属性来访问 如何调用方法：[指针名 方法名];先根据指针名找到对象，对象发现要调用方法，再根据对象的isa指针找到类，然后调用类里的方法 为什么不把方法存储在对象中：因为每一个对象的方法的代码实现都是一模一样的，没有必要为每一个对象都保存一个方法，这样的话就太浪费空间了 同类型的指针变量之间是可以相互赋值的：Person *p1=[Person new];Person *p2=p1; 这是完全没有问题的，p1和p2的类型都是Person指针类型的，代表将p1的值赋值给p2，而p1的值是对象的地址，所以就把对象的地址赋值给了p2，所以p1和p2指向了同一个对象 目前为止，只要看见new，就说明新创建了一个对象：","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"分组导航标记、方法与函数的不同：","slug":"开发语言/Objective-C/分组导航标记、方法与函数的不同：","date":"2019-09-22T16:00:00.000Z","updated":"2021-05-20T15:51:39.774Z","comments":true,"path":"2019/09/23/开发语言/Objective-C/分组导航标记、方法与函数的不同：/","link":"","permalink":"http://example.com/2019/09/23/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%88%86%E7%BB%84%E5%AF%BC%E8%88%AA%E6%A0%87%E8%AE%B0%E3%80%81%E6%96%B9%E6%B3%95%E4%B8%8E%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%8D%E5%90%8C%EF%BC%9A/","excerpt":"","text":"分组导航标记：1）#pragma mark 分组名：就会在导航条对应的位置显示一个标题2）#pragma mark -：就会在导航条对应的位置显示一条水平分割线3）#pragma mark - 分组名：就会在导航条对应的位置先产生一条水平分割线，再显示标题 方法与函数的不同： OC方法的声明只能写在@interface的大括弧的外面，实现只能写在@implementation之中函数除了在函数的内部和@interface的大括弧之中，其他地方都可以写 就算把函数写在类中，这个函数仍然不属于类，所以创建的对象中也没有这个函数注意：函数不要写在类中，虽然这样是可以的，但是千万不要这么做，因为这么做是极度不规范的 调用的方式不同：函数可以直接调用，但是方法必须要先创建对象，通过对象来调用 方法是属于类的，而函数是一个独立的 注意点： @interface是类的声明，@implementation是类的实现，它们之间不能相互嵌套 类必须先声明然后再实现 类的声明和实现必须都要有，特殊情况下可以只有实现没有声明，虽然可以这样，但是千万不要这么写，极不规范 类的声明必须要放在使用类的前面，实现可以放在使用类的后面 属性名一定要以下划线开头，这是规范；类名的每一个单词的首字母大写 属性不允许声明的时候初始化 OC方法必须要创建对象通过对象名来调用 如果方法只有声明，没有实现，编译器会给一个警告，不会报错 如果指针指向的对象有方法的声明而没有方法的实现，那么这个时候通过指针来调用这个方法在运行的时候就会报错 unrecognized selector sent to instance 0x100420510只要看到这个错误，说明要么对象中根本就没有这个方法，要么只有方法的声明而没有方法的实现","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"多文件开发、对象和方法：","slug":"开发语言/Objective-C/多文件开发、对象和方法：","date":"2019-09-21T16:00:00.000Z","updated":"2021-05-20T15:51:28.589Z","comments":true,"path":"2019/09/22/开发语言/Objective-C/多文件开发、对象和方法：/","link":"","permalink":"http://example.com/2019/09/22/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%A4%9A%E6%96%87%E4%BB%B6%E5%BC%80%E5%8F%91%E3%80%81%E5%AF%B9%E8%B1%A1%E5%92%8C%E6%96%B9%E6%B3%95%EF%BC%9A/","excerpt":"","text":"多文件开发：所有的类都写在main.m这个源文件之中，导致后期的维护非常不方便，也不利于团队开发 推荐的方式：把一个类写在一个模块之中，而一个模块至少包含两个文件：.h头文件写类(方法)的声明，因为要用到Foundation框架中的NSObject类，所以要在这个头文件中引入Foundation框架的头文件.m实现文件写类(方法)的实现，先引入模块的头文件，这样才会有类的声明 如果要用到类，只需要引入这个模块的头文件就可以了 添加类模块的更简洁的方式：NewFile—Cocoa Class自动生成模块文件.h .m，自动的将类的声明和实现写好【填写的名称是决定模块文件的名称，类名是可以自己再改的，但是建议模块的文件名和模块中的类名保持一致，这样方便代码的管理】 对象和方法：对象作为方法的参数，对象作为方法的返回值类的本质是我们自定义的一个数据类型，因为对象在内存中的大小是由我们自己决定的，多写几个属性对象就大一些，少写几个属性对象占用的空间就小一些 数据类型：是在内存中开辟空间的一个模版 既然类是一个数据类型，那么类就可以作为方法的参数：- (void)test:(Dog *)dog; 注意： 当对象作为方法的参数的时候，参数类型是类指针- (void)test:(Dog *)dog; 调用方法的时候，如果方法的参数是一个对象，那么给实参的时候，实参要求也必须是一个符合要求的对象，否则就会出问题 当对象作为方法的参数传递的时候，是地址传递，所以在方法内部通过形参去修改形参指向的对象的时候，会影响实参变量指向的对象的值 对象也可以作为方法的返回值：当方法执行完毕后，如果有一个对象方法的内部不知道如何处理，并且这个对象是调用者翘首以盼的，那么这个时候我们就应该将这个对象返回 上帝杀人案例：","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"对象作为类的属性：","slug":"开发语言/Objective-C/对象作为类的属性：","date":"2019-09-20T16:00:00.000Z","updated":"2021-05-20T15:50:55.991Z","comments":true,"path":"2019/09/21/开发语言/Objective-C/对象作为类的属性：/","link":"","permalink":"http://example.com/2019/09/21/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%AF%B9%E8%B1%A1%E4%BD%9C%E4%B8%BA%E7%B1%BB%E7%9A%84%E5%B1%9E%E6%80%A7%EF%BC%9A/","excerpt":"","text":"一个Target中的类无法直接在另外一个Target中访问 如果要访问其他Target中的类，找到其他Target中的类，右键Show in Finder，选中这个模块直接拖拽到当前类中（上面两个按钮要勾上） 类的属性代表这类事物具有的共同的特征，代表这个类所拥有的东西类的方法代表这个类所具备的行为，这个类所具备的功能 对象作为类的属性【人拥有一条狗，狗拥有圈圈】 属性的本质是变量，在创建对象的时候，对象中的属性是按照类模版中的规定挨个挨个的创建出来的，类模版中属性是什么类型，那么对象中的属性就是什么类型 如果对象的属性是另外一个类的对象，这个属性仅仅是一个指针变量而已，并没有对象产生，这个时候还要为这个属性赋值一个对象的地址才可以正常使用","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"猜拳游戏：","slug":"开发语言/Objective-C/猜拳游戏：","date":"2019-09-19T16:00:00.000Z","updated":"2021-05-20T15:49:24.808Z","comments":true,"path":"2019/09/20/开发语言/Objective-C/猜拳游戏：/","link":"","permalink":"http://example.com/2019/09/20/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E7%8C%9C%E6%8B%B3%E6%B8%B8%E6%88%8F%EF%BC%9A/","excerpt":"","text":"枚举或者结构体定义在什么地方：如果只是一个类要用，那么就定义在这个类的头文件中；如果多个类要用，那么就定义在一个单独的头文件中 123456789101112131415161718192021//Player.h#import &lt;Foundation/Foundation.h&gt;#import &quot;FistType.h&quot;@interface Player : NSObject&#123; @public NSString *_name; int _score; FistType _selectedType;&#125;- (void)showFist;//根据传入的整型的数返回对应字符串拳头- (NSString *)fistTypeWithNumber:(int)number;@end 1234567891011121314151617181920212223242526272829303132333435363738394041//Player.m#import &quot;Player.h&quot;@implementation Player- (void)showFist&#123; //提示用户选择拳头 NSLog(@&quot;亲爱的玩家[%@]，请选择你要出的拳头 1.剪刀 2.石头 3.布&quot;,_name); //接收用户输入的拳头 int userSelect=0; scanf(&quot;%d&quot;,&amp;userSelect); //显示用户选择的拳头 //要取出整型的数代表的字符串的拳头的类型 NSString *type=[self fistTypeWithNumber:userSelect]; //如果要在方法中调用当前对象的另外一个方法：[self 方法名];self代表当前对象 NSLog(@&quot;玩家[%@]出的拳头是:%@&quot;,_name,type); //将用户选择的拳头存储在当前对象的属性中 _selectedType=userSelect;&#125;- (NSString *)fistTypeWithNumber:(int)number&#123; switch (number) &#123; case 1: return @&quot;剪刀&quot;; case 2: return @&quot;石头&quot;; case 3: return @&quot;布&quot;; default: return @&quot;你输入的不对哟，请重新输入&quot;; &#125;&#125;@end 123456789101112131415161718//Robot.h#import &lt;Foundation/Foundation.h&gt;#import &quot;FistType.h&quot;@interface Robot : NSObject&#123; @public NSString *_name; FistType _selectedType; int _score;&#125;- (void)showFist;@end 123456789101112131415161718192021222324252627282930313233343536//Robot.m#import &quot;Robot.h&quot;#import &quot;stdlib.h&quot;@implementation Robot- (void)showFist&#123; //随机出拳 int robotSelect=arc4random_uniform(3)+1; //显示随机出的拳头 NSString *type=[self fistTypeWithNumber:robotSelect]; NSLog(@&quot;机器人[%@]出的拳头是：%@&quot;,_name,type); //将出的拳头保存在当前对象的属性中 _selectedType=robotSelect;&#125;- (NSString *)fistTypeWithNumber:(int)number&#123; switch (number) &#123; case 1: return @&quot;剪刀&quot;; case 2: return @&quot;石头&quot;; case 3: return @&quot;布&quot;; default: return @&quot;你输入的不对哟，请重新输入&quot;; &#125;&#125;@end 1234567891011121314151617//Judge.h#import &lt;Foundation/Foundation.h&gt;#import &quot;Robot.h&quot;#import &quot;Player.h&quot;@interface Judge : NSObject&#123; @public NSString *_name;&#125;- (void)caiJueWithPlayer:(Player *)player andRobot:(Robot *)robot;@end 123456789101112131415161718192021222324252627282930313233343536373839404142//Judge.m#import &quot;Judge.h&quot;@implementation Judge- (void)caiJueWithPlayer:(Player *)player andRobot:(Robot *)robot&#123; //先拿到玩家和机器人出的拳头 FistType playerType=player-&gt;_selectedType; FistType robotType=robot-&gt;_selectedType; //判断输赢，为胜利的对象加分，显示结果 /* 剪刀1 石头2 布3 1 3 -2 2 1 1 3 2 1 */ NSLog(@&quot;我是裁判[%@],现在我来宣布比赛结果&quot;,_name); if(playerType-robotType==-2 || playerType-robotType==1)&#123; //玩家胜利，提示 NSLog(@&quot;恭喜玩家[%@]取得了胜利&quot;,player-&gt;_name); //为玩家加分 player-&gt;_score++; &#125; else if(playerType==robotType)&#123; //平局 NSLog(@&quot;[%@]、[%@]你们真是心有灵犀一点通啊！&quot;,player-&gt;_name,robot-&gt;_name); &#125; else&#123; //机器人胜利 NSLog(@&quot;恭喜机器人[%@]取得了胜利&quot;,robot-&gt;_name); robot-&gt;_score++; &#125; //显示得分 NSLog(@&quot;---玩家：[%@]:[%d]----------机器人：[%@]:[%d]&quot;,player-&gt;_name,player-&gt;_score,robot-&gt;_name,robot-&gt;_score);&#125; @end 12345678910111213141516//FistType.htypedef enum&#123; //剪刀枚举 FistTypeJianDao=1, //石头枚举 FistTypeShiTou=2, //布枚举 FistTypeBu=3, &#125;FistType; 123456789101112131415161718192021222324252627282930313233//main.m#import &lt;Foundation/Foundation.h&gt;#import &quot;Judge.h&quot;int main(int argc, const char * argv[]) &#123; Player *xiaoMing=[Player new]; xiaoMing-&gt;_name=@&quot;小明&quot;; Robot *aGou=[Robot new]; aGou-&gt;_name=@&quot;阿尔法狗&quot;; Judge *heiShao=[Judge new]; heiShao-&gt;_name=@&quot;黑哨&quot;; while(1)&#123; [xiaoMing showFist]; [aGou showFist]; [heiShao caiJueWithPlayer:xiaoMing andRobot:aGou]; NSLog(@&quot;还要再玩一把嘛(y/n)&quot;); char ans=&#x27;a&#x27;; rewind(stdin); scanf(&quot;%c&quot;,&amp;ans); if(ans != &#x27;y&#x27;)&#123; NSLog(@&quot;欢迎下次再来玩哦！&quot;); break; &#125; &#125;&#125; 执行结果：","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"异常处理：","slug":"开发语言/Objective-C/异常处理：","date":"2019-09-18T16:00:00.000Z","updated":"2021-05-20T15:49:13.225Z","comments":true,"path":"2019/09/19/开发语言/Objective-C/异常处理：/","link":"","permalink":"http://example.com/2019/09/19/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%9A/","excerpt":"","text":"一般情况下，错误指的是我们写的源代码不符合语法规范，然后编译报错，导致程序无法编译 Bug指的是程序可以编译、链接、执行，但程序执行的结果并不是我们所预想的那样，可以通过调试寻找发生Bug的原因 异常指的是程序可以编译、链接、执行，当程序在执行的时候，处于某种特定条件下程序的执行就会终止，后果是程序会立即崩溃，立即终止运行并且后面的代码不会执行了 异常处理的目的：为了让程序在执行的时候如果发生了异常而不崩溃，继续往下执行 语法： @try{ &#125; @catch(NSException *ex)&#123; &#125; 将有可能发生异常的代码放在@try中，当@try中的代码在执行的时候如果发生了异常，不会崩溃，而是会立即跳转到@catch中去执行里面的代码，当@catch的代码执行完毕后，结束@try…@catch往下执行，如果@try中的代码在执行的时候没有发生异常，就会略过@catch往下执行 当@try中的代码在执行的时候发生了异常，@try块发生异常的后面的代码不会执行，而是立即转到@catch 注意： @catch中的代码只有在@try的代码发生异常的时候才会执行，所以，@catch中我们一般情况下写处理异常的代码（发生这个异常之后，要做什么事情） @catch的参数NSException *ex，通过%@打印出ex指向的对象的值，可以拿到发生异常的原因 @try…@catch后面还可以跟一个@finally{}，@finally中的代码，无论@try中是否发生了异常都会被执行 @try…@catch并不是万能的，不是所有的运行时错误都可以处理的【C语言的异常是无法处理的】，在实际的开发过程中，使用@try用的相对比较少的，避免异常我们最常用的方式还是逻辑判断","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"类方法：","slug":"开发语言/Objective-C/类方法：","date":"2019-09-17T16:00:00.000Z","updated":"2021-05-20T15:48:42.523Z","comments":true,"path":"2019/09/18/开发语言/Objective-C/类方法：/","link":"","permalink":"http://example.com/2019/09/18/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E7%B1%BB%E6%96%B9%E6%B3%95%EF%BC%9A/","excerpt":"","text":"OC中的方法分为两种： 对象方法/实例方法：如果想要调用对象方法就必须要先创建对象，通过对象名来调用 类方法：类方法的调用不依赖于对象，如果要调用类方法，不需要去创建对象，而是直接通过类名来调用 类方法的声明：【只有“+”“-”号的区别】+ (返回值类型)方法名; 调用：[类名 类方法名];（不需要创建对象） 类方法和对象方法的调用过程： 类方法的特点：1）节约空间：因为调用类方法不需要创建对象2）提高效率：因为调用类方法不需要拐弯，直接找到类，直接执行类中的类方法 在类方法中不能直接访问属性（类方法在执行的时候有可能还没有对象，虽然不能直接访问属性，但是我们可以在类方法中创建一个对象，访问这个对象的属性）1）属性是在对象创建的时候，跟随着对象一起创建在对象之中2）类第一次被访问的时候会做类加载，是把类的代码存储在代码段 在类方法中也不能通过self直接调用当前类的其他的对象方法，因为对象方法只能通过对象来调用，而这个时候没有对象 在对象方法中可以直接调用类方法 如果方法不需要直接访问属性也不需要直接调用其他的对象方法，那么我们就可以将这个方法定义为类方法，这样就节约空间提高效率 关于类方法的规范：1）如果我们写一个类，那么就要求为这个类提供一个和类名同名的类方法，这个方法创建一个最纯洁的对象返回2）如果你希望创建的对象的属性的值由调用者指定，那么就为这个类方法带参数","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"NSString：","slug":"开发语言/Objective-C/NSString：","date":"2019-09-16T16:00:00.000Z","updated":"2021-05-20T15:48:30.891Z","comments":true,"path":"2019/09/17/开发语言/Objective-C/NSString：/","link":"","permalink":"http://example.com/2019/09/17/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/NSString%EF%BC%9A/","excerpt":"","text":"1）NSString是一个数据类型，用来保存OC字符串2）NSString是Foundation框架中的一个类，作用是存储OC字符串的，所以OC中的字符串本质上是用NSString对象来存储的 其实完整的标准的创建NSString对象的方式：NSString *str0=[NSString new];NSString *str1=[NSString string];这种方式创建的字符串是空字符串 @“” 但是，NSString是我们最常用的一个对象，所以OC使用了一种更为简单的方式来创建字符串对象：直接使用@来表示一个OC字符串@“jack”;(这个其实本质上是一个NSString对象) NSString *str=@“jack”;【str的值是这个对象的地址，%p打印的是指针变量的值；%@打印的是指针变量指向的对象】NSString *str1=[NSString stringWithFormat:@“jack”]; NSString最常用的类方法： + (instancetype)stringWithUTF8String:(const char *)nullTerminatedCString;Instancetype作为返回值，代表返回的是当前这个类的对象作用：将C语言的字符串转换为OC字符串对象 + (instancetype)stringWithFormat:(NSString *)format,….作用：拼接一个字符串对象，使用变量或者其他数据拼接成OC字符串 NSString最常用的对象方法： length方法，返回值为NSUInteger，其实就是unsigned long得到字符串的字符的个数，可以处理中文 得到字符串中指定下标的字符* (unichar)characterAtIndex:(NSUInteger)index;返回值是unichar，其实就是unsinged short，占据两个字节 如果要输出unichar变量的值使用%C(中文输出) 判断两个字符串的内容是否相同，不要用==去判断，因为这样有可能会出问题： 判断相等的方式：* (BOOL)isEqualToString:(NSString *)aString; 比较字符串的大小 * (NSComparisonResult)compare:(NSString *)string;完全可以使用int来接收结果，因为返回值是一个枚举返回值如果是-1（小于），0（等于），1（大于）","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"匿名对象：","slug":"开发语言/Objective-C/匿名对象：","date":"2019-09-15T16:00:00.000Z","updated":"2021-05-20T15:48:19.070Z","comments":true,"path":"2019/09/16/开发语言/Objective-C/匿名对象：/","link":"","permalink":"http://example.com/2019/09/16/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%8C%BF%E5%90%8D%E5%AF%B9%E8%B1%A1%EF%BC%9A/","excerpt":"","text":"如果我们创建一个对象，没有用一个指针存储这个对象的地址，也就是没有任何指针指向这个对象，那么这个对象就叫做匿名对象 因为new实际上是一个类方法，这个方法做的事情就是创建对象，返回值是创建的对象的地址，[Person new]这句代码的结果实际上就是创建的那个对象的指针，那我们可以直接使用 注意点：1）匿名对象只能使用一次2）每次创建匿名对象都是不同的对象 什么时候使用匿名对象：1）如果某个对象的成员只会被我们使用一次，用完之后这个对象再也不需要了，那么就可以使用匿名对象2）如果方法的参数是一个对象，而调用者为这个参数赋值的对象就是专门来给这个方法传递的并且这个对象调用者不会再使用，那么这个时候就可以直接为方法传递一个匿名对象（上帝杀人）","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"面向对象的三大特征：","slug":"开发语言/Objective-C/面向对象的三大特征：","date":"2019-09-14T16:00:00.000Z","updated":"2021-05-20T15:48:06.591Z","comments":true,"path":"2019/09/15/开发语言/Objective-C/面向对象的三大特征：/","link":"","permalink":"http://example.com/2019/09/15/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81%EF%BC%9A/","excerpt":"","text":"封装：类就是更高级别的封装，类将数据和行为封装为了一个整体 优点： 屏蔽内部的实现，外界不需要知道内部是如何实现的，只需要知道这个对象有什么用 方便操作 后期的维护十分的便利 属性的封装： 存在的问题：为对象的属性赋值的时候，语法上其实只要数据的类型是属性的类型就是可以的，但是情理上这么做是不合的（人的年龄） 解决问题：1）将属性的@public去掉2）为类提供一个方法，这个方法专门为这个属性赋值，这个方法我们叫做setter setter方法：1）这个方法是一个对象方法，因为这个方法要为属性赋值；2）这个方法没有返回值；3）这个方法的名称必须以set开头，跟上去掉下划线首字母大写的属性名；4）这个方法一定是有参数的，参数的类型和属性的类型一致，参数的名称和属性的名称一致（去掉下划线）5）在方法的实现中，判断传入的数据是否符合逻辑，如果符合逻辑则赋值，否则做默认处理6）外界想要为对象的属性赋值，那么就调用这个对象的setter方法，将要赋值的数据传入这个方法 以上又有一个问题：在外界无法取出属性的值了 getter方法：1）是一个对象方法，因为这个方法做的事情是拿到属性的值返回2）有返回值，返回值的类型和属性的类型一致3）这个方法的名称直接就是属性的名称（去掉下划线）4）这个方法没有参数 只要属性需要被外界访问，就要为这个属性封装setter和getter，哪怕在赋值或者取值的时候没有任何逻辑验证 只读封装：为属性封装的时候，只提供getter，不提供setter只写封装：为属性封装的时候，只提供setter，不提供getter","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"对象与对象之间的关系：","slug":"开发语言/Objective-C/对象与对象之间的关系：","date":"2019-09-13T16:00:00.000Z","updated":"2021-05-20T15:47:52.640Z","comments":true,"path":"2019/09/14/开发语言/Objective-C/对象与对象之间的关系：/","link":"","permalink":"http://example.com/2019/09/14/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%AF%B9%E8%B1%A1%E4%B8%8E%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB%EF%BC%9A/","excerpt":"","text":"组合关系：一个类是由其他的几个类联合起来组合而成【计算机由主板、显卡等组成】 依赖关系：一个对象的方法的参数是另外一个对象【人依赖于手机】 耦合度：当修改一个对象的时候对另外一个对象的影响程度【低耦合，高耦合】 高内聚：一个对象仅仅做与自己相关的事情【单一职责原则】 关联关系：一个类作为另外一个类的属性，但是它们不是组合关系，而是一个拥有的关系【人拥有狗】 继承关系","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"static关键字：","slug":"开发语言/Objective-C/static关键字：","date":"2019-09-12T16:00:00.000Z","updated":"2021-05-20T15:47:39.394Z","comments":true,"path":"2019/09/13/开发语言/Objective-C/static关键字：/","link":"","permalink":"http://example.com/2019/09/13/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/static%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%9A/","excerpt":"","text":"static不能修饰属性，也不能修饰方法，可以修饰方法中的局部变量 如果方法中的局部变量被static修饰，那么这个变量就会被变成静态变量，存储在常量区，当方法执行完毕之后，不会回收，下次再执行这个方法的时候，直接使用而不用再声明了 如果方法的返回值是当前类的对象，那么方法的返回值就写instancetype","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"self关键字：","slug":"开发语言/Objective-C/self关键字","date":"2019-09-11T16:00:00.000Z","updated":"2021-05-20T15:47:08.624Z","comments":true,"path":"2019/09/12/开发语言/Objective-C/self关键字/","link":"","permalink":"http://example.com/2019/09/12/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/self%E5%85%B3%E9%94%AE%E5%AD%97/","excerpt":"","text":"在方法的内部可以定义一个和属性名相同的局部变量，这个时候，如果在方法中访问这个同名的变量，访问的是局部变量，如果需要访问属性就需要使用关键字self self可以在对象方法和类方法中使用，self是一个指针，在对象方法中self指向当前对象，在类方法中self指向当前类 self在对象方法中使用：作用：1）可以使用self显示的访问当前对象的属性：self-&gt;属性，代表访问的是当前对象的这个属性2）可以使用self来调用当前对象的其他的对象方法 必须使用self的场景：1）如果在方法中存在和属性同名的局部变量，你如果想要访问同名的局部变量，直接写就可以了，你如果想要访问当前对象的同名属性，必须使用self2）在对象方法中，如果要调用当前对象的其他的对象方法，必须使用self 属性要求以下划线开头，局部变量不要求以下划线开头，按照这个规范来，实际上是不会重名的 self在类方法中使用：self是一个指针，指向当前这个类在代码段中的地址【就相当于这个类】 作用：可以在类方法中使用self来显示的调用本类的其他的类方法 总结取到类在代码段中的地址的方式：1）调试查看对象的isa指针的值2）在类方法中查看self的值3）调用对象的对象方法class，就会返回这个对象所属的类在代码段中的地址4）调用类的类方法class，就会返回这个类在代码段中的地址 12345Person *p1=[Person new];NSLog(@&quot;%p&quot;,[p1 class]);NSLog(@&quot;%p&quot;,[Person class]); 对象方法可以声明多次，但是只会认为有一次，只能实现一次，否则会报错【对象方法之间是不能重名的；类方法之间也不能重名；但是对象方法和类方法是可以重名的，通过类名来调用，调用的就是类方法，通过对象名来调，调用的就是对象方法】 注意：1）在对象方法中，self代表当前对象，所以可以通过self访问当前对象的成员，在对象方法中，不能使用self调用本类的类方法2）在类方法中，self代表当前这个类，所以，可以通过self调用当前类的其他的类方法，在类方法中，不能通过self访问对象的成员，不能直接去访问属性和调用对象的方法","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"继承、NSObject：","slug":"开发语言/Objective-C/继承、NSObject：","date":"2019-09-10T16:00:00.000Z","updated":"2021-05-20T15:46:56.205Z","comments":true,"path":"2019/09/11/开发语言/Objective-C/继承、NSObject：/","link":"","permalink":"http://example.com/2019/09/11/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E7%BB%A7%E6%89%BF%E3%80%81NSObject%EF%BC%9A/","excerpt":"","text":"继承的目的：儿子类想拥有父亲类中的所有的成员，但是不想自己去定义，而是想凭空拥有 继承的语法：@interface 子类名：父类名 @end 术语：@interface Student:Person1）Student类从Person类继承，Student类是Person类的子类，Person类是Student类的父类2）Student类从Person类派生，Student类是Person类的派生类，Person类是Student类的基类 在新创建类模版的时候指定父类，Xcode就会自动的帮助你完成一系列事情 继承是类在继承，而不是对象在继承，我们创建对象，对象与对象之间是毫无关系的，只是子类对象中拥有父类对象中的同样的成员 千万不要为了继承而去继承，不要为了仅仅是得到某个类的成员你就不顾伦理去乱继承（人继承狗类？） 子类从父类继承，就意味着子类拥有了父类的所有成员，包括属性和方法 如果有一个成员不是所有的子类都拥有的，那么这个成员就不应该定义在父类之中，因为一旦定义在父类之中，那么所有的子类全都有了，父类中只定义所有的子类都拥有的 继承的特点：1）单根性：一个类只能有一个父类，不能有多个父类2）传递性：A类从B类继承，B类从C类继承，那么A类就同时拥有B、C类的成员 NSObject类是OC中所有类的祖宗类，因为OC中的类全部都是直接的或者间接的从它继承 NSObject类：这是Foundation框架中的类，在这个类中有一个类方法new，这个方法是用来创建对象的，方法的返回值是创建的这个对象的指针；也就是说，如果要创建类的对象，就必须要调用这个new方法，如果我们想要让我们的类具备创建对象的能力，就必须要让我们的类直接或者间接的从NSObject类继承 在NSObject类之中，还定义了一个属性，这个属性叫做isa指针，所以每一个子类对象中都有一个叫做isa指针 子类中不能存在和父类同名的属性","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"super关键字（特指这个方法是从父类继承过来的）：","slug":"开发语言/Objective-C/super关键字（特指这个方法是从父类继承过来的）：","date":"2019-09-09T16:00:00.000Z","updated":"2021-05-20T15:46:40.740Z","comments":true,"path":"2019/09/10/开发语言/Objective-C/super关键字（特指这个方法是从父类继承过来的）：/","link":"","permalink":"http://example.com/2019/09/10/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/super%E5%85%B3%E9%94%AE%E5%AD%97%EF%BC%88%E7%89%B9%E6%8C%87%E8%BF%99%E4%B8%AA%E6%96%B9%E6%B3%95%E6%98%AF%E4%BB%8E%E7%88%B6%E7%B1%BB%E7%BB%A7%E6%89%BF%E8%BF%87%E6%9D%A5%E7%9A%84%EF%BC%89%EF%BC%9A/","excerpt":"","text":"1）可以用在类方法和对象方法之中 2）在对象方法中可以使用super关键字调用当前对象从父类继承过来的对象方法 12[self sayHi];[super sayHi]; 3）在类方法中，super关键字可以调用当前类从父类继承过来的类方法【类方法也能被子类继承，父类中的类方法可以使用父类名来调用，也可以使用子类名调用】 1234[Person hehe];[Student hehe];[self hehe];[super hehe]; 4）super只能用来调用父类的对象方法或者类方法，不能用来访问属性","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"访问修饰符：用来修饰属性","slug":"开发语言/Objective-C/访问修饰符：用来修饰属性","date":"2019-09-08T16:00:00.000Z","updated":"2021-05-20T15:46:28.047Z","comments":true,"path":"2019/09/09/开发语言/Objective-C/访问修饰符：用来修饰属性/","link":"","permalink":"http://example.com/2019/09/09/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6%EF%BC%9A%E7%94%A8%E6%9D%A5%E4%BF%AE%E9%A5%B0%E5%B1%9E%E6%80%A7/","excerpt":"","text":"可以限定对象的属性在哪一段范围之中访问 @private私有的，被@private修饰的属性只能在本类的内部访问，只能在本类的方法实现中访问 @protected受保护的，被@protected修饰的属性只能在本类和本类的子类中访问，只能在本类和子类的方法实现中访问 @package：被@package修饰的属性，可以在当前框架中访问 @public：公共的，被@public修饰的属性可以在任意的地方访问 如果不为属性指定访问修饰符，那么默认的就是@protected 子类仍然可以继承父类的私有属性，只不过在子类中无法去直接访问从父类继承过来的私有属性，但是如果父类中有一个方法在为属性赋值或者取值，那么子类可以调用这个方法间接的访问父类的私有属性 访问修饰符的作用域：从写访问修饰符的地方开始往下，直到遇到另外一个访问修饰符或者结束大括弧为止，中间的所有的属性都应用于这个访问修饰符 1234567891011@interface Person:NSObject&#123; @private NSString *_name; @public int _age; int _x; @protected int _y;&#125; 使用建议：1）@public无论什么情况下都不要使用，属性不要直接暴露给外界2）@private如果属性只想在本类中使用，不想在子类中使用，那么就使用它3）@protected：如果你希望属性只在本类和本类的子类中使用推荐使用默认的@protected 访问修饰符只能用来修饰属性，不能用来修饰方法","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"私有属性和私有方法","slug":"开发语言/Objective-C/私有属性和私有方法","date":"2019-09-07T16:00:00.000Z","updated":"2021-05-20T15:46:12.007Z","comments":true,"path":"2019/09/08/开发语言/Objective-C/私有属性和私有方法/","link":"","permalink":"http://example.com/2019/09/08/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7%E5%92%8C%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95/","excerpt":"","text":"我们刚才讲的@private修饰的属性叫做私有属性，只能在类的内部访问，但是在外界的时候，Xcode仍然会提示这个对象中有这个属性，只不过没权访问，我们想要实现的效果是真私有，让外界不知道对象里面有这么一个属性 其实在@implementation之中也可以写一个大括弧，把属性定义在@implementation的大括弧之中，这里面的属性，是一个私有属性，各种访问修饰符无效，外界根本就不会提示 将属性定义在@implementation之中和将属性定义在@interface之中并标记为@private唯一的区别：提示和不提示，都不能在外界访问 私有方法：方法不写声明只写实现，那么这个方法就是一个私有方法，只能在本类的其他方法中调用，不能在外界调用","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"里氏替换原则—LSP","slug":"开发语言/Objective-C/里氏替换原则—LSP","date":"2019-09-06T16:00:00.000Z","updated":"2021-05-20T15:45:59.391Z","comments":true,"path":"2019/09/07/开发语言/Objective-C/里氏替换原则—LSP/","link":"","permalink":"http://example.com/2019/09/07/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99%E2%80%94LSP/","excerpt":"","text":"子类可以替换父类的位置，并且程序的功能不受影响 1234Person *p1=[Person new];Student *s1=[Student new];Person *p2=[Student new]; 为什么？1）父类指针迫切的需求要一个父类对象，而我们给了一个子类对象，这是完全没有问题的【你想要一个人，我给你一个学生】2）因为父类中拥有的成员子类都有，所以不会影响程序的功能 里氏替换原则的表现形式：当一个父类指针指向一个子类对象的时候，这里就有里氏替换原则 里氏替换原则的作用：1）一个指针中不仅可以存储本类对象的地址还可以存储子类对象的地址2）如果一个指针的类型是NSObject类型的，那么这个指针中可以存储任意的OC对象的地址3）如果一个数组的元素的类型是一个OC指针类型的，那么这个数组中不仅可以存储本类对象还可以存储子类对象 12345Person *ps[3];ps[0]&#x3D;[Person new];ps[1]&#x3D;[Student new];ps[2]&#x3D;[ItCastStu new]; 4）如果一个数组的元素是NSObject指针类型，那么意味着任意的OC对象都可以存储到这个数组之中 123456NSObject *objs[4];objs[0]&#x3D;[Person new];objs[1]&#x3D;[Student new];objs[2]&#x3D;[ItCastStu new];objs[3]&#x3D;@&quot;jack&quot;; 5）如果一个方法的参数是一个对象，那么我们在为这个参数传值的时候可以传递一个本类对象，也可以传递一个子类对象，对方法中的代码不会有丝毫的影响 123456789101112God *ys&#x3D;[God new];Person *p1&#x3D;[Person new];[p1 setName:@&quot;大狗&quot;];Student *s1&#x3D;[Student new];[s1 setName:@&quot;小明&quot;];ItCastStu *stu&#x3D;[ItCastStu new];[stu setName:@&quot;小东&quot;];[ys killWithPerson:stu]; 当一个父类指针指向一个子类对象的时候，通过这个父类指针就只能去调用子类对象中的父类成员，子类独有的成员无法访问","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"方法重写：","slug":"开发语言/Objective-C/方法重写：","date":"2019-09-05T16:00:00.000Z","updated":"2021-05-20T15:45:45.940Z","comments":true,"path":"2019/09/06/开发语言/Objective-C/方法重写：/","link":"","permalink":"http://example.com/2019/09/06/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99%EF%BC%9A/","excerpt":"","text":"子类从父类继承，子类就继承了父类的方法，就意味着子类拥有了这个功能，但是有的时候，虽然子类也拥有父类的这个行为，但是这个行为的具体的实现和父类不同 如何重写：直接在自己类的实现中将这个方法重新实现一遍就可以了 当一个父类指针指向一个子类对象的时候，通过这个父类指针调用的方法如果在子类对象中重写了，那么调用的就是子类重写的方法","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"多态：","slug":"开发语言/Objective-C/多态：","date":"2019-09-04T16:00:00.000Z","updated":"2021-05-20T15:45:34.143Z","comments":true,"path":"2019/09/05/开发语言/Objective-C/多态：/","link":"","permalink":"http://example.com/2019/09/05/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%A4%9A%E6%80%81%EF%BC%9A/","excerpt":"","text":"指的是同一个行为，对于不同的事物具有完全不同的表现形式 1234567Person *p1&#x3D;[Chinese new];Person *p2&#x3D;[Japanese new];Person *p3&#x3D;[Korea new];[p1 sayHi];[p2 sayHi];[p3 sayHi];","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"Description方法","slug":"开发语言/Objective-C/Description方法","date":"2019-09-03T16:00:00.000Z","updated":"2021-05-20T15:45:19.957Z","comments":true,"path":"2019/09/04/开发语言/Objective-C/Description方法/","link":"","permalink":"http://example.com/2019/09/04/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/Description%E6%96%B9%E6%B3%95/","excerpt":"","text":"%p打印的是指针变量的值%@打印的是指针指向的对象 如果我们使用%@打印一个对象，发现输出的格式：&lt;对象所属的类名：对象的地址&gt; 当我们使用%@打印一个对象的时候，NSLog函数的底层实现：1）调用传入的对象的Description方法2）拿到这个方法的返回值，这个返回值是一个字符串3）将这个字符串输出 Description方法是定义在NSObject类之中的，所以每一个OC对象都有这个方法，这个方法在NSObject类中的实现是这样的：返回的字符串格式 @“&lt;对象所属的类名：对象的地址&gt;” 如果使用%@打印一个对象的时候，你希望这个对象打印的格式是我们自己自定义的，那么就可以重写Description方法","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"创建一个对象，这个对象在内存中是如何分配的?","slug":"开发语言/Objective-C/创建一个对象，这个对象在内存中是如何分配的?","date":"2019-09-02T16:00:00.000Z","updated":"2021-05-20T15:45:07.690Z","comments":true,"path":"2019/09/03/开发语言/Objective-C/创建一个对象，这个对象在内存中是如何分配的?/","link":"","permalink":"http://example.com/2019/09/03/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%EF%BC%8C%E8%BF%99%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E6%98%AF%E5%A6%82%E4%BD%95%E5%88%86%E9%85%8D%E7%9A%84?/","excerpt":"","text":"1）子类对象中有自己的属性和所有父类的属性 2）代码段中的每一个类都有一个叫做isa的指针，这个指针指向它的父类，一直指到NSObject 子类方法重写以后，调用的就是子类重写的方法了","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"结构体和类的区别：","slug":"开发语言/Objective-C/结构体和类的区别：","date":"2019-09-01T16:00:00.000Z","updated":"2021-05-20T15:44:17.624Z","comments":true,"path":"2019/09/02/开发语言/Objective-C/结构体和类的区别：/","link":"","permalink":"http://example.com/2019/09/02/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E7%BB%93%E6%9E%84%E4%BD%93%E5%92%8C%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB%EF%BC%9A/","excerpt":"","text":"相同点：都可以将多个数据封装为一个整体123456struct Date&#123; int year; int month; int day;&#125;; 1234567@interface Date:NSObject&#123; int year; int month; int day;&#125;@end 不同点：1）结构体只能封装数据，而类不仅可以封装数据还可以封装行为【如果表示的这个实体，不仅是由多个数据组成，这个实体还具有行为，只能使用类】 2）结构体变量分配在栈空间（如果是一个局部变量的情况下），而对象分配在堆空间【栈的特点：空间相对较小，但是存储在栈中的数据访问的效率更高一些；堆的特点：空间相对较大，但是存储在堆中的数据访问的效率相对较低】 3）赋值不同： 12345678910//结构体：Student//类：PersonStudent s1=&#123;“jack”,19,GenderMale&#125;;Student s2=s1;Person *p1=[Person new];Person *p2=p1;","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"类的本质：","slug":"开发语言/Objective-C/类的本质：","date":"2019-08-31T16:00:00.000Z","updated":"2021-05-20T15:43:25.990Z","comments":true,"path":"2019/09/01/开发语言/Objective-C/类的本质：/","link":"","permalink":"http://example.com/2019/09/01/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E7%B1%BB%E7%9A%84%E6%9C%AC%E8%B4%A8%EF%BC%9A/","excerpt":"","text":"1）类第一次被访问的时候，就会被加载到代码段中存储（类加载）2）类一旦被加载到代码段之后是不会被回收的，除非程序结束 类是以什么样的形式存储在代码段的：1）任何存储在内存中的数据都有一个数据类型2）任何在内存中申请的空间也有自己的类型Person *p1=[Person new];3)在代码段存储类的那块空间是什么类型？ 在代码段中存储类的步骤：1）先在代码段中创建一个Class对象，Class是Foundation框架中的一个类，这个Class对象就是用来存储类信息的2）将类的信息存储在这个Class对象之中，这个Class对象至少有三个属性：存储的这个类的名称，存储的这个类的属性，存储的这个类的方法 所以类是以Class对象的形式存储在代码段的，存储类的这个Class对象，我们也叫做类对象，用来存储类的一个对象 所以存储类的类对象也有一个叫做isa指针的属性，这个指针指向存储父类的类对象 如何拿到存储在代码段中的类对象：1）调用类的类方法class就可以得到存储类的类对象的地址【声明Class指针的时候不需要加，因为在typedef的时候已经加了】 12Class c1&#x3D;[Person class];NSLog(@&quot;c1 &#x3D; %p&quot;,c1); 2）调用对象的对象方法class，就可以得到存储这个对象所属的类的Class对象的地址 12Person *p1&#x3D;[Person new];Class c2&#x3D;[p1 class]; 3）对象中的isa指针的值其实就是代码段中存储类的类对象的地址 如何使用类对象：1）拿到存储类的类对象以后，Class c1=[Person class];c1对象就是Person类，c1完全等价于Person 2）使用类对象来调用类的类方法 3）可以使用类对象来调用new方法，创建存储在类对象中的类的对象 12Class c1&#x3D;[Person class];Person *p1&#x3D;[c1 new]; 4）注意：使用类对象只能调用类的类方法，因为类对象就等价于存在其中的类","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"SEL","slug":"开发语言/Objective-C/SEL","date":"2019-08-30T16:00:00.000Z","updated":"2021-05-20T15:43:13.204Z","comments":true,"path":"2019/08/31/开发语言/Objective-C/SEL/","link":"","permalink":"http://example.com/2019/08/31/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/SEL/","excerpt":"","text":"SEL全称叫做selector选择器，是一个数据类型，所以要在内存中申请空间存储数据 SEL其实是一个类，SEL对象是用来存储一个方法的 如何将方法存储在类对象之中：1）先创建一个SEL对象2）将方法的信息存储在这个SEL对象之中3）再将这个SEL对象作为类对象的属性 因为SEL是一个typedef类型的，在自定义的时候已经加了，所以我们在声明SEL指针的时候不需要加 12SEL s1&#x3D;@selector(sayHi);NSLog(@&quot;s1 &#x3D; %p&quot;,s1); 调用方法的本质：[p1 sayHi]; 内部的原理：1）先拿到存储sayHi方法的SEL对象，也就是拿到存储sayHi方法的SEL数据，SEL消息2）将这个SEL消息发送给p1对象3）这个时候，p1对象接收到SEL消息以后，就知道要调用方法4）根据对象的isa指针找到存储类的类对象5）找到这个类对象以后，在这个类对象中去搜寻是否有和传入的SEL数据相匹配的，如果有就执行，如果没有再找父类，直到NSObject OC最重要的一个机制：消息机制，调用方法的本质其实就是为对象发送SEL消息[p1 sayHi]; 为p1对象发送一条sayHi消息 手动的为对象发送SEL消息：1）先得到方法的SEL数据2）将这个SEL消息发送给p1对象 调用对象的方法，将SEL数据发送给对象：- (id)performSelector:(SEL)aSelector; 1234567Person *p1=[Person new];SEL s1=@selector(sayHi);[p1 performSelector:s1];[p1 sayHi]; 调用一个对象的方法有两种：1）[对象名 方法名];2）手动的为对象发送SEL消息 注意：1）如果方法有参数，那么方法名是带了冒号的2）如果方法有参数，要传递参数就调用另外一个方法* (id)performSelector:(SEL)aSelector withObject:(id)object; * (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;3)如果有多个参数，那就重新创建一个类把多个参数封装进去 1234Person *p1=[Person new];SEL s1=@selector(eatWithFood:);[p1 performSelector:s1 withObject:@&quot;红烧肉&quot;];","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"点语法","slug":"开发语言/Objective-C/点语法","date":"2019-08-29T16:00:00.000Z","updated":"2021-05-20T15:42:59.449Z","comments":true,"path":"2019/08/30/开发语言/Objective-C/点语法/","link":"","permalink":"http://example.com/2019/08/30/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E7%82%B9%E8%AF%AD%E6%B3%95/","excerpt":"","text":"OC的对象如果要为属性赋值或者取值，就要调用对应的getter或者setter方法 12345Person *p1&#x3D;[Person new];[p1 setName:@&quot;jack&quot;];[p1 setAge:18];[p1 setGender:GenderMale]; OC中使用点语法来访问对象的属性： 语法：对象名.去掉下划线的属性名 12p1.name&#x3D;@&quot;jack&quot;; &#x2F;&#x2F;这个时候就会将@&quot;jack&quot;赋值给p1对象的_name属性NSString *name&#x3D;p1.name; &#x2F;&#x2F;把p1对象的_name属性的值取出来 点语法的原理： 注意：1）在getter和setter中慎用点语法，因为有可能会造成无限递归，程序崩溃 1234- (void)setAge:(int)age&#123; self.age&#x3D;age; &#x2F;&#x2F;[self setAge:age];&#125; 2）3）如果属性没有封装getter和setter是无法使用点语法的，因为点语法的本质是getter和setter方法","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"property","slug":"开发语言/Objective-C/@property","date":"2019-08-28T16:00:00.000Z","updated":"2021-05-20T15:33:22.539Z","comments":true,"path":"2019/08/29/开发语言/Objective-C/@property/","link":"","permalink":"http://example.com/2019/08/29/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/@property/","excerpt":"","text":"写一个类：1）要先为类写属性2）再声明属性的getter和setter3）再实现getter和setter @property 作用：自动生成getter、setter方法的声明，因为是生成方法的声明，所以应该写在@interface类的声明之中 语法：@property 数据类型 名称；@property int age; 原理：","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"synthesize","slug":"开发语言/Objective-C/@synthesize","date":"2019-08-27T16:00:00.000Z","updated":"2021-05-20T15:33:09.407Z","comments":true,"path":"2019/08/28/开发语言/Objective-C/@synthesize/","link":"","permalink":"http://example.com/2019/08/28/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/@synthesize/","excerpt":"","text":"作用：自动生成getter、setter方法的实现，所以应该写在类的实现之中 语法：@synthesize @property名称; @synthesize做的事情： 问题：希望@synthesize不要去自动生成私有属性了，getter和setter的实现中操作我们已经写好的属性就可以了 语法：@synthesize @property名称 = 已经存在的属性名;【@synthesize age=_age;】1）不会再去生成私有属性2）直接生成setter和getter的实现Setter的实现：把参数的值直接赋值给指定的属性，是没有做任何逻辑验证的Getter的实现：直接返回指定的属性的值 如果setter或者getter有自己的逻辑验证，那么就自己在类的实现中重写就可以了 批量声明：1）如果多个@property的类型一致，可以批量声明 @property float height,weight; 2）@synthesize也可以批量声明（类型不一致也可以） @synthesize name = _name,age = _age,weight = _weight,height = _height;","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"property增强（Xcode4.4之后）","slug":"开发语言/Objective-C/@property增强（Xcode4.4之后）","date":"2019-08-26T16:00:00.000Z","updated":"2021-05-20T15:32:54.572Z","comments":true,"path":"2019/08/27/开发语言/Objective-C/@property增强（Xcode4.4之后）/","link":"","permalink":"http://example.com/2019/08/27/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/@property%E5%A2%9E%E5%BC%BA%EF%BC%88Xcode4.4%E4%B9%8B%E5%90%8E%EF%BC%89/","excerpt":"","text":"只需要写一个@property，编译器就会自动的1）生成私有属性2）生成getter、setter的声明3）生成getter、setter的实现 使用注意：1）@property的类型一定要和属性的类型一致，名称要和属性的名称一致，只是去掉下划线2）也可以批量声明相同类型的@property3）@property生成的方法实现没有做任何的逻辑验证setter：直接赋值getter：直接返回所以我么可以重写setter来自定义验证逻辑，如果重写了setter还会自动生成getter，如果重写了getter还会自动生成setter；如果同时重写setter和getter，那么就不会自动生成私有属性了，那么就自己定义一个私有属性就可以了4）如果你想为类写一个属性，并且为这个属性封装setter和getter，一个@property就搞定5）父类的@property一样可以被子类继承，@property生成的属性是私有的，在子类的内部无法直接访问生成的私有属性，但是可以通过setter和getter来访问","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"动态类型和静态类型","slug":"开发语言/Objective-C/动态类型和静态类型","date":"2019-08-25T16:00:00.000Z","updated":"2021-05-20T15:32:39.253Z","comments":true,"path":"2019/08/26/开发语言/Objective-C/动态类型和静态类型/","link":"","permalink":"http://example.com/2019/08/26/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E5%92%8C%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"OC是一门弱语言：编译器在编译的时候，语法检查的时候没有那么严格，不管你怎么写都是可以的 强类型的语言：编译器在编译的时候，做语法检查的时候，行就是行，不行就是不行 静态类型：指的是一个指针指向的对象是一个本类对象动态类型：指的是一个指针指向的对象不是本类对象 编译检查：编译器在编译的时候，能不能通过一个指针去调用指针指向的对象的方法？判断原则：看指针所属的类型之中是否有这个方法，如果有就认为可以调用，编译通过，如果这个类中没有，那么编译报错【苹果下的编译器的名字叫LLVM】 我们可以将指针的类型做转换，来达到骗过编译器的目的 12Animal *a1&#x3D;[Pig new];[(Pig *)a1 eat]; 运行检查：编译检查只是骗过了编译器，但是这个方法究竟能不能执行？所以在运行的时候，会去检查对象中是否真的有这个方法，如果有就执行，如果没有就报错 LSP父类指针指向子类对象，实际上任意的指针可以指向任意的对象，编译器是不会报错的；当一个子类指针指向一个父类对象的时候，编译器允许通过子类指针去调用子类独有的方法，但是在运行的时候是会出问题的，因为父类对象中根本没有子类成员","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"NSObject指针和id指针","slug":"开发语言/Objective-C/NSObject指针和id指针","date":"2019-08-24T16:00:00.000Z","updated":"2021-05-20T15:32:27.773Z","comments":true,"path":"2019/08/25/开发语言/Objective-C/NSObject指针和id指针/","link":"","permalink":"http://example.com/2019/08/25/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/NSObject%E6%8C%87%E9%92%88%E5%92%8Cid%E6%8C%87%E9%92%88/","excerpt":"","text":"NSObject是OC中所有类的基类，根据LSP，NSObject指针就可以指向任意的OC对象，所以，NSObject指针是一个万能指针，可以指向任意的OC对象 缺点：如果要调用指向的子类对象的独有的方法，就必须要做类型转换 12345678NSObject *obj1&#x3D;[Person new];[(Person *)obj1 sayHi];NSObject *obj2&#x3D;[Student new];[(Student *)obj2 study];NSObject *obj3&#x3D;@&quot;jack&quot;;[(NSString *)obj3 length]; id指针：是一个万能指针，可以指向任意的OC对象 id是一个typedef自定义类型，在定义的时候已经加了，所以，声明id指针的时候不需要再加了 通过NSObject指针去调用对象的方法的时候，编译器会做编译检查通过id类型的指针去调用对象的方法的时候，编译器直接通过，无论你调用什么方法【该运行错误的还是运行错误】 注意：id指针只能调用对象的方法，不能使用点语法，如果使用点语法就会直接报编译错误 如果我们要声明一个万能指针，不要使用NSObject，而是使用id","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"instancetype：","slug":"开发语言/Objective-C/instancetype：","date":"2019-08-23T16:00:00.000Z","updated":"2021-05-20T15:32:16.172Z","comments":true,"path":"2019/08/24/开发语言/Objective-C/instancetype：/","link":"","permalink":"http://example.com/2019/08/24/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/instancetype%EF%BC%9A/","excerpt":"","text":"父类中的类方法创建一个父类对象返回:1）如果返回值写为父类类型的，那么子类来调用这个方法得到的就是父类指针，解决方式：把返回值改为id类型的2）方法的内部创建对象的时候，不要写死了，因为写死创建的对象就固定了，我们希望哪一个类来调用这个方法就创建哪一个类的对象，解决方式：把类名写为self，哪一个类来调用这个方法，self就指的是哪一个类，创建的就是哪一个类的对象3）方法的返回值是id类型的，问题就是任意指针都可以接收这个方法的返回值，编译器连个警告都没有解决方式：如果方法的返回值是instancetype，代表方法的返回值是当前这个类的对象 使用建议：1）如果方法内部是在创建当前类的对象，不要写死成类名[类名 new];而是用self代替类名2）如果方法的返回值是当前类的对象，也不要写死了，而是写成instancetype id和instancetype的区别：1）instancetype只能作为方法的返回值，不能在其他地方使用id既可以声明指针变量，也可以作为参数，也可以作为返回值2）instancetype是一个有类型的，代表当前类的对象id是一个无类型的指针，仅仅是一个地址","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"动态类型检测：","slug":"开发语言/Objective-C/动态类型检测：","date":"2019-08-22T16:00:00.000Z","updated":"2021-05-20T15:32:04.305Z","comments":true,"path":"2019/08/23/开发语言/Objective-C/动态类型检测：/","link":"","permalink":"http://example.com/2019/08/23/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%8A%A8%E6%80%81%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%B5%8B%EF%BC%9A/","excerpt":"","text":"编译——运行 我们就希望，可以写代码来先判断一下对象中是否有这个方法，如果有再去执行，如果没有就不去执行 1）判断对象中是否有指定的对象方法【最常用】* (BOOL)respondsToSelector:(SEL)aSelector; 2）判断类中是否有指定的类方法【最常用】+ (BOOL)instancesRespondToSelector:(SEL)aSelector; 3）判断指定的对象是否为指定类的对象或者子类对象* (BOOL)isKindOfClass:(Class)aClass;【判断s1对象是否为NSObject对象或者NSObject的子类对象】 4）判断对象是否为指定类的对象，不包括子类* (BOOL)isMemberOfClass:(Class)aClass; 5）判断类是否为另外一个类的子类+ (BOOL)isSubclassOfClass:(Class)aClass;","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"构造方法：","slug":"开发语言/Objective-C/构造方法：","date":"2019-08-21T16:00:00.000Z","updated":"2021-05-20T15:31:48.856Z","comments":true,"path":"2019/08/22/开发语言/Objective-C/构造方法：/","link":"","permalink":"http://example.com/2019/08/22/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%EF%BC%9A/","excerpt":"","text":"类名 *指针名=[类名 new]; new方法的内部，其实是先调用的alloc方法，再调用的init方法 alloc方法是一个类方法，作用：哪一个类调用这个方法，就创建哪个类的对象，并把对象返回init方法是一个对象方法，作用：初始化对象 创建对象的完整步骤：应该先使用alloc创建一个对象，然后再使用init初始化这个对象，才可以使用这个对象；虽然没有初始化的对象有的时候也可以使用，但是千万不要这么做，使用一个未经初始化的对象是极其危险的 init方法（构造方法）： 作用：初始化对象，为对象的属性赋初始值 所以我们创建一个对象如果没有为这个对象的属性赋值，这个对象的属性是有默认值的，我们每次新创建一个对象，这个对象的属性都被初始化了 我们想要让创建的对象的属性的默认值不是nil、NULL、0，而是我们自定义的，那么这个时候，我们就可以重写init方法 调用父类init方法的原因：因为父类的init方法会初始化父类的属性，所以必须要保证当前对象中的父类属性也同时被初始化 赋值给self的原因是调用父类的init方法，会返回初始化成功的对象，实际上返回的就是当前对象，但是我们要判断是否初始化成功 重写init方法以后，这样每次创建出来的对象的属性都是一样的但是，我想创建对象的时候，对象的属性的值由创建对象的人来指定，而不是写死在init方法中 自定义构造方法的规范：1）自定义构造方法的返回值必须是instancetype2）自定义构造方法的名称必须以initWith开头3）方法的实现和init的要求一样这个时候就不能直接[Dog new]了","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"内存管理概述：","slug":"开发语言/Objective-C/内存管理概述：","date":"2019-08-20T16:00:00.000Z","updated":"2021-05-20T15:31:19.373Z","comments":true,"path":"2019/08/21/开发语言/Objective-C/内存管理概述：/","link":"","permalink":"http://example.com/2019/08/21/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E6%A6%82%E8%BF%B0%EF%BC%9A/","excerpt":"","text":"内存的作用：存储数据 1）如何将数据存储到内存之中：声明一个变量2）当数据不再被使用的时候，占用的内存空间如何被释放？ 内存中的五大区域：1）栈：局部变量，当局部变量的作用域被执行完毕之后，这个局部变量就会被系统立即回收2）堆：OC对象，使用C函数申请的空间3）BSS段：未初始化的全局变量、静态变量，一旦初始化就回收，并转存到数据段之中4）数据段：已经初始化的全局变量、静态变量，直到程序结束的时候才会被回收5）代码段：代码，程序结束的时候，系统会自动回收存储在代码段中的数据 栈、BSS段、数据段、代码段，存储在它们中的数据的回收是由系统自动完成的，不需要我们干预 分配在堆区中的OC对象是肯定需要被回收的，但系统不会自动回收，直到程序结束的时候才会被回收【轰炸机的小游戏，肯定不能等到程序结束才回收，因为有些人玩的时间很长】 内存管理的范围：只需要管理存储在堆中的OC对象的回收，其他区域中的数据的回收是系统自动管理的 对象应该什么时候被回收：当有人使用这个对象的时候，这个对象就千万不能回收；只有在没有任何人使用这个对象的时候才可以回收 引用计数器： 每一个对象都有一个属性，叫做retainCount，叫做引用计数器，类型是unsigned long，占据8个字节 引用计数器的作用：用来记录当前这个对象有多少个人在使用它，默认情况下，创建一个对象出来，这个对象的引用计数器的默认值是1 当多一个人使用这个对象的时候，应该先让这个对象的引用计数器的值+1，代表这个对象多一个人使用 当这个对象少一个人使用的时候，应该先让这个对象的引用计数器的值-1，代表这个对象少一个人使用 当这个对象的引用计数器变为0的时候，代表这个对象无人使用，这个时候系统就会自动回收这个对象，在对象被回收的时候，会自动调用对象的dealloc方法 如何操作引用计数器： 为对象发送一条retain消息，对象的引用计数器就会+1，当多一个人使用对象的时候才发 为对象发送一条release消息，对象的引用计数器就会-1，当少一个人使用对象的时候才发 为对象发送一条retainCount消息，就可以取到对象的引用计数器的值 内存管理的分类： MRC：Manual Reference Counting手动引用计数，手动内存管理（2011年以前，iOS5之前）：当多一个人使用对象的时候，要求程序员手动的发送retain消息，少一个人使用的时候程序员手动的发送release消息 ARC：Automatic Reference Counting自动引用计数，自动内存管理：系统自动的在合适的地方发送retain，release消息","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"第一个MRC程序：","slug":"开发语言/Objective-C/第一个MRC程序：","date":"2019-08-19T16:00:00.000Z","updated":"2021-05-20T15:31:05.389Z","comments":true,"path":"2019/08/20/开发语言/Objective-C/第一个MRC程序：/","link":"","permalink":"http://example.com/2019/08/20/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E7%AC%AC%E4%B8%80%E4%B8%AAMRC%E7%A8%8B%E5%BA%8F%EF%BC%9A/","excerpt":"","text":"要写MRC的程序，必须先把Xcode默认的ARC模式关闭，开启MRC 在ARC机制下，retain，release，dealloc这些方法无法调用 重写dealloc方法的规范：必须要调用父类的dealloc方法，并且要放在最后一句代码 测试引用数据：1）新创建一个对象，这个对象的引用计数器的值默认是12）当对象的引用计数器变为0的时候，对象就会被系统立即回收，并自动调用dealloc方法3）为对象发送retain消息，对象的引用计数器就会+1 为对象发送release消息，并不是回收对象，而是让对象的引用计数器-1，当对象的引用计数器的值变为0的时候，对象才会被系统立即回收","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"内存管理的原则：","slug":"开发语言/Objective-C/内存管理的原则：","date":"2019-08-18T16:00:00.000Z","updated":"2021-05-20T15:30:44.812Z","comments":true,"path":"2019/08/19/开发语言/Objective-C/内存管理的原则：/","link":"","permalink":"http://example.com/2019/08/19/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E7%9A%84%E5%8E%9F%E5%88%99%EF%BC%9A/","excerpt":"","text":"1）有对象的创建，就要匹配一个release2）retain的次数和release的次数要匹配3）谁用谁retain，谁不用谁release4）只有在多一个人用的时候才retain，少一个人使用的时候才release 有始有终，有加就有减，有retain就应该匹配一个release，一定要平衡","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"野指针与僵尸对象：","slug":"开发语言/Objective-C/野指针与僵尸对象：","date":"2019-08-17T16:00:00.000Z","updated":"2021-05-20T15:30:32.789Z","comments":true,"path":"2019/08/18/开发语言/Objective-C/野指针与僵尸对象：/","link":"","permalink":"http://example.com/2019/08/18/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E9%87%8E%E6%8C%87%E9%92%88%E4%B8%8E%E5%83%B5%E5%B0%B8%E5%AF%B9%E8%B1%A1%EF%BC%9A/","excerpt":"","text":"C语言中的野指针：定义一个指针变量，没有初始化，这个指针变量的值是一个垃圾值，指向一块随机的空间，这个指针就叫做野指针 OC中的野指针：指针指向的对象已经被回收了，这样的指针就叫做野指针 内存回收的本质：申请一个变量实际上就是向系统申请指定字节数的空间，这些空间系统就不会再分配给别人了；当变量被回收的时候，代表变量占用的字节空间从此以后系统就可以分配给别人使用了，但是字节空间中存储的数据还在（这就是野指针的来源） 对象回收的本质：对象占用的空间可以分配给别人，当这个对象占用的空间没有分配给别人之前，其实对象数据还在 僵尸对象：一个已经被释放的对象，但是这个对象所占的空间还没有分配给别人，这样的对象叫做僵尸对象；我们通过野指针去访问僵尸对象的时候，有可能没问题，也有可能有问题，当僵尸对象占用的空间还没有分配给别人的时候就没问题 我们认为只要对象成为了僵尸对象，无论如何都不允许访问了，就希望如果访问的是僵尸对象，无论如何都会报错 Xcode有一个僵尸对象的实时检查机制，可以将这个机制打开，打开之后，只要访问的是僵尸对象，无论空间是否分配，就会报错 为什么不默认打开僵尸对象检测：一旦打开僵尸对象检测，那么在每访问一个对象的时候，都会先检查这个对象是否为一个僵尸对象，这样是极其消耗性能的 如何避免僵尸对象错误？当一个指针成为野指针以后，将这个指针的值设置为nil当一个指针的值为nil，通过这个指针去调用对象的方法（包括使用点语法）的时候，不会报错，只是没有任何反应；但是如果通过直接访问属性，就会报错 无法复活一个僵尸对象","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"单个对象的内存管理：","slug":"开发语言/Objective-C/单个对象的内存管理：","date":"2019-08-16T16:00:00.000Z","updated":"2021-05-20T15:30:21.240Z","comments":true,"path":"2019/08/17/开发语言/Objective-C/单个对象的内存管理：/","link":"","permalink":"http://example.com/2019/08/17/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%8D%95%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%9A/","excerpt":"","text":"内存泄露：指的是一个对象没有被及时的回收，在该回收的时候而没有被回收，一直驻留在内存中，直到程序结束的时候才回收 单个对象的内存泄漏情况：1）有对象的创建，而没有对应的release2）retain的次数和release的次数不匹配3）在不适当的时候，为指针赋值为nil4）在方法中为传入的对象进行不适当的retain 如何保证单个对象可以被回收：1）有对象的创建就必须要匹配一个release2）retain次数和release次数一定要匹配3）只有在指针成为野指针的时候才赋值nil4）在方法中不要随意的为传入的对象retain","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"setter方法内存管理：","slug":"开发语言/Objective-C/setter方法内存管理：","date":"2019-08-15T16:00:00.000Z","updated":"2021-05-20T15:30:06.104Z","comments":true,"path":"2019/08/16/开发语言/Objective-C/setter方法内存管理：/","link":"","permalink":"http://example.com/2019/08/16/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/setter%E6%96%B9%E6%B3%95%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%9A/","excerpt":"","text":"这辆车多了一个人使用： 当传进来的对象赋值给当前对象的属性，代表传入的对象多了一个人使用，所以我们应该先为这个传入的对象发送一条retain消息，再赋值；当当前对象销毁的时候，代表属性指向的对象少一个人使用，就应该在dealloc中release 宝马车未被销毁，发生内存泄露：当我们将传入的Car对象赋值给_car属性的时候，有两重意思：一个是_car属性原本指向的对象少一个人使用，另一个是新传入的对象多一个人使用；所以我们应该先将_car属性原本指向的对象release，再将传入的新对象retain 出现僵尸对象错误的原因：在于新旧对象是同一个对象解决的方案：当发现新旧对象是同一个对象的时候，什么都不用做；只有当新旧对象不是同一个对象的时候，才release旧的，retain新的 1234567891011121314151617181920#import&lt;Foundation/Foundation.h&gt;#import &quot;Person.h&quot;int main(int argc,const char * argv[])&#123; Person *p1=[Person new]; Car *bmw=[Car new]; bmw.speed=100; p1.car=bmw; [bmw release]; bmw.speed=200; p1.car=bmw; [p1 release]; return 0;&#125; 12345678910111213#import&lt;Foundation/Foundation.h&gt;@interface Car : NSObject&#123; int _speed;&#125;- (void)setSpeed:(int)speed;- (int)speed;- (void)run;@end 1234567891011121314151617181920212223242526#import &quot;Car.h&quot;@implementation Car- (void)dealloc&#123; NSLog(@&quot;速度为%d的车子销毁了.&quot;,_speed); [super dealloc];&#125;- (void)setSpeed:(int)speed&#123; _speed=speed;&#125;- (int)speed&#123; return _speed;&#125;- (void)run&#123; NSLog(@&quot;速度为%d的车正在行驶&quot;,_speed);&#125;@end 1234567891011121314#import&lt;Foundation/Foundation.h&gt;#import &quot;Car.h&quot;@interface Person : NSObject&#123; Car *_car;&#125;- (void)setCar:(Car *)car;- (Car *)car;- (void)drive;@end 123456789101112131415161718192021222324252627282930313233#import &quot;Person.h&quot;@implementation Person- (void)dealloc&#123; NSLog(@&quot;人死了&quot;); [_car release]; [super dealloc];&#125;- (void)setCar:(Car *)car&#123; //说明新旧对象不是同一个对象 if(_car != car)&#123; [_car release]; //才去release旧的 _car = [car retain]; //retain新的 &#125;&#125;- (Car *)car&#123; return _car;&#125;- (void)drive&#123; NSLog(@&quot;走啊，去拉萨&quot;); [_car run];&#125;@end 特别注意：我们内存管理的范围是OC对象，所以，只有属性的类型是OC对象的时候，这个属性的setter方法才要像上面那样写【对象类型就是类或协议所声明的指针类型，例如:NSString *string ,其中，NSString是一个类，NSString *是它指针类型或叫对象类型。】","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"property参数","slug":"开发语言/Objective-C/@property参数","date":"2019-08-14T16:00:00.000Z","updated":"2021-05-20T15:29:50.586Z","comments":true,"path":"2019/08/15/开发语言/Objective-C/@property参数/","link":"","permalink":"http://example.com/2019/08/15/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/@property%E5%8F%82%E6%95%B0/","excerpt":"","text":"1）@property可以带参数的：@property(参数1，参数2，参数3…..) 数据类型 名称; @property的四组参数：1）与多线程相关的两个参数：atomic（默认值）、nonatomic2）与生成的setter方法的实现相关的参数：assign（默认值）、retain3）与生成只读、读写相关的参数：readonly、readwrite（默认值）4）与生成的getter、setter方法名字相关的参数：getter、setter 使用参数注意：1）同一组参数只能使用一个（getter、setter可以同时使用）2）参数的顺序可以随意（一般默认顺序就好） Atomic：如果写atomic，这个时候生成的setter方法的代码就会被加上一把线程安全锁；特点：安全但效率低下Nonatomic：如果写nonatomic，这个时候生成的setter方法的代码就不会加线程安全锁；特点：不安全但效率高 建议：要效率，选择使用nonatomic Assign：生成的setter方法的实现就是直接赋值Retain：生成的setter方法的实现就是标准的MRC内存管理代码，也就是先判断新旧对象是否为同一个对象，如果不是则release旧的，retain新的 当属性的类型是OC对象类型的时候，那么就使用retain当属性的类型是非OC对象的时候，使用assign 千万注意：retain参数只是生成标准的setter方法为标准的MRC内存管理代码，不会自动的在dealloc中生成release的代码，所以，我们还要自己手动的在dealloc中release readwrite：代表同时生成getter、setterreadonly：只会生成getter，不会生成setter 默认情况下，@property生成的getter、setter方法的名字都是最标准的名字，其实我们可以通过参数来指定@property生成的方法的名字 getter=getter方法名字，用来指定@property生成的getter方法的名字setter=setter方法名字，用来指定@property生成的setter方法的名字（注意，setter方法是带参数的，所以要加一个冒号！！） 如果使用getter、setter修改了生成的方法的名字，在使用点语法的时候，编译器会转换成调用修改后的名字的代码 一般情况下不要去改名字：1）无论什么情况都不要改setter方法的名字，因为默认情况下生成的名字就已经是最标准的了2）什么时候修改getter方法的名字：当属性的类型是一个BOOL类型的时候，就修改这个getter的名字以is开头提高代码的阅读性","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"class和循环retain","slug":"开发语言/Objective-C/@class和循环retain","date":"2019-08-13T16:00:00.000Z","updated":"2021-05-20T15:29:38.822Z","comments":true,"path":"2019/08/14/开发语言/Objective-C/@class和循环retain/","link":"","permalink":"http://example.com/2019/08/14/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/@class%E5%92%8C%E5%BE%AA%E7%8E%AFretain/","excerpt":"","text":"当两个类相互包含的时候：Person.h中包含Book.h，而Book.h中又包含Person.h，这个时候就会出现循环引用的问题，就会造成无限递归，而导致无法编译通过 解决方案：.h头文件：其中一边不要使用#import引入对方的头文件，而是使用@class 类名；来标注这是一个类，这样子就可以在不引入对方头文件的情况下告诉编译器这是一个类【@class Book;（有分号）】.m头文件：在.m文件中再# import对方的头文件就可以使用了【#import “Book.h”】(其实不引入也可以，只是会有警告) @class与@import的区别：1）#import是将指定的文件的内容拷贝到写指令的地方2）@class并不会拷贝任何内容，只是告诉编译器这是一个类，这样编译器在编译的时候才可以知道这是一个类 当两个对象相互引用的时候（A对象的属性是B对象，B对象的属性是A对象），这个时候，如果两边都使用retain，那么就会发生内存泄露 解决方案：一端使用retain，另外一端使用assign，使用assign的那一端在dealloc中不再需要release了 注意：这里有一个很特别的点[p1 read];要放在[b1 release];之前，否则会出现僵尸对象","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"自动释放池：","slug":"开发语言/Objective-C/自动释放池：","date":"2019-08-12T16:00:00.000Z","updated":"2021-05-20T15:29:27.239Z","comments":true,"path":"2019/08/13/开发语言/Objective-C/自动释放池：/","link":"","permalink":"http://example.com/2019/08/13/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E8%87%AA%E5%8A%A8%E9%87%8A%E6%94%BE%E6%B1%A0%EF%BC%9A/","excerpt":"","text":"原理：存入到自动释放池中的对象，在自动释放池被销毁的时候，会自动调用存储在该自动释放池中的所有对象的release方法 可以解决的问题：将创建的对象，存入到自动释放池之中，就不再需要手动的release这个对象了，因为池子销毁的时候，就会自动的调用池中所有的对象的release 如何创建自动释放池：@autoreleasepool{ }这对大括弧代表这个自动释放池的范围 如何将对象存储到自动释放池之中：在自动释放池之中调用对象的autorelease方法，就会将这个对象存入到当前自动释放池之中 这个autorelease方法返回的是对象本身，所以我们可以这么写：@autoreleasepool{ Person *p1=[[[Person alloc] init] autorelease];}这个时候，当这个自动释放池执行完毕之后，就会立即为这个自动释放池中的对象发送一条release消息 八大注意：1）只有在自动释放池中调用了对象的autorelease方法，这个对象才会被存储到这个自动释放池之中，如果只是将对象的创建代码写在自动释放池之中，而没有调用对象的autorelease方法，是不会将这个对象存储到这个自动释放池之中的2）对象的创建可以在自动释放池的外面，在自动释放池之中调用对象的autorelease方法，就可以将这个对象存储到这个自动释放池之中3）如果对象的autorelease方法的调用放在自动释放池的外面，是无法将其存储到这个自动释放池之中的，autorelease的调用只有放在自动释放池之中，才可以将其存储到自动释放池4）当自动释放池结束的时候，仅仅是对存储在自动释放池中的对象发送一条release消息，而不是销毁对象5）如果在自动释放池中调用同一个对象的autorelease方法多次，就会将对象存储多次到自动释放池之中，在自动释放池结束的时候，会为对象发送多条release消息，那么这个时候就会出现僵尸对象错误6）如果在自动释放池中调用了存储到自动释放池中的对象的release方法，在自动释放池结束的时候，还会再调用对象的release方法，这个时候就有可能会造成野指针操作（也可以调用存储在自动释放池中的对象的retain方法）7）将对象存储到自动释放池并不会使对象的引用计数器+1，所以其好处就是：创建对象将对象存储在自动释放池，就不需要再写一个release了8）自动释放池可以嵌套，调用对象的autorelease方法，会将对象加入到当前自动释放池之中，只有在当前自动释放池结束的时候才会向对象发送release消息","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"类方法的规范：","slug":"开发语言/Objective-C/类方法的规范：","date":"2019-08-11T16:00:00.000Z","updated":"2021-05-20T15:29:15.474Z","comments":true,"path":"2019/08/12/开发语言/Objective-C/类方法的规范：/","link":"","permalink":"http://example.com/2019/08/12/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E8%A7%84%E8%8C%83%EF%BC%9A/","excerpt":"","text":"一般情况下，要求提供与自定义构造方法相同功能的类方法，这样可以快速的创建一个对象；使用类方法创建的对象，要求这个对象在方法中就已经被autorelease过了，这样，我们只要在自动释放池中调用类方法来创建对象，那么创建的对象就会被自动的加入到自动释放池中","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"ARC机制概述","slug":"开发语言/Objective-C/ARC机制概述","date":"2019-08-10T16:00:00.000Z","updated":"2021-05-20T15:29:03.139Z","comments":true,"path":"2019/08/11/开发语言/Objective-C/ARC机制概述/","link":"","permalink":"http://example.com/2019/08/11/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/ARC%E6%9C%BA%E5%88%B6%E6%A6%82%E8%BF%B0/","excerpt":"","text":"Automatic Reference Counting，自动引用计数，即ARC，系统自动的帮助我们去计算对象的引用计数器的值 在程序中使用ARC非常简单，只需要向往常那样编写代码，只不过永远不要写retain，release，autorelease这三个关键字就好，永远不要手动的调用dealloc【在dealloc方法中不要调用父类dealloc】，这是ARC最基本的原则，当ARC开启时，编译器就会自动的在合适的地方插入retain，release，autorelease代码，编译器自动为对象做引用计数 ARC机制下，对象何时被释放：本质：对象的引用计数器为0的时候，自动释放表象：只要没有强指针指向这个对象，这个对象就会立即回收 强指针与弱指针： 强指针：默认情况下，我们声明一个指针，这个指针就是一个强指针，我们也可以用__strong(两个下划线)来显示的声明这是一个强指针 弱指针：使用__weak标识的指针就叫做弱指针 无论是强指针还是弱指针都是指针，都可以用来存储地址，这一点没有任何区别，都可以通过这个指针访问对象的成员；唯一的区别就是在ARC模式下，它们用来作为回收对象的基准：如果一个对象没有任何强类型的指针指向这个对象的时候，对象就会被立即释放","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"ARC下的单个对象的内存管理：","slug":"开发语言/Objective-C/ARC下的单个对象的内存管理：","date":"2019-08-09T16:00:00.000Z","updated":"2021-05-20T15:28:44.621Z","comments":true,"path":"2019/08/10/开发语言/Objective-C/ARC下的单个对象的内存管理：/","link":"","permalink":"http://example.com/2019/08/10/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/ARC%E4%B8%8B%E7%9A%84%E5%8D%95%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%9A/","excerpt":"","text":"1）当指向对象的所有的强指针被回收的时候，对象就会被立即回收2）当所有指向对象的强指针赋值为nil的时候，对象就会被立即回收 注意：不能创建对象用一个弱指针存储这个对象的指针，这样的话，刚创建出来的对象，就没有任何强指针指向，创建出来就被回收 在ARC机制下，当对象被回收的时候，原来指向这个对象的弱指针会被自动设置为nil","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"property另外两个参数：","slug":"开发语言/Objective-C/@property另外两个参数：","date":"2019-08-08T16:00:00.000Z","updated":"2021-05-20T15:28:32.672Z","comments":true,"path":"2019/08/09/开发语言/Objective-C/@property另外两个参数：/","link":"","permalink":"http://example.com/2019/08/09/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/@property%E5%8F%A6%E5%A4%96%E4%B8%A4%E4%B8%AA%E5%8F%82%E6%95%B0%EF%BC%9A/","excerpt":"","text":"在ARC的机制下，@property参数不能使用retain，因为retain代表生成的setter方法是MRC的标准内存管理代码 ARC机制下关注的重点：当一个类的属性是一个OC对象的时候，这个属性应该声明为强类型的还是弱类型的，很明显应该声明为强类型的【人未死车已报废】 如何控制@property生成的私有属性是一个强类型的还是一个弱类型的？使用参数：strong（默认值）和weak 使用建议：1）在ARC机制下，如果属性的类型是OC对象类型的，绝大多数场景下使用strong2）在ARC机制下，如果属性的类型不是OC对象类型的，使用assign3）strong和weak都是应用在属性的类型是OC对象的时候","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"ARC机制下的循环引用：","slug":"开发语言/Objective-C/ARC机制下的循环引用：","date":"2019-08-07T16:00:00.000Z","updated":"2021-05-20T15:28:21.373Z","comments":true,"path":"2019/08/08/开发语言/Objective-C/ARC机制下的循环引用：/","link":"","permalink":"http://example.com/2019/08/08/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/ARC%E6%9C%BA%E5%88%B6%E4%B8%8B%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%EF%BC%9A/","excerpt":"","text":"在ARC机制下，当两个对象相互引用的时候，如果两边都使用strong，那么就会出现内存泄漏，解决方案：一端使用strong，一端使用weak","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"MRC、ARC兼容与转换：","slug":"开发语言/Objective-C/MRC、ARC兼容与转换：","date":"2019-08-06T16:00:00.000Z","updated":"2021-05-20T15:21:39.185Z","comments":true,"path":"2019/08/07/开发语言/Objective-C/MRC、ARC兼容与转换：/","link":"","permalink":"http://example.com/2019/08/07/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/MRC%E3%80%81ARC%E5%85%BC%E5%AE%B9%E4%B8%8E%E8%BD%AC%E6%8D%A2%EF%BC%9A/","excerpt":"","text":"兼容：如果程序使用的是ARC机制开发的，但是其中某个类使用的是MRC，这个时候双击使用MRC的那个文件输入命令：-fno-obj-arc MRC转换为ARC：Edit——&gt;Convert——&gt;To Objective-C ARC…","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"分类/类别/类目(category)：","slug":"开发语言/Objective-C/分类类别类目(category)：","date":"2019-08-05T16:00:00.000Z","updated":"2021-05-20T15:21:27.802Z","comments":true,"path":"2019/08/06/开发语言/Objective-C/分类类别类目(category)：/","link":"","permalink":"http://example.com/2019/08/06/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%88%86%E7%B1%BB%E7%B1%BB%E5%88%AB%E7%B1%BB%E7%9B%AE(category)%EF%BC%9A/","excerpt":"","text":"让一个类占多个模块，将功能相似的方法定义在同一个模块中 分类的使用：如果要访问分类中定义的成员，就要把分类的头文件引进来 分类的作用：1）将一个类分为多个模块2）为一个已经存在的类添加方法（扩展一个类） 使用分类的注意事项：1）分类只能增加方法，不能增加属性2）在分类之中可以写@property，但是不会自动生成私有属性，也不会自动生成getter、setter的实现，只会生成getter、setter的声明，所以需要自己写getter和setter的实现，也需要自己定义属性，这个属性必须在本类中3）在分类的方法实现中不可以直接访问本类的真私有属性（定义在本类的@implementation之中，@interface中的可以访问），但是可以通过调用本类的getter和setter来访问属性4）分类中可以存在和本类同名的方法，当分类中有和本类中同名的方法的时候，优先调用分类的方法，哪怕没有引入分类的头文件；如果多个分类中有相同的方法，优先调用最后编译的分类","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"非正式协议：","slug":"开发语言/Objective-C/非正式协议：","date":"2019-08-04T16:00:00.000Z","updated":"2021-05-20T15:21:16.268Z","comments":true,"path":"2019/08/05/开发语言/Objective-C/非正式协议：/","link":"","permalink":"http://example.com/2019/08/05/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E9%9D%9E%E6%AD%A3%E5%BC%8F%E5%8D%8F%E8%AE%AE%EF%BC%9A/","excerpt":"","text":"为系统自带的类写分类，这个就叫做非正式协议 分类的作用：1）将一个类分为多个模块2）为一个已经存在的类添加方法（扩展一个类） 如果想为NSString写一个方法：（此方法无参数，因为NSString本身就是字符串）","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"知识点补充：","slug":"开发语言/Objective-C/知识点补充：","date":"2019-08-03T16:00:00.000Z","updated":"2021-05-20T15:21:04.602Z","comments":true,"path":"2019/08/04/开发语言/Objective-C/知识点补充：/","link":"","permalink":"http://example.com/2019/08/04/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E7%9F%A5%E8%AF%86%E7%82%B9%E8%A1%A5%E5%85%85%EF%BC%9A/","excerpt":"","text":"ARC机制与垃圾回收机制(GC)的区别： GC：程序在运行期间有一个东西叫做垃圾回收器，不断的扫描堆中的对象是否无人使用，若无人使用则回收 ARC：不是运行时，而是在编译的时候就在合适的地方插入retain，release……..插入的代码足以让对象无人使用的时候引用计数器为0，则回收 此程序main函数中第一行宝马的引用计数器应为1，第二行执行后p1为1，宝马这时应该为2，但是此程序实际上宝马的引用计数器不是2，还是1；错误原因在于构造方法_car=car;这一句，直接将car赋值给属性_car，并没有做retain，release，这一行应该改为self.car=car;","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"延展(Extension)：","slug":"开发语言/Objective-C/延展(Extension)：","date":"2019-08-02T16:00:00.000Z","updated":"2021-05-20T15:20:49.535Z","comments":true,"path":"2019/08/03/开发语言/Objective-C/延展(Extension)：/","link":"","permalink":"http://example.com/2019/08/03/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%BB%B6%E5%B1%95(Extension)%EF%BC%9A/","excerpt":"","text":"1）是一个特殊的分类，所以延展也是类的一部分2）特殊之处：没有名字；只有声明没有实现，和本类共享一个实现 语法： @interface 本类名（） @end 没有实现，和本类共享一个实现 延展和分类的区别：1）分类有名字，延展没有名字，是一个匿名的分类2）每一个分类都有单独的声明和实现，而延展只有声明，没有单独的实现，和本类共享一个实现3）分类中只能新增方法，而延展中任意的成员都可以写4）分类中可以写@property，但是只会生成getter、setter的声明；延展中写@property，会自动生成私有属性，也会生成getter、setter的声明和实现 延展的应用场景：1）要为类写一个私有的@property，生成的getter、setter方法只能在类的内部访问，不能在外部访问【@property生成私有属性、生成getter、setter的实现，不要声明】2）延展不会独占一个文件，都是将延展直接写在本类的实现文件中，这个时候写在延展中的成员，就相当于是这个类的私有成员，只能在本类的实现中访问，外部不能访问 注意：1）如果想要为类写一个真私有属性，虽然我们可以定义在@implementation之中，但是不要这么写，这样很不规范，写一个延展，将这个私有属性定义在延展中2）如果要为类写一个私有方法，建议将声明写在延展中，实现写在本类的实现中，提高代码的阅读性3）如果想要为类写一个私有的@property，就直接写在延展中就可以了4）延展天生就是来私有化类的成员的，如果类的成员只希望在类的内部访问，那么就将其定义在延展中，如果类的成员允许被外界访问，定义在本类的@interface中","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"block的基本使用：","slug":"开发语言/Objective-C/block的基本使用：","date":"2019-08-01T16:00:00.000Z","updated":"2021-05-20T15:20:37.784Z","comments":true,"path":"2019/08/02/开发语言/Objective-C/block的基本使用：/","link":"","permalink":"http://example.com/2019/08/02/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/block%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%EF%BC%9A/","excerpt":"","text":"1）block是一个数据类型，我们可以声明一个block类型的变量2）不同类型的变量中可以存储不同类型的数据，block类型的变量中专门存储一段代码，这段代码可以有参数，可以有返回值 Block变量的声明：1）虽然block变量中是用来存储一段代码的，但是一个block变量中并不是任意的一段代码都可以存进去的，而是有限定的；也就是说，声明block变量的时候，必须要指定这个block变量存储的代码是否有参数，是否有返回值，一旦指定以后，这个block变量中就只能存储这样的代码段了2）语法：返回值类型 (^block变量的名称)(参数列表); 初始化block变量：1）原理：写一个符合block要求的代码段，存储到block变量中就可以了2）代码段的书写格式： ^返回值类型(参数类型)&#123; 代码段; &#125;; 如何执行存储在block变量中的代码段：语法格式：block变量名();【有参数就传参数，有返回值就接】","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"block的简写：","slug":"开发语言/Objective-C/block的简写：","date":"2019-07-31T16:00:00.000Z","updated":"2021-05-20T15:20:25.851Z","comments":true,"path":"2019/08/01/开发语言/Objective-C/block的简写：/","link":"","permalink":"http://example.com/2019/08/01/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/block%E7%9A%84%E7%AE%80%E5%86%99%EF%BC%9A/","excerpt":"","text":"1）如果我们写的代码段没有返回值，那么代码段的void可以省略【既没有参数也没有返回值，代码段的void和小括弧都省略，只写一个^】注意：这里说的是代码段的返回值如果是void可以省略，声明block变量的返回值无论是什么都不可以省略2）如果我们写的代码段没有参数，那么代码段的小括弧可以省略3）声明block变量的时候，如果有指定参数，可以只写参数的类型而不写参数的名称注意：这个地方我们说的是声明block变量的时候，代码段的类型和名称都要写4）无论代码段是否有返回值，在写代码的时候，可以不写返回值类型，省略；如果在写代码段的时候，省略了返回值，这个时候系统会自动的确定返回值的类型，如果代码段中没有返回任何数据，那么它会认为这个代码段是没有返回值的，如果代码段中有返回数据，返回的数据是什么类型它就会认为这个代码段是什么类型 建议：仍然按照我们最标准的写法来写block变量和block代码段，因为这样可以提高代码的阅读性","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"简化block变量的复杂定义：","slug":"开发语言/Objective-C/简化block变量的复杂定义：","date":"2019-07-30T16:00:00.000Z","updated":"2021-05-20T15:20:13.951Z","comments":true,"path":"2019/07/31/开发语言/Objective-C/简化block变量的复杂定义：/","link":"","permalink":"http://example.com/2019/07/31/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E7%AE%80%E5%8C%96block%E5%8F%98%E9%87%8F%E7%9A%84%E5%A4%8D%E6%9D%82%E5%AE%9A%E4%B9%89%EF%BC%9A/","excerpt":"","text":"定义block变量的时候，类型很长： Typedef的使用场景：将一个长类型定义为一个短类型","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"关于block块访问外部变量的值的问题","slug":"开发语言/Objective-C/关于block块访问外部变量的值的问题","date":"2019-07-29T16:00:00.000Z","updated":"2021-05-20T15:20:02.214Z","comments":true,"path":"2019/07/30/开发语言/Objective-C/关于block块访问外部变量的值的问题/","link":"","permalink":"http://example.com/2019/07/30/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%85%B3%E4%BA%8Eblock%E5%9D%97%E8%AE%BF%E9%97%AE%E5%A4%96%E9%83%A8%E5%8F%98%E9%87%8F%E7%9A%84%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"","text":"1）在block代码块的内部可以取定义在外部的变量的值，包括定义在外部的局部变量和全局变量2）在block代码块的内部可以修改全局变量的值，但是不能修改定义在外部的局部变量的值3）如果你希望我们定义的局部变量可以允许在block代码的内部去修改，那么就为这个局部变量加一个__block(两个下划线)的修饰符","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"block作为函数的参数：","slug":"开发语言/Objective-C/block作为函数的参数：","date":"2019-07-28T16:00:00.000Z","updated":"2021-05-20T15:19:50.550Z","comments":true,"path":"2019/07/29/开发语言/Objective-C/block作为函数的参数：/","link":"","permalink":"http://example.com/2019/07/29/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/block%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%9A/","excerpt":"","text":"定义： 调用：1）如果要调用的函数的参数是block类型的，那么要求在调用的时候传入一个和形参block要求的代码段2）调用的时候，可以先将代码段存储到一个block变量中，然后再传递这个block变量；也可以直接将符合要求的代码段写在小括弧中传递3）小技巧：通过Xcode提示可以快速的生成block代码段的框架 将block作为函数的参数可以实现什么效果：可以将调用者自己写的一段代码传递到函数的内部去执行","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"应用实例：","slug":"开发语言/Objective-C/应用实例：","date":"2019-07-27T16:00:00.000Z","updated":"2021-05-20T15:19:39.217Z","comments":true,"path":"2019/07/28/开发语言/Objective-C/应用实例：/","link":"","permalink":"http://example.com/2019/07/28/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B%EF%BC%9A/","excerpt":"","text":"写一个数组类，给这个数组类提供一个方法，将一个国家字符串数组进行排序： 比较j和j+1这两个字符串，我们直接比较的是字母顺序，但是这么写的话就写死了 比较这两个字符串的大小，不要方法的内部自己写代码去比，因为不管写什么代码都会写死的，让调用者自己写一段代码来比较这两个字符串的大小 当方法的内部需要执行一个功能，但是这个功能具体的实现函数的内部不确定，那么这个时候，就使用block让调用者将这个功能的具体实现传递进来","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"block作为函数的返回值","slug":"开发语言/Objective-C/block作为函数的返回值","date":"2019-07-26T16:00:00.000Z","updated":"2021-05-20T15:19:26.584Z","comments":true,"path":"2019/07/27/开发语言/Objective-C/block作为函数的返回值/","link":"","permalink":"http://example.com/2019/07/27/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/block%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E7%9A%84%E8%BF%94%E5%9B%9E%E5%80%BC/","excerpt":"","text":"当将block作为函数的返回值的时候，返回值的类型就必须要使用typedef定义的短类型","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"block与函数的异同：","slug":"开发语言/Objective-C/block与函数的异同：","date":"2019-07-25T16:00:00.000Z","updated":"2021-05-20T15:19:11.700Z","comments":true,"path":"2019/07/26/开发语言/Objective-C/block与函数的异同：/","link":"","permalink":"http://example.com/2019/07/26/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/block%E4%B8%8E%E5%87%BD%E6%95%B0%E7%9A%84%E5%BC%82%E5%90%8C%EF%BC%9A/","excerpt":"","text":"相同点：都是封装一段代码 不同的：1）block是一个数据类型，可以声明block类型的变量；而函数就只是函数2）block可以作为函数的参数，而函数不能直接作为函数的参数","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"协议的基本使用(protocol)：","slug":"开发语言/Objective-C/协议的基本使用(protocol)：","date":"2019-07-24T16:00:00.000Z","updated":"2021-05-20T15:12:31.179Z","comments":true,"path":"2019/07/25/开发语言/Objective-C/协议的基本使用(protocol)：/","link":"","permalink":"http://example.com/2019/07/25/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8(protocol)%EF%BC%9A/","excerpt":"","text":"作用：专门用来声明一大堆方法（不能声明属性，也不能实现方法，只能用来写方法的声明），只要某个类遵守了这个协议，就相当于拥有这个协议中的所有的方法声明，而不用自己去定义 协议的声明： @protocol 协议名称 方法的声明; @end 在协议中，只能用来声明方法，就是专门用来写方法声明的，就是用来被类遵守的 如果想要让一个类拥有协议中定义的所有的方法声明，那么就让这个类遵守这个协议，类只要遵守一个协议，那么这个类就拥有了这个协议中定义的所有的方法的声明 @interface 类名 ： 父类名 &lt;协议名称&gt; @end ：表示继承&lt;&gt;表示遵守的协议 这个类只是拥有了这个协议中的方法的声明而已，没有实现，所以这个类还应该实现协议中的方法 如果类不实现协议中的方法，其实也不会报错，编译器只是会报警告；但是当创建对象，来调用这个没有实现的协议中的方法的时候，就会报错 类是单继承，但是协议可以多遵守@interface 类名：父类名 &lt;协议名称1，协议名称2……&gt; @end","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"required与optional","slug":"开发语言/Objective-C/@required与@optional","date":"2019-07-23T16:00:00.000Z","updated":"2021-05-20T15:12:17.212Z","comments":true,"path":"2019/07/24/开发语言/Objective-C/@required与@optional/","link":"","permalink":"http://example.com/2019/07/24/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/@required%E4%B8%8E@optional/","excerpt":"","text":"当一个类遵守了一份协议，这个类只是拥有了这个协议中的方法的声明而已，没有实现，所以这个类还应该实现协议中的方法；如果类不实现协议中的方法，其实也不会报错，编译器只是会报警告；但是当创建对象，来调用这个没有实现的协议中的方法的时候，就会报错 这两个修饰符是专门用来修饰协议中的方法的 在协议中，如果方法的声明被@required修饰，那么遵守这个协议的类必须要实现这个方法，否则编译器会发出警告；如果方法的声明被@optional修饰，那么遵守这个协议的类如果不实现这个方法，编译器也不会发出警告 这两个关键字的主要作用：在于程序员沟通，告诉遵守协议的类，哪些方法是必须要实现的（@required必须实现，@optional可实现可不实现），因为这些方法我会调用 默认的是：@required","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"协议之间的继承：","slug":"开发语言/Objective-C/协议之间的继承：","date":"2019-07-22T16:00:00.000Z","updated":"2021-05-20T15:12:05.077Z","comments":true,"path":"2019/07/23/开发语言/Objective-C/协议之间的继承：/","link":"","permalink":"http://example.com/2019/07/23/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%97%B4%E7%9A%84%E7%BB%A7%E6%89%BF%EF%BC%9A/","excerpt":"","text":"协议与协议之间可以相互继承 语法： @protocol 协议名称 &lt;父协议名称&gt; @end 效果：子协议中不仅有自己的方法的声明，还有父协议中的所有的方法的声明；如果某个类遵守了某份协议，那么这个类就拥有了这个协议和这个协议的父协议中的所有方法的声明 类的名称可以和协议的名称一致：在Foundation框架中，有一个类叫做NSObject，是所有OC类的基类在Foundation框架中，有一个协议叫做NSObject NSObject协议被NSObject类遵守，所以，NSObject协议中的所有的方法全部的OC类都拥有了，这么说，所有的OC类都遵守了NSObject协议，NSObject协议也叫做基协议 写协议的规范：要求所有的协议都必须直接的或间接的从NSObject基协议继承","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"协议的类型限制(代理设计模式)：","slug":"开发语言/Objective-C/协议的类型限制(代理设计模式)：","date":"2019-07-21T16:00:00.000Z","updated":"2021-05-20T15:11:34.430Z","comments":true,"path":"2019/07/22/开发语言/Objective-C/协议的类型限制(代理设计模式)：/","link":"","permalink":"http://example.com/2019/07/22/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%B1%BB%E5%9E%8B%E9%99%90%E5%88%B6(%E4%BB%A3%E7%90%86%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F)%EF%BC%9A/","excerpt":"","text":"NSObject&lt;协议名称1，协议名称2….&gt; *指针名;Id&lt;协议名称1，协议名称2….&gt; 指针名; 这个时候，这个指针可以指向遵守了指定协议的任意对象，如果指定的对象没有遵守这个协议，会报一个警告【多个协议必须同时遵守，只遵守一个也会报警告】 为什么要做协议的类型限制：1）遵守了某个协议的类，，就相当于这个类拥有了这个协议所定义的行为2）因为我要调用这个对象中的协议方法，只有类遵守了协议，这个类中才一定会有协议方法","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"框架","slug":"开发语言/Objective-C/框架","date":"2019-07-20T16:00:00.000Z","updated":"2021-05-20T14:59:30.411Z","comments":true,"path":"2019/07/21/开发语言/Objective-C/框架/","link":"","permalink":"http://example.com/2019/07/21/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E6%A1%86%E6%9E%B6/","excerpt":"","text":"框架：苹果或者第三方事先写好了一些功能很厉害的类，把这些类交给我们使用，这些类的集合我们叫做框架 Foundation框架：是一个包，这里面有很多类、函数、定义了一些数据类型，这个框架中的类都是一些最基础的类(NSString、NSObject)，其他的框架都是基于Foundation框架的","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"NSString类：","slug":"开发语言/Objective-C/NSString类：","date":"2019-07-19T16:00:00.000Z","updated":"2021-05-20T14:59:18.977Z","comments":true,"path":"2019/07/20/开发语言/Objective-C/NSString类：/","link":"","permalink":"http://example.com/2019/07/20/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/NSString%E7%B1%BB%EF%BC%9A/","excerpt":"","text":"NSString是一个数据类型，保存OC字符串的，实际上NSString的本质是一个类使用这种方式创建的字符串是一个空的字符@“” 当我们调用NSString的类方法来创建对象的时候，创建的字符串对象是存储在堆区 OC提供了一种更为快速的创建字符串对象的方式，使用前缀@ @“jack”;本质上这是一个NSString对象，这个NSString对象中存储的是”jack”这个字符串，这个字符串对象是存储在常量区（数据段）的 NSString的恒定性：当在内存中创建一个字符串对象以后，这个字符串对象的内容就无法更改，当我们重新为字符串指针初始化值的时候，并不是修改原来的字符串对象，而是重新的创建一个字符串对象，将这个字符串对象的地址重新赋值给字符串指针变量 当系统准备要在内存中创建字符串对象的时候，会先检查内存中是否有相同内容的字符串对象，如果有直接指向，如果没有才会重新创建 存储在常量区的数据不会被回收，所以存储在常量区的字符串对象也不会被回收【堆区也一样】","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"字符串对象常用方法：","slug":"开发语言/Objective-C/字符串对象常用方法：","date":"2019-07-18T16:00:00.000Z","updated":"2021-05-20T14:59:08.477Z","comments":true,"path":"2019/07/19/开发语言/Objective-C/字符串对象常用方法：/","link":"","permalink":"http://example.com/2019/07/19/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%B9%E8%B1%A1%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A/","excerpt":"","text":"1）使用拼接的方式创建一个NSString对象2）得到字符串的长度3）得到字符串中指定下标的字符4）判断两个字符串的内容是否相等【不能使用==去比较，因为==比较的是字符串指针变量的值，而我们要比的是两个字符串指针指向的字符串对象的内容是否相同】5）将C语言的字符串转换为OC字符串对象6）将OC字符串对象转换为C语言的字符串 7）将字符串内容写入到磁盘上的某一个文件之中 参数1:将字符串内容写入到哪一个文件之中，写上文件的路径 参数2:YES，先将内容写入到一个临时文件，如果成功再将这个文件搬到指定的目录【安全，效率低】；NO，直接将内容写入到指定的文件【不安全，效率高】；推荐使用NO 参数3:指定写入的时候使用的编码 参数4:二级指针，要传递一个NSError指针的地址，如果写入成功，这个指针的值就是nil，如果写入失败，这个指针就会指向一个错误的对象，这个对象描述了发生错误的信息【这个对象的localizedDescription方法可以得到发生错误的简要信息】，所以我们要判断是否写入成功，也可以判断这个指针的值是否为nil 如果不想知道发生错误的原因，那么第四个参数给nil就可以了 返回值是BOOL类型的，代表是否写入成功 8）从磁盘上的文件中读取文件中的内容","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"使用URL来读写字符串数据","slug":"开发语言/Objective-C/使用URL来读写字符串数据","date":"2019-07-17T16:00:00.000Z","updated":"2021-05-20T14:58:50.210Z","comments":true,"path":"2019/07/18/开发语言/Objective-C/使用URL来读写字符串数据/","link":"","permalink":"http://example.com/2019/07/18/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E4%BD%BF%E7%94%A8URL%E6%9D%A5%E8%AF%BB%E5%86%99%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%95%B0%E6%8D%AE/","excerpt":"","text":"优势：既可以读写本地磁盘文件，还可以读写网页文件、ftp服务器上的文件","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"字符串的比较：","slug":"开发语言/Objective-C/字符串的比较：","date":"2019-07-16T16:00:00.000Z","updated":"2021-05-20T14:58:38.677Z","comments":true,"path":"2019/07/17/开发语言/Objective-C/字符串的比较：/","link":"","permalink":"http://example.com/2019/07/17/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%AF%94%E8%BE%83%EF%BC%9A/","excerpt":"","text":"1）2）忽略大小写的比较3）只比较字符串中数字的大小【格式相同】","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"字符串的开始和结束判断：","slug":"开发语言/Objective-C/字符串的开始和结束判断：","date":"2019-07-15T16:00:00.000Z","updated":"2021-05-20T14:58:27.710Z","comments":true,"path":"2019/07/16/开发语言/Objective-C/字符串的开始和结束判断：/","link":"","permalink":"http://example.com/2019/07/16/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%BC%80%E5%A7%8B%E5%92%8C%E7%BB%93%E6%9D%9F%E5%88%A4%E6%96%AD%EF%BC%9A/","excerpt":"","text":"判断字符串是否以指定的字符串开头： 判断字符串是否以指定的字符串结尾：","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"字符串的搜索：","slug":"开发语言/Objective-C/字符串的搜索：","date":"2019-07-14T16:00:00.000Z","updated":"2021-05-20T14:57:29.343Z","comments":true,"path":"2019/07/15/开发语言/Objective-C/字符串的搜索：/","link":"","permalink":"http://example.com/2019/07/15/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%90%9C%E7%B4%A2%EF%BC%9A/","excerpt":"","text":"在主串中搜索子串： 1）这个方法是从前往后搜索，第一次匹配的子串： 2）从后往前搜索NSRange结构体：是Foundation框架中定义的一个结构体，结构体变量一般用来表示一段范围 声明并初始化结构体变量的方式：1）2）3）4）Foundation框架中定义了一个函数，这个函数可以快速的创建一个NSRange结构体变量5）Foundation框架中定义了一个函数，可以将一个NSRange结构体变量转换为NSString","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"字符串的截取：","slug":"开发语言/Objective-C/字符串的截取：","date":"2019-07-13T16:00:00.000Z","updated":"2021-05-20T14:57:17.711Z","comments":true,"path":"2019/07/14/开发语言/Objective-C/字符串的截取：/","link":"","permalink":"http://example.com/2019/07/14/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%88%AA%E5%8F%96%EF%BC%9A/","excerpt":"","text":"1）从指定的下标处一直截取到最后2）从第0个开始截取指定的个数3）截取指定的一段范围","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"字符串的替换：","slug":"开发语言/Objective-C/字符串的替换：","date":"2019-07-12T16:00:00.000Z","updated":"2021-05-20T14:57:05.660Z","comments":true,"path":"2019/07/13/开发语言/Objective-C/字符串的替换：/","link":"","permalink":"http://example.com/2019/07/13/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9B%BF%E6%8D%A2%EF%BC%9A/","excerpt":"","text":"将字符串中的第一个参数替换为第二个参数（全部替换）这个方法还可以做删除，原理是将其替换为@“”","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"字符串的类型转换：","slug":"开发语言/Objective-C/字符串的类型转换：","date":"2019-07-11T16:00:00.000Z","updated":"2021-05-20T14:56:42.209Z","comments":true,"path":"2019/07/12/开发语言/Objective-C/字符串的类型转换：/","link":"","permalink":"http://example.com/2019/07/12/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%EF%BC%9A/","excerpt":"","text":"注意：从头开始转换，能转换多少就是多少，当遇到不能转换的时候就停止转换","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"字符串的其他常用方法：","slug":"开发语言/Objective-C/字符串的其他常用方法：","date":"2019-07-10T16:00:00.000Z","updated":"2021-05-20T14:56:30.659Z","comments":true,"path":"2019/07/11/开发语言/Objective-C/字符串的其他常用方法：/","link":"","permalink":"http://example.com/2019/07/11/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%85%B6%E4%BB%96%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%9A/","excerpt":"","text":"1）去掉字符串前后的空格，中间的空格无法去掉2）将字符串转换为大写或小写3）去掉字符串前后的小写字母或大写字母4）去掉头尾指定的字符串","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"NSMutableString：","slug":"开发语言/Objective-C/NSMutableString：","date":"2019-07-09T16:00:00.000Z","updated":"2021-05-20T14:56:18.343Z","comments":true,"path":"2019/07/10/开发语言/Objective-C/NSMutableString：/","link":"","permalink":"http://example.com/2019/07/10/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/NSMutableString%EF%BC%9A/","excerpt":"","text":"会耗费很长的时间，每次循环的时候都会创建一个新的字符串对象，因为字符串的恒定性 NSMutableString是Foundation框架中的一个类，从NSString继承，所以NSMutableString对象是用来存储字符串数据的，NSMutableString在父类NSString的基础之上做了扩展，存储在NSMutableString对象中的字符串数据可以更改，具备可变性 往可变字符串对象中追加字符串【第二个是以拼接的方式追加】 NSMutableString从NSString继承，在使用NSString的地方完全可以使用NSMutableString 使用NSMutableString来做大批量的字符串拼接：【NSMutableString只有一个，每次修改的时候直接修改的是这个对象中的数据】 平时使用NSString，做大量拼接的时候使用NSMutableString","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"NSArray：","slug":"开发语言/Objective-C/NSArray：","date":"2019-07-08T16:00:00.000Z","updated":"2021-05-20T14:56:05.548Z","comments":true,"path":"2019/07/09/开发语言/Objective-C/NSArray：/","link":"","permalink":"http://example.com/2019/07/09/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/NSArray%EF%BC%9A/","excerpt":"","text":"是Foundation框架中的一个类，这个类的对象是来存储多个数据的，具备数组的功能，所以NSArray是OC中的数组最常用的创建数组的方式：【只能存储OC对象】简写方式： 取出对应的元素的值：1）2） NSArray数组的其他常用方法：1）得到数组中元素的个数2）判断数组中是否包含指定的元素3）查找指定的元素在NSArray数组中第一次出现的下标 NSArray数组的遍历：1）使用for循环2）声明在for()中的变量叫做迭代变量【执行原理：将数组中的第一个元素的值赋值给迭代变量，执行循环体，再将数组中的第二个元素的值赋值给迭代变量，再执行循环体】 3）使用block遍历","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"NSArray与字符串的两个方法：","slug":"开发语言/Objective-C/NSArray与字符串的两个方法：","date":"2019-07-07T16:00:00.000Z","updated":"2021-05-20T14:55:38.323Z","comments":true,"path":"2019/07/08/开发语言/Objective-C/NSArray与字符串的两个方法：/","link":"","permalink":"http://example.com/2019/07/08/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/NSArray%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%96%B9%E6%B3%95%EF%BC%9A/","excerpt":"","text":"1）将数组中的元素连接起来组成一个新的字符串2）将字符串以指定的分隔符分成一个数组，每一部分就是数组的一个元素","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"NSMutableArray：","slug":"开发语言/Objective-C/NSMutableArray：","date":"2019-07-06T16:00:00.000Z","updated":"2021-05-20T14:55:25.293Z","comments":true,"path":"2019/07/07/开发语言/Objective-C/NSMutableArray：/","link":"","permalink":"http://example.com/2019/07/07/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/NSMutableArray%EF%BC%9A/","excerpt":"","text":"NSMutableArray是NSArray的子类，NSMutableArray仍然是一个数组，具备NSArray数组的特点 NSMutableArray相对于父类做的扩展：NSMutableArray数组的元素可以动态的新增和删除 NSMutableArray数组的创建：1）这样创建出来的数组对象数组的元素是0，仍然是有意义的，因为我们可以动态的新增和删除元素2） 往可变数组中新增元素：1）2）3）将另外一个数组中的每一个元素添加到可变数组中 在可变数组中指定的下标中插入一个元素： 删除可变数组中指定下标的元素： 删除可变数组中所有的指定的元素： 删除指定范围中的所有指定的元素： 删除最后一个元素： 删除所有元素：","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"NSNumber：","slug":"开发语言/Objective-C/NSNumber：","date":"2019-07-05T16:00:00.000Z","updated":"2021-05-20T14:55:14.191Z","comments":true,"path":"2019/07/06/开发语言/Objective-C/NSNumber：/","link":"","permalink":"http://example.com/2019/07/06/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/NSNumber%EF%BC%9A/","excerpt":"","text":"无论是NSArray还是NSMutableArray里面都只能存储OC对象，基本数据类型是无法存储的 NSNumber是Foundation框架中定义好的一个类，这个类的对象的作用就是用来包装基本数据类型的1）先将基本数据类型包装到NSNumber对象中2）再将NSNumber对象存储到NSArray数组中 简写方式：【@10代表是一个NSNumber对象，这个对象中包装的是整型的10】 如果后面的数据是一个变量，那么这个变量就必须要使用小括弧括起来：","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"NSDictionary与NSMutableDictionary：","slug":"开发语言/Objective-C/NSDictionary与NSMutableDictionary：","date":"2019-07-04T16:00:00.000Z","updated":"2021-05-20T14:53:13.353Z","comments":true,"path":"2019/07/05/开发语言/Objective-C/NSDictionary与NSMutableDictionary：/","link":"","permalink":"http://example.com/2019/07/05/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/NSDictionary%E4%B8%8ENSMutableDictionary%EF%BC%9A/","excerpt":"","text":"NSArray与NSMutableArray的缺点：数组元素的下标不固定，都有可能会发生变化，无法通过下标来唯一确定数组中的元素 存储数据的时候，必须要为存储的数据取一个别名，这个别名的作用就是用来确定别名对应的数据的，这种存储数据的方式就叫做键值对的存储方式（Key-Value） 它们是数组，是以键值对的形式存储数据的，往这个数组中存储数据的同时必须要指定这个数据的别名才可以，要找到存储在这个数组中的数据，通过别名来找，而不是通过下标 NSDictionary：字典数组 创建字典数组：1）这种方式无意义2）3）简要方式 使用：1）根据别名取值：2）键值对的数量：3）4）5）遍历字典数组【字典数组中的数据无法使用下标去取，所以普通的for循环就无用了】 1.使用for in循环遍历出来的是字典数组中所有的键，再通过键取出对应的值2.使用block遍历 字典数组存储数据的原理：1）并不是按照顺序依次存储的2）存储键值对的时候，会根据键和数组的长度做一个哈希算法，算出一个下标，将这个键值对存储在该下标处3）取值的时候也是做哈希算法 与NSArray对比：1）NSArray数组的元素是按照顺序来存储的，字典数组中存储的下标是算出来的2）存储的效率NSArray要高一些如果取值的时候是把所有的数据取出来，NSArray效率高如果只是取数组中指定的几个元素，字典数组效率高 NSMutableDictionary：存储在其中的元素可以动态的新增和删除 创建可变字典数组：1）有意义2） 新增键值对：【如果键重复，后添加的就会替换原有的】 删除所有键值对：删除某一个键值对： 字典数组的信息持久化：保存到plist文件里：从plist文件中还原：","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"集合的内存管理：","slug":"开发语言/Objective-C/集合的内存管理：","date":"2019-07-03T16:00:00.000Z","updated":"2021-05-20T14:52:58.670Z","comments":true,"path":"2019/07/04/开发语言/Objective-C/集合的内存管理：/","link":"","permalink":"http://example.com/2019/07/04/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E9%9B%86%E5%90%88%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%EF%BC%9A/","excerpt":"","text":"NSArray：集合NSDictionary：字典集合 在MRC模式下，将对象存储到集合之中，会为这个对象的引用计数器+1，当集合销毁的时候，就会向存储在集合中的所有对象发送一条release消息 使用@[]或者@{}创建的集合已经被autorelease过了直接调用和类同名的类方法创建的对象也是被autorelease过了 在ARC模式下，集合的元素是一个强类型的指针","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"NSFileManager：","slug":"开发语言/Objective-C/NSFileManager：","date":"2019-07-02T16:00:00.000Z","updated":"2021-05-20T14:52:47.597Z","comments":true,"path":"2019/07/03/开发语言/Objective-C/NSFileManager：/","link":"","permalink":"http://example.com/2019/07/03/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/NSFileManager%EF%BC%9A/","excerpt":"","text":"NSFileManager是Foundation框架提供的一个类，用来操作磁盘上的文件和文件夹，对它们进行创建、删除、复制、拷贝、移动 NSFileManager类的对象是以单例模式创建的： 常用方法之判断：1）判断指定的文件或者文件夹在磁盘上是否真实的存在2）判断指定的路径是否真实的存储在我们的磁盘之上，并且判断这个路径是一个文件夹路径还是一个文件路径3）判断指定的文件夹或者文件是否可以读取4）判断指定的文件夹或者文件是否可以写入5）判断指定的文件夹或者文件是否可以删除 常用方法之获取信息：1）获取指定文件或者文件夹的属性信息只是想拿到文件或文件夹的大小信息：2）获取指定目录下的所有的文件和目录【所有的都拿到】3）获取指定目录下所有的子目录和文件【不包括孙子辈】 常用方法之文件/目录的创建：1）在指定的目录创建文件2）在指定的目录创建文件夹【第2个参数：YES做一路创建，NO就不会】3）拷贝文件4）移动/剪切文件—文件的重命名5）删除文件【删除的文件不会倒在废纸篓，而是直接删除】","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"OC中的结构体：","slug":"开发语言/Objective-C/OC中的结构体：","date":"2019-07-01T16:00:00.000Z","updated":"2021-05-20T14:52:36.846Z","comments":true,"path":"2019/07/02/开发语言/Objective-C/OC中的结构体：/","link":"","permalink":"http://example.com/2019/07/02/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/OC%E4%B8%AD%E7%9A%84%E7%BB%93%E6%9E%84%E4%BD%93%EF%BC%9A/","excerpt":"","text":"在Foundation框架中，已经定义好了一个结构体CGPoint 声明CGPoint变量并初始化的方式：4）Foundation框架中提供的函数来快速的创建一个CGPoint变量 —————————————— CGSize： CZSize声明并初始化的方式： ————————————— CGRect和NSRect： CGRect的声明和初始化：","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"NSValue：","slug":"开发语言/Objective-C/NSValue：","date":"2019-06-30T16:00:00.000Z","updated":"2021-05-20T14:52:26.213Z","comments":true,"path":"2019/07/01/开发语言/Objective-C/NSValue：/","link":"","permalink":"http://example.com/2019/07/01/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/NSValue%EF%BC%9A/","excerpt":"","text":"NSRange、CGPoint、CGSize、CGRect这些都是结构体，他们的变量是无法存储到集合之中，要先将这些结构体变量存储到OC对象中，再将OC对象存储到集合之中","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"C++基础：","slug":"开发语言/C++/C++基础：","date":"2019-06-29T16:00:00.000Z","updated":"2021-05-20T14:39:52.774Z","comments":true,"path":"2019/06/30/开发语言/C++/C++基础：/","link":"","permalink":"http://example.com/2019/06/30/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/C++%E5%9F%BA%E7%A1%80%EF%BC%9A/","excerpt":"","text":"常量：用于记录程序中不可更改的数据 C++定义常量的两种方式：1）#define 常量名 常量值2）const修饰的变量 利用sizeof关键字可以统计数据类型所占内存的大小【sizeof（数据类型/变量）】 字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元【a-97，A-65】 水平制表符\\t：可以整齐的输出数据，水平制表符与前面的字符永远占据八个空格 反斜杠：\\ 两种风格字符串：1）C风格字符串：char 变量名[] = “字符串值”2）C++风格字符串：string 变量名 = “字符串值”【使用这种风格字符串时要包含一个头文件#include 】 Cin数据的输入Cout数据的输出 Bool类型非零即真 算术运算符【+(正号)、-(负号)、+、-、、/、%、++、- -】赋值运算符【=、+=、-=、=、/=、%=】比较运算符【==、！=、&lt;、&gt;、&lt;=、&gt;=】逻辑运算符【！非、&amp;&amp;与、||或】 前置递增先对变量进行++，再计算表达式后置递增先计算表达式，后对变量进行++ 程序流程结构：顺序结构、选择结构【if语句、三目运算符、switch语句】、循环结构【while、do while、for】 跳转语句：break、continue、goto Break出现在switch条件语句中，作用是终止case并跳出switch，出现在循环语句中，作用是跳出当前的循环语句，出现在嵌套循环中，跳出最近的内层循环语句 Continue在循环语句中跳过本次循环中余下尚未执行的语句，继续执行下一次循环【可以筛选条件，奇数输出，偶数不输出】 Goto语句：无条件的跳转语句 三目运算符：表达式1？表达式2:表达式3 在C++中三目运算符返回的是变量，可以继续赋值 Switch语句中的表达式类型只能是整型或者字符型 系统生成随机数：rand()%100，会生成0～99的随机数【伪随机数】 添加随机数种子，利用当前系统时间生成随机数，防止每次随机数都一样： 12#include&lt;ctime&gt;srand((unsigned int)time(NULL));","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"NSDate：","slug":"开发语言/Objective-C/NSDate：","date":"2019-06-29T16:00:00.000Z","updated":"2021-05-20T14:52:15.429Z","comments":true,"path":"2019/06/30/开发语言/Objective-C/NSDate：/","link":"","permalink":"http://example.com/2019/06/30/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/NSDate%EF%BC%9A/","excerpt":"","text":"可以得到当前的时间，得到的是当前系统的格林威治时间（0时区），北京是东八区 转换成自己想要输出的格式：【日期转换为字符串】将字符串转换为日期： 在当前格林威治的时间基础上增加多少秒：【负数表示减少】 计算时间之差： 拿到日期的各个部分：1）2）","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"数组：","slug":"开发语言/C++/数组：","date":"2019-06-28T16:00:00.000Z","updated":"2021-05-20T14:39:38.440Z","comments":true,"path":"2019/06/29/开发语言/C++/数组：/","link":"","permalink":"http://example.com/2019/06/29/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/%E6%95%B0%E7%BB%84%EF%BC%9A/","excerpt":"","text":"一维数组的定义方式：1）数据类型 数组名[数组长度];2）数据类型 数组名[数组长度]={值1，值2…};3）数据类型 数组名[]={值1，值2…}; 如果在初始化数据的时候，没有全部填写完，会用0来填补剩余数据 一维数组名称的用途：1）可以统计整个数组在内存中的长度2）可以获取数组在内存中的首地址：cout&lt;&lt;arr&lt;&lt;endl；cout&lt;&lt;&amp;arr[0]&lt;&lt;endl; 数组名是一个常量，不可以进行赋值操作 二维数组定义方式：1）数据类型 数组名[行数][列数]；2）数据类型 数组名[行数][列数]=｛｛数据1，数据2｝，｛数据3，数据4｝｝；3）数据类型 数组名[行数][列数]=｛数据1，数据2，数据3，数据4｝；4）数据类型 数组名[][列数]={数据1，数据2，数据3，数据4};","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"copy和mutableCopy：","slug":"开发语言/Objective-C/copy和mutableCopy：","date":"2019-06-28T16:00:00.000Z","updated":"2021-05-20T14:52:04.297Z","comments":true,"path":"2019/06/29/开发语言/Objective-C/copy和mutableCopy：/","link":"","permalink":"http://example.com/2019/06/29/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/copy%E5%92%8CmutableCopy%EF%BC%9A/","excerpt":"","text":"无论在MRC还是ARC下，如果属性的类型是NSString类型的，@property参数使用copy Copy是一个方法，定义在NSObject类之中，作用是拷贝对象 没有产生新对象，而是直接将对象本身的地址返回，这种拷贝我们叫做浅拷贝：【拷贝出来的是不可变字符串对象】 有产生一个新对象，这样的拷贝我们叫做深拷贝【是一个不可变的字符串对象】 mutableCopy：定义在NSObject类之中，作用是拷贝对象 可变字符串对象，深拷贝： 可变字符串对象，深拷贝： 若字符串对象存储在常量区中，存储在常量区的数据是不允许被回收的，所以存储在常量区的字符串对象的引用计数器是一个很大的数，并且retain和release无效若字符串存储在堆区，这个字符串对象和普通的对象是一样的，引用计数器默认是1 字符串对象如果是浅拷贝，会将对象的引用计数器+1；如果是深拷贝，原来的对象的引用计数器不变，新拷贝出来的对象的引用计数器为1 1）2）3） Copy方法的确是定义在NSObject类中的一个方法，但是copy方法的内部还调用了另外一个方法：copyWithZone，这个方法是定义在NSCoping协议之中的，因为我们的类没有遵守这个协议，所以当我们自定义的类调用copy方法的时候就会出错 解决方案：【return self;就是浅拷贝了】","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"函数：","slug":"开发语言/C++/函数：","date":"2019-06-27T16:00:00.000Z","updated":"2021-05-20T14:39:15.622Z","comments":true,"path":"2019/06/28/开发语言/C++/函数：/","link":"","permalink":"http://example.com/2019/06/28/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/%E5%87%BD%E6%95%B0%EF%BC%9A/","excerpt":"","text":"值传递的时候，形参发生任何的改变，都不会影响实参 地址传递：利用指针作为函数的参数，可以修改实参的值 函数的声明可以写多次，但是定义只能有一次 函数的分文件编写：1）创建后缀名为.h的头文件，在头文件中写函数的声明2）创建后缀名为.cpp的源文件，在源文件中写函数的定义","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"单例模式：","slug":"开发语言/Objective-C/单例模式：","date":"2019-06-27T16:00:00.000Z","updated":"2021-05-20T14:51:41.211Z","comments":true,"path":"2019/06/28/开发语言/Objective-C/单例模式：/","link":"","permalink":"http://example.com/2019/06/28/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/Objective-C/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%EF%BC%9A/","excerpt":"","text":"一个类的对象，无论在何时创建，无论在什么地方创建，也无论创建多少次，创建出来的都是同一个对象 无论如何创建对象，最终都会调用alloc方法来创建，alloc方法的内部，其实什么都没做，只是调用了allocWithZone方法，实际上真正申请空间创建对象的事情是allocWithZone方法在做 实现单例模式的方法：重写allocWithZone方法【规范：如果类是一个单例模式，要求为类提供一个类方法，来返回这个单例对象，类方法必须以shared类名；default类名】单例对象可以被共享，存储在单例对象中的数据可以被共享；如果数据需要被整个程序所共享，那么将数据以属性的方式存储在单例对象中","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"}]},{"title":"指针：","slug":"开发语言/C++/指针：","date":"2019-06-26T16:00:00.000Z","updated":"2021-05-20T14:38:40.703Z","comments":true,"path":"2019/06/27/开发语言/C++/指针：/","link":"","permalink":"http://example.com/2019/06/27/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/%E6%8C%87%E9%92%88%EF%BC%9A/","excerpt":"","text":"指针前加一个代表解引用，找到指针指向的内存中的数据【p】 不管是什么数据类型，在32位操作系统上指针是占据4个字节空间大小，在64位操作系统上占据8个字节空间大小 int *p =NULL；空指针：指针变量指向内存中编号为0的空间，用来初始化指针变量，空指针指向的内存是不可以访问的【0～255之间的内存编号是系统占用的，因此不可以访问】 野指针：指针变量指向非法的内存空间 空指针和野指针都不是我们申请的空间，因此不要访问 Const修饰指针的三种情况：1）const修饰指针：常量指针【const int *p=&amp;a；指针的指向可以修改，但是指针指向的值不可以修改）2）const修饰常量：指针常量【int * const p=&amp;a；指针的指向不可以改，指针指向的值可以改】3）const既修饰指针又修饰常量【const int * const p=&amp;a；指针的指向和指针指向的值都不可以改】","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"结构体：","slug":"开发语言/C++/结构体：","date":"2019-06-25T16:00:00.000Z","updated":"2021-05-20T14:38:27.522Z","comments":true,"path":"2019/06/26/开发语言/C++/结构体：/","link":"","permalink":"http://example.com/2019/06/26/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/%E7%BB%93%E6%9E%84%E4%BD%93%EF%BC%9A/","excerpt":"","text":"结构体属于用户自定义的数据类型，允许用户存储不同的数据类型 在结构体中可以定义另一个结构体作为成员 值传递传参的时候会耗费大量的内存空间，用地址传递可以减少内存空间，而且不会复制新的副本出来 结构体中用const来防止误操作： ————————————— 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;iostream&gt;#include &lt;string&gt;using namespace std;struct Hero&#123; string name; int age; string sex;&#125;;&#x2F;&#x2F;冒泡排序void bubbleSort(struct Hero heroArray[],int len)&#123; for(int i&#x3D;0;i&lt;len-1;i++)&#123; for(int j&#x3D;0;j&lt;len-1-i;j++)&#123; if(heroArray[j].age&gt;heroArray[j+1].age)&#123; struct Hero temp&#x3D;heroArray[j]; heroArray[j]&#x3D;heroArray[j+1]; heroArray[j+1]&#x3D;temp; &#125; &#125; &#125;&#125;void printHero(struct Hero heroArray[],int len)&#123; for(int i&#x3D;0;i&lt;len;i++)&#123; cout&lt;&lt;“姓名： “&lt;&lt;heroArray[I].name&lt;&lt;“年龄： “&lt;&lt;heroArray[I].age&lt;&lt;“性别：”&lt;&lt;heroArray[I].sex&lt;&lt;endl; &#125;&#125;int main(int argc, char *argv[]) &#123; struct Hero heroArray[5]&#x3D;&#123; &#123;“刘备”,23,”男”&#125;, &#123;“关羽”,22,”男”&#125;, &#123;“张飞”,20,”男”&#125;, &#123;“赵云”,21,”男”&#125;, &#123;“貂蝉”,19,”女”&#125;, &#125;; int len&#x3D;sizeof(heroArray)&#x2F;sizeof(heroArray[0]); bubbleSort(heroArray,len); printHero(heroArray,len); &#125;","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"通讯录管理系统：","slug":"开发语言/C++/通讯录管理系统：","date":"2019-06-24T16:00:00.000Z","updated":"2021-05-20T14:38:14.800Z","comments":true,"path":"2019/06/25/开发语言/C++/通讯录管理系统：/","link":"","permalink":"http://example.com/2019/06/25/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/%E9%80%9A%E8%AE%AF%E5%BD%95%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%9A/","excerpt":"","text":"系统需求：1）添加联系人：向通讯录中添加新人，信息包括（姓名、性别、年龄、联系电话、家庭住址），最多记录1000人2）显示联系人：显示通讯录中所有联系人的信息3）删除联系人：按照姓名进行删除指定联系人4）查找联系人：按照姓名查看指定联系人信息5）修改联系人：按照姓名重新修改指定联系人6）清空联系人：清空通讯录中所有信息7）退出通讯录：退出当前使用的通讯录 ——————————— 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359&#x2F;&#x2F; main.cpp&#x2F;&#x2F; 通讯录管理系统&#x2F;&#x2F; Created by 廖家龙 on 2020&#x2F;10&#x2F;8.&#x2F;* 本系统需要改进的点：姓名和地址显示不出中文 *&#x2F;#include &lt;iostream&gt;#include &lt;string&gt;#define MAX 1000 &#x2F;&#x2F;通讯录存储的最大人数**using** **namespace** std;&#x2F;&#x2F;1-显示菜单界面**void** showMenu()&#123; cout&lt;&lt;“************************”&lt;&lt;endl; cout&lt;&lt;“***** 1、添加联系人 *****”&lt;&lt;endl; cout&lt;&lt;“***** 2、显示联系人 *****”&lt;&lt;endl; cout&lt;&lt;“***** 3、删除联系人 *****”&lt;&lt;endl; cout&lt;&lt;“***** 4、查找联系人 *****”&lt;&lt;endl; cout&lt;&lt;“***** 5、修改联系人 *****”&lt;&lt;endl; cout&lt;&lt;“***** 6、清空联系人 *****”&lt;&lt;endl; cout&lt;&lt;“***** 0、退出通讯录 *****”&lt;&lt;endl; cout&lt;&lt;“************************”&lt;&lt;endl;&#125;&#x2F;&#x2F;3-联系人结构体**struct** Person&#123; string m_Name; &#x2F;&#x2F;姓名 **int** m_Sex; &#x2F;&#x2F;性别：1、男 2、女 **int** m_Age; &#x2F;&#x2F;年龄 string m_Phone; &#x2F;&#x2F;电话 string m_Addr; &#x2F;&#x2F;住址&#125;;&#x2F;&#x2F;3-通讯录结构体**struct** Addressbooks&#123; **struct** Person personArray[MAX]; &#x2F;&#x2F;通讯录中保存的联系人数组 **int** m_Size; &#x2F;&#x2F;通讯录中人员个数&#125;;&#x2F;&#x2F;3-添加联系人**void** addPerson(Addressbooks *abs)&#123; &#x2F;&#x2F;判断通讯录是否已满，如果满了就不再添加 **if**(abs-&gt;m_Size &#x3D;&#x3D; MAX)&#123; Cout&lt;&lt;“通讯录已满，无法添加！”&lt;&lt;endl; **return**; &#125; **else**&#123; &#x2F;&#x2F;添加具体的联系人 &#x2F;&#x2F;姓名 string name; cout&lt;&lt;“请输入姓名：”&lt;&lt;endl; cin&gt;&gt;name; abs-&gt;personArray[abs-&gt;m_Size].m_Name&#x3D;name; &#x2F;&#x2F;性别 cout&lt;&lt;“请输入性别：(1—男、2—女)”&lt;&lt;endl; **int** sex&#x3D;0; **while**(**true**)&#123; &#x2F;&#x2F;如果输入的是1或者2，可以退出循环，因为输入的是正确的值；如果输入有误，重新输入 cin&gt;&gt;sex; **if**(sex &#x3D;&#x3D; 1 || sex &#x3D;&#x3D; 2)&#123; abs-&gt;personArray[abs-&gt;m_Size].m_Sex&#x3D;sex; **break**; &#125; Cout&lt;&lt;“输入有误，请重新输入！”&lt;&lt;endl; &#125; &#x2F;&#x2F;年龄 cout&lt;&lt;“请输入年龄：(0~200)”&lt;&lt;endl; **int** age&#x3D;0; **while**(**true**)&#123; cin&gt;&gt;age; **if**(age &gt;&#x3D; 0 &amp;&amp; age &lt;&#x3D; 200)&#123; abs-&gt;personArray[abs-&gt;m_Size].m_Age&#x3D;age; **break**; &#125; Cout&lt;&lt;“输入有误，请重新输入！”&lt;&lt;endl; &#125; &#x2F;&#x2F;电话 cout&lt;&lt;“请输入联系电话：”&lt;&lt;endl; string phone; cin&gt;&gt;phone; abs-&gt;personArray[abs-&gt;m_Size].m_Phone&#x3D;phone; &#x2F;&#x2F;住址 cout&lt;&lt;“请输入家庭住址：”&lt;&lt;endl; string address; cin&gt;&gt;address; abs-&gt;personArray[abs-&gt;m_Size].m_Addr&#x3D;address; &#x2F;&#x2F;更新通讯录的人数 abs-&gt;m_Size++; cout&lt;&lt;“添加成功！”&lt;&lt;endl; &#x2F;&#x2F;system(“pause”); &#x2F;&#x2F;请按任意键继续 &#x2F;&#x2F;system(“cls”); &#x2F;&#x2F;清屏操作 &#125;&#125;&#x2F;&#x2F;4-显示所有联系人**void** showPerson(Addressbooks *abs)&#123; &#x2F;&#x2F;判断通讯录中人数是否为0.如果为0，提示记录为空；如果不为0，显示记录的联系人信息 **if**(abs-&gt;m_Size &#x3D;&#x3D; 0)&#123; cout&lt;&lt;“当前记录为空！”&lt;&lt;endl; &#125; **else**&#123; **for**(**int** I&#x3D;0;i&lt;abs-&gt;m_Size;i++)&#123; cout&lt;&lt;“姓名：”&lt;&lt;abs-&gt;personArray[I].m_Name&lt;&lt;“\\t”; cout&lt;&lt;“性别：”&lt;&lt;(abs-&gt;personArray[I].m_Sex &#x3D;&#x3D; 1 ? “男”: “女”)&lt;&lt;“\\t”; cout&lt;&lt;“年龄：”&lt;&lt;abs-&gt;personArray[I].m_Age&lt;&lt;“\\t”; cout&lt;&lt;“电话：”&lt;&lt;abs-&gt;personArray[I].m_Phone&lt;&lt;“\\t”; cout&lt;&lt;“住址：”&lt;&lt;abs-&gt;personArray[I].m_Addr&lt;&lt;endl; &#125; &#125; &#x2F;&#x2F;system(“pause”); &#x2F;&#x2F;请按任意键继续 &#x2F;&#x2F;system(“cls”); &#x2F;&#x2F;清屏操作&#125;&#x2F;&#x2F;5-检测联系人是否存在，如果存在返回联系人所在数组中的具体位置，不存在返回-1**int** isExist(Addressbooks *abs,string name)&#123; **for**(**int** I&#x3D;0;i&lt;abs-&gt;m_Size;i++)&#123; &#x2F;&#x2F;找到用户输入的姓名了 **if**(abs-&gt;personArray[I].m_Name &#x3D;&#x3D; name)&#123; **return** I; &#125; &#125; **return** -1;&#125;&#x2F;&#x2F;5-删除指定的联系人**void** deletePerson(Addressbooks *abs)&#123; Cout&lt;&lt;“请输入您要删除的联系人：”&lt;&lt;endl; string name; cin&gt;&gt;name; &#x2F;&#x2F;ret &#x3D;&#x3D; -1 未查到；ret !&#x3D; -1 已查到 **int** ret &#x3D;isExist(abs,name); **if**(ret !&#x3D; -1)&#123; &#x2F;&#x2F;查找到此人，要进行删除操作 **for**(**int** I&#x3D;ret;i&lt;abs-&gt;m_Size;i++)&#123; &#x2F;&#x2F;数据前移 abs-&gt;personArray[I]&#x3D;abs-&gt;personArray[I+1]; &#125; Abs-&gt;m_Size—; &#x2F;&#x2F;更新通讯录中的人员数 cout&lt;&lt;“删除成功！”&lt;&lt;endl; &#125; **else**&#123; cout&lt;&lt;“查无此人！”&lt;&lt;endl; &#125; &#x2F;&#x2F;system(“pause”); &#x2F;&#x2F;请按任意键继续 &#x2F;&#x2F;system(“cls”); &#x2F;&#x2F;清屏操作&#125;&#x2F;&#x2F;6-查找指定联系人的信息**void** findPerson(Addressbooks *abs)&#123; Cout&lt;&lt;“请输入您要查找的联系人：”&lt;&lt;endl; string name; cin&gt;&gt;name; &#x2F;&#x2F;判断指定的联系人是否在通讯录中 **int** ret&#x3D;isExist(abs, name); &#x2F;&#x2F;找到联系人 **if**(ret !&#x3D; -1)&#123; cout&lt;&lt;“姓名：”&lt;&lt;abs-&gt;personArray[ret].m_Name&lt;&lt;“\\t”; cout&lt;&lt;“性别：”&lt;&lt;(abs-&gt;personArray[ret].m_Sex &#x3D;&#x3D; 1 ? “男”: “女”)&lt;&lt;“\\t”; cout&lt;&lt;“年龄：”&lt;&lt;abs-&gt;personArray[ret].m_Age&lt;&lt;“\\t”; cout&lt;&lt;“电话：”&lt;&lt;abs-&gt;personArray[ret].m_Phone&lt;&lt;“\\t”; cout&lt;&lt;“住址：”&lt;&lt;abs-&gt;personArray[ret].m_Addr&lt;&lt;endl; &#125; &#x2F;&#x2F;未找到联系人 **else**&#123; cout&lt;&lt;“查无此人！”&lt;&lt;endl; &#125; &#x2F;&#x2F;system(“pause”); &#x2F;&#x2F;请按任意键继续 &#x2F;&#x2F;system(“cls”); &#x2F;&#x2F;清屏操作&#125;&#x2F;&#x2F;7-修改指定联系人的信息**void** modifyPerson(Addressbooks *abs)&#123; Cout&lt;&lt;“请输入您要修改的联系人：”&lt;&lt;endl; string name; cin&gt;&gt;name; **int** ret &#x3D; isExist(abs, name); **if**(ret !&#x3D; -1)&#123; &#x2F;&#x2F;姓名 string name; cout&lt;&lt;“请输入姓名：”&lt;&lt;endl; cin&gt;&gt;name; abs-&gt;personArray[ret].m_Name&#x3D;name; &#x2F;&#x2F;性别 cout&lt;&lt;“请输入性别：(1—男、2—女)”&lt;&lt;endl; **int** sex&#x3D;0; **while**(**true**)&#123; cin&gt;&gt;sex; **if**(sex &#x3D;&#x3D; 1 || sex &#x3D;&#x3D; 2)&#123; abs-&gt;personArray[ret].m_Sex&#x3D;sex; **break**; &#125; Cout&lt;&lt;“输入有误，请重新输入！”&lt;&lt;endl; &#125; &#x2F;&#x2F;年龄 cout&lt;&lt;“请输入年龄：(0~200)”&lt;&lt;endl; **int** age&#x3D;0; **while**(**true**)&#123; cin&gt;&gt;age; **if**(age &gt;&#x3D; 0 &amp;&amp; age &lt;&#x3D; 200)&#123; abs-&gt;personArray[ret].m_Age&#x3D;age; **break**; &#125; Cout&lt;&lt;“输入有误，请重新输入！”&lt;&lt;endl; &#125; &#x2F;&#x2F;电话 cout&lt;&lt;“请输入联系电话：”&lt;&lt;endl; string phone; cin&gt;&gt;phone; abs-&gt;personArray[ret].m_Phone&#x3D;phone; &#x2F;&#x2F;地址 cout&lt;&lt;“请输入家庭住址：”&lt;&lt;endl; string address; cin&gt;&gt;address; abs-&gt;personArray[ret].m_Addr&#x3D;address; cout&lt;&lt;“修改成功！”&lt;&lt;endl; &#125; **else**&#123; cout&lt;&lt;“查无此人！”&lt;&lt;endl; &#125; &#x2F;&#x2F;system(“pause”); &#x2F;&#x2F;请按任意键继续 &#x2F;&#x2F;system(“cls”); &#x2F;&#x2F;清屏操作&#125;&#x2F;&#x2F;8-清空所有联系人&#x2F;&#x2F;将通讯录所有联系人信息清除掉，只要将通讯录记录的联系人数量置于0，做逻辑清空即可**void** cleanPerson(Addressbooks *abs)&#123; abs-&gt;m_Size&#x3D;0; cout&lt;&lt;“通讯录已清空！”&lt;&lt;endl; &#x2F;&#x2F;system(“pause”); &#x2F;&#x2F;请按任意键继续 &#x2F;&#x2F;system(“cls”); &#x2F;&#x2F;清屏操作&#125;**int** main(**int** argc, **const** **char** * argv[]) &#123; &#x2F;&#x2F; insert code here… &#x2F;&#x2F;创建用户选择输入的变量 **int** select&#x3D;0; &#x2F;&#x2F;3-创建通讯录结构体变量 Addressbooks abs; &#x2F;&#x2F;3-初始化通讯录中当前人员个数 abs.m_Size&#x3D;0; **while**(**true**)&#123; &#x2F;&#x2F;1-调用显示菜单界面的函数 showMenu(); cin&gt;&gt;select; **switch**(select)&#123; &#x2F;&#x2F;添加联系人 **case** 1: addPerson(&amp;abs); &#x2F;&#x2F;利用地址传递，可以修饰实参 **break**; &#x2F;&#x2F;显示联系人 **case** 2: showPerson(&amp;abs); **break**; &#x2F;&#x2F;删除联系人 **case** 3: &#x2F;* &#x2F;&#x2F;case中如果代码很长会报错，这个时候可以加一个大括号，代表一个代码段 &#123; Cout&lt;&lt;“请输入要删除联系人的姓名：”&lt;&lt;endl; string name; cin&gt;&gt;name; if(isExist(&amp;abs, name) &#x3D;&#x3D; -1)&#123; Cout&lt;&lt;“查无此人！”; &#125; else&#123; Cout&lt;&lt;“找到此人！”; &#125; &#125; *&#x2F; deletePerson(&amp;abs); **break**; &#x2F;&#x2F;查找联系人 **case** 4: findPerson(&amp;abs); **break**; &#x2F;&#x2F;修改联系人 **case** 5: modifyPerson(&amp;abs); **break**; &#x2F;&#x2F;清空联系人 **case** 6: cleanPerson(&amp;abs); **break**; &#x2F;&#x2F;2-退出通讯录 **case** 0: cout&lt;&lt;“欢迎下次使用”&lt;&lt;endl; &#x2F;&#x2F;system(“pause”); **return** 0; **break**; **default**: **break**; &#125; &#125; &#x2F;&#x2F;system(“pause”); **return** 0;&#125;","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"程序的内存分区模型：","slug":"开发语言/C++/程序的内存分区模型：","date":"2019-06-23T16:00:00.000Z","updated":"2021-05-20T14:38:01.929Z","comments":true,"path":"2019/06/24/开发语言/C++/程序的内存分区模型：/","link":"","permalink":"http://example.com/2019/06/24/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%86%85%E5%AD%98%E5%88%86%E5%8C%BA%E6%A8%A1%E5%9E%8B%EF%BC%9A/","excerpt":"","text":"C++程序在执行时，将内存大方向划分为4个区域1）代码区：存放函数体的二进制代码，由操作系统进行管理2）全局区：存放全局变量和静态变量以及常量【静态变量：static int s_a=10;】【常量分为字符串常量和const修饰的全局变量】3）栈区：由编译器自动分配释放，存放函数的参数值，局部变量和const修饰的局部变量等4）堆区：由程序员分配和释放，若程序不释放，程序结束时由操作系统回收 内存四区的意义：不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程 程序运行前：在程序编译后，生成了exe可执行程序，未执行该程序前分为两个区域：1）代码区：存放CPU执行的机器指令；代码区是共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可；代码区是只读的，使其只读的原因是防止程序意外的修改了它的指令2）全局区：全局变量和静态变量存放在此；全局区还包含了常量区，字符串常量和其他常量也存放在此；该区域的数据在程序结束后由操作系统释放 程序运行后：1）栈区：由编译器自动分配释放，存放函数的参数值，局部变量等；不要返回局部变量的地址，栈区开辟的数据由编译器自动释放 第一次可以打印正确的数字，是因为编译器做了保留；第二次这个数据就不再保留了：2）堆区：在C++中主要利用new在堆区开辟内存，释放利用操作符delete【利用new创建的数据，会返回该数据对应的类型的指针】 在堆区创建数组：int * arr = new int[10];释放堆区数组：delete[] arr;","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"C++中的引用：","slug":"开发语言/C++/C++中的引用：","date":"2019-06-22T16:00:00.000Z","updated":"2021-05-20T14:37:48.834Z","comments":true,"path":"2019/06/23/开发语言/C++/C++中的引用：/","link":"","permalink":"http://example.com/2019/06/23/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/C++%E4%B8%AD%E7%9A%84%E5%BC%95%E7%94%A8%EF%BC%9A/","excerpt":"","text":"作用：给变量起别名 引用注意事项：1）引用必须初始化2）引用在初始化后，不可以改变 引用做函数参数：函数传参时，可以利用引用的技术让形参修饰实参，可以简化指针修改实参 引用做函数返回值：不要返回局部变量引用；函数的调用可以作为左值 引用的本质：在C++内部实现是一个指针常量 常量引用：常量引用主要用来修饰形参，防止误操作，在函数形参列表中，可以加const修饰形参，防止形参改变实参","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"函数高级：","slug":"开发语言/C++/函数高级：","date":"2019-06-21T16:00:00.000Z","updated":"2021-05-20T14:37:31.988Z","comments":true,"path":"2019/06/22/开发语言/C++/函数高级：/","link":"","permalink":"http://example.com/2019/06/22/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/%E5%87%BD%E6%95%B0%E9%AB%98%E7%BA%A7%EF%BC%9A/","excerpt":"","text":"函数默认参数：在C++中，函数的形参列表中的形参是可以有默认值的 函数占位参数：C++中函数的形参列表里可以有占位参数，用来做占位，调用函数时必须填补该位置 函数重载：函数名可以相同，提高复用性 函数重载满足条件：1）同一个作用域下2）函数名称相同3）函数参数类型不同或者个数不同或者顺序不同 注意：函数的返回值不可以作为重载的条件 函数重载的注意事项：","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"封装：","slug":"开发语言/C++/封装：","date":"2019-06-20T16:00:00.000Z","updated":"2021-05-20T14:37:18.503Z","comments":true,"path":"2019/06/21/开发语言/C++/封装：/","link":"","permalink":"http://example.com/2019/06/21/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/%E5%B0%81%E8%A3%85%EF%BC%9A/","excerpt":"","text":"C++面向对象的三大特征：封装、继承、多态 C++认为万事万物皆为对象，对象上有其属性和行为 封装的意义：1）将属性和行为作为一个整体，表现生活中的事物2）将属性和行为加以权限控制【public：公共权限(类内可以访问，类外可以访问)、protected：保护权限(类内可以访问，类外不可以访问)、private：私有权限(类内可以访问，类外不可以访问)】 Struct和class的区别（都可以表示一个类）：1）struct默认权限为公共2）class默认权限为私有 将成员属性设置为私有的优点：1）可以自己控制读写权限【提供一个public接口让外界访问】2）对于写权限，我们可以检测数据的有效性","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"对象的初始化和清理：","slug":"开发语言/C++/对象的初始化和清理：","date":"2019-06-19T16:00:00.000Z","updated":"2021-05-20T14:37:04.969Z","comments":true,"path":"2019/06/20/开发语言/C++/对象的初始化和清理：/","link":"","permalink":"http://example.com/2019/06/20/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%92%8C%E6%B8%85%E7%90%86%EF%BC%9A/","excerpt":"","text":"—————1、构造函数和析构函数： C++中的面向对象来源于生活，每个对象也都会有初始设置以及对象销毁前的清理数据的设置 构造函数和析构函数：对象的初始化和清理是两个非常重要的安全问题，一个对象或者变量没有初始状态，对其使用后果是未知的，同样的使用完一个对象或变量没有及时清理，也会造成一定的安全问题；C++利用了构造函数和析构函数解决上述问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作； 对象的初始化和清理工作是编译器强制要我们做的事情，因此如果我们不提供构造和析构，编译器会提供；但是编译器提供的构造函数和析构函数是空实现 构造函数：主要作用于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用析构函数：主要作用在对象销毁前系统自动调用，执行一些清理工作 构造函数语法：类名(){}1）构造函数没有返回值也不写void2）函数名称与类名相同3）构造函数可以有参数，因此可以发生重载4）程序在调用对象时会自动调用构造，无须手动调用，而且只会调用一次 析构函数语法：～类名(){}1）析构函数没有返回值也不写void2）函数名称与类名相同，在名称前加上符号～3）析构函数不可以有参数，因此不可以发生重载4）程序在对象销毁前会自动调用析构，无须手动调用，而且只会调用一次 ——————————2、构造函数的分类及调用： 两种分类方式：1）按参数分类：有参构造和无参构造2）按类型分类：普通构造和拷贝构造 三种调用方式：括号法、显示法、隐式转换法 ——————3、拷贝构造函数调用时机： C++中拷贝构造函数调用时机通常有三种情况：1）使用一个已经创建完毕的对象来初始化一个新对象2）值传递的方式给函数参数传值3）以值方式返回局部对象—————————4、构造函数调用规则： 默认情况下，C++编译器至少给一个类添加三个函数：1）默认构造函数（无参，函数体为空）2）默认析构函数（无参，函数体为空）3）默认拷贝构造函数，对属性进行值拷贝 构造函数调用规则：1）如果用户定义有参构造函数，C++不再提供默认无参构造函数，但是会提供默认拷贝构造2）如果用户定义拷贝构造函数，C++不会再提供其他构造函数 —————————5、深拷贝与浅拷贝 浅拷贝：简单的赋值拷贝操作深拷贝：在堆区重新申请空间，进行拷贝操作—————————6、初始化列表： C++提供了初始化列表语法，用来初始化属性 ———————————7、类对象作为类成员 C++类中的成员可以是另一个类的对象，我们称该成员为对象成员 ————8、静态成员 静态成员就是在成员变量和成员函数前加上关键字static，称为静态成员 静态成员分为：1）静态成员变量：所有对象共享同一份数据，在编译阶段分配内存，类内声明，类外初始化2）静态成员函数：所有对象共享同一个函数，静态成员函数只能访问静态成员变量","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"C++对象模型和this指针：","slug":"开发语言/C++/C++对象模型和this指针：","date":"2019-06-18T16:00:00.000Z","updated":"2021-05-20T14:36:50.254Z","comments":true,"path":"2019/06/19/开发语言/C++/C++对象模型和this指针：/","link":"","permalink":"http://example.com/2019/06/19/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/C++%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B%E5%92%8Cthis%E6%8C%87%E9%92%88%EF%BC%9A/","excerpt":"","text":"——————成员变量和成员函数分开存储： 在C++中，类内的成员变量和成员函数分开存储 只有非静态成员变量才属于类的对象上 —————————this指针： 每一个非静态成员函数只会诞生一份函数实例，也就是说多个同类型的对象会共用一块代码，那么这一块代码是如何区分哪个对象调用自己的呢？ C++通过提供特殊的对象指针，this指针，解决上述问题，this指针指向被调用的成员函数所属的对象 This指针是隐含每一个非静态成员函数内的一种指针，不需要定义，直接使用即可 This指针的用途：1）当形参和成员变量同名时，可用this指针来区分2）在类的非静态成员函数中返回对象本身，可使用return *this； ———————————空指针访问成员函数： C++中空指针也是可以调用成员函数的，但是也要注意有没有用到this指针 如果用到this指针，需要加以判断保证代码的健壮性 ——————————const修饰成员函数： 常函数：成员函数后加const后我们称这个函数为常函数；常函数内不可以修改成员属性；成员属性声明时加关键字mutable后，在常函数中依然可以修改 常对象：声明对象前加const称该对象为常对象，常对象只能调用常函数","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"友元：","slug":"开发语言/C++/友元：","date":"2019-06-17T16:00:00.000Z","updated":"2021-05-20T14:36:36.953Z","comments":true,"path":"2019/06/18/开发语言/C++/友元：/","link":"","permalink":"http://example.com/2019/06/18/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/%E5%8F%8B%E5%85%83%EF%BC%9A/","excerpt":"","text":"在程序里，有些私有属性也想让类外特殊的一些函数或者类进行访问，就需要用到友元的技术 友元的目的就是让一个函数或者类访问另一个类中的私有成员，友元的关键字为friend 友元的三种实现：1）全局函数做友元2）类做友元3）成员函数做友元 全局函数做友元： 友元类（类做友元）： 成员函数做友元【为啥顺序不能变？？】： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;iostream&gt;**using** **namespace** std;**class** Building;**class** goodGay&#123; **public**: Building *building; &#x2F;&#x2F;可访问Building中的私有成员 **void** visit(); &#x2F;&#x2F;不可访问Building中的私有成员 **void** visit1(); goodGay(); &#125;;**class** Building&#123; **friend** **void** goodGay::visit();&#x2F;&#x2F;表示goodGay类中的成员函数visit()作为本类的好朋友 **public**: Building()&#123; SittingRoom &#x3D; “客厅”; BedRoom &#x3D; “卧室”; &#125; **public**: string SittingRoom; **private**: string BedRoom; &#125;;goodGay::goodGay()&#123; building &#x3D; **new** Building;&#125;**void** goodGay::visit()&#123; cout&lt;&lt;“visit函数正在访问：”&lt;&lt;building-&gt;SittingRoom&lt;&lt;endl; cout&lt;&lt;“visit函数正在访问：”&lt;&lt;building-&gt;BedRoom&lt;&lt;endl;&#125;**void** goodGay::visit1()&#123; cout&lt;&lt;“visit2函数正在访问：”&lt;&lt;building-&gt;SittingRoom&lt;&lt;endl; &#x2F;&#x2F;cout&lt;&lt;“visit函数正在访问：”&lt;&lt;building-&gt;BedRoom&lt;&lt;endl;&#125;**int** main()&#123; goodGay gg; gg.visit(); gg.visit1();&#125;","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"C++运算符重载：","slug":"开发语言/C++/C++运算符重载：","date":"2019-06-16T16:00:00.000Z","updated":"2021-05-20T14:36:23.818Z","comments":true,"path":"2019/06/17/开发语言/C++/C++运算符重载：/","link":"","permalink":"http://example.com/2019/06/17/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/C++%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD%EF%BC%9A/","excerpt":"","text":"运算符重载：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型 加号运算符重载：实现两个自定义数据类型相加的计算【对于内置的数据类型的表达式的运算符是不可能改变的；不要滥用运算符重载】 左移运算符重载：可以输出自定义数据类型 递增运算符重载：通过重载递增运算符，实现自己的整型数据 赋值运算符重载： C++编译器至少给一个类添加4个函数：1）默认构造函数（无参，函数体为空）2）默认析构函数（无参，函数体为空）3）默认拷贝构造函数，对属性进行值拷贝4）赋值运算符operator=，对属性进行值拷贝 如果类中有属性指向堆区，做赋值操作时也会出现深浅拷贝问题 关系运算符重载：重载关系运算符，可以让两个自定义类型对象进行对比操作 函数调用运算符()重载：由于重载后使用的方式非常像函数的调用，因此称为仿函数；仿函数没有固定的写法，非常灵活","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"继承：","slug":"开发语言/C++/继承：","date":"2019-06-15T16:00:00.000Z","updated":"2021-05-20T14:36:10.536Z","comments":true,"path":"2019/06/16/开发语言/C++/继承：/","link":"","permalink":"http://example.com/2019/06/16/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/%E7%BB%A7%E6%89%BF%EF%BC%9A/","excerpt":"","text":"继承是面向对象三大特性之一 定义某些类时，下级别的成员除了拥有上一级的共性，还有自己的特性，这个时候我们就可以考虑利用继承的技术，减少重复代码 继承方式：公共继承、保护继承、私有继承 继承中的对象模型： 继承中的构造和析构顺序：子类继承父类后，当创建子类对象，也会调用父类的构造函数；先构造父类，再构造子类，析构的顺序与构造的顺序相反 继承同名成员处理方式： 当子类与父类出现同名的成员，如何通过子类对象访问到子类或者父类中同名的数据呢？1）访问子类同名成员，直接访问即可2）访问父类同名成员，需要加作用域 继承同名静态成员处理方式：静态成员和非静态成员出现同名，处理方式一致；访问子类同名成员，直接访问即可；访问父类同名成员，需要加作用域 多继承：C++允许一个类继承多个类，多继承可能会引发父类中有同名成员出现，需要加作用域区分；C++实际开发中不建议用多继承class Son:public Base1,public Base2 菱形继承：两个派生类继承同一个基类，又有某个类同时继承着两个派生类，这种继承被称为菱形继承，或者钻石继承 出现的问题：1）羊继承了动物的数据，驼同样继承了动物的数据，当羊驼使用数据时，就会产生二义性2）羊驼继承自动物的数据继承了两份，但是这份数据我们只需要一份就可以","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"多态：","slug":"开发语言/C++/多态：","date":"2019-06-14T16:00:00.000Z","updated":"2021-05-20T14:35:50.336Z","comments":true,"path":"2019/06/15/开发语言/C++/多态：/","link":"","permalink":"http://example.com/2019/06/15/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/%E5%A4%9A%E6%80%81%EF%BC%9A/","excerpt":"","text":"多态是C++面向对象三大特性之一 多态分为两类：1）静态多态：函数重载和运算符重载属于静态多态，复用函数名2）动态多态：派生类和虚函数实现运行时多态 静态多态和动态多态的区别：1）静态多态的函数地址早绑定，编译阶段确定函数地址2）动态多态的函数地址晚绑定，运行阶段确定函数地址 多态的底层原理： 分别利用普通写法和多态技术，设计实现两个操作数进行运算的计算器类： 多态的优点：代码组织结构清晰、可读性强、利于前期和后期的扩展以及维护 纯虚函数和抽象类：在多态中，通常父类中虚函数的实现是毫无意义的，主要都是调用子类重写的内容，因此可以将虚函数改为纯虚函数，当类中有了纯虚函数，这个类也称为抽象类 抽象类特点：1）无法实例化对象2）子类必须重写抽象类中的纯虚函数，否则也属于抽象类 虚析构和纯虚析构： 多态使用时，如果子类中有属性开辟到堆区，那么父类指针在释放时无法调用到子类的析构代码 解决方式：将父类中的析构函数改为虚析构或者纯虚析构 虚析构和纯虚析构共性：1）可以解决父类指针释放子类对象2）都需要有具体的函数实现 虚析构和纯虚析构的区别：如果是纯虚析构，该类属于抽象类，无法实例化对象","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"C++文件操作：","slug":"开发语言/C++/C++文件操作：","date":"2019-06-13T16:00:00.000Z","updated":"2021-05-20T14:35:37.187Z","comments":true,"path":"2019/06/14/开发语言/C++/C++文件操作：/","link":"","permalink":"http://example.com/2019/06/14/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/C++%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C%EF%BC%9A/","excerpt":"","text":"程序运行时产生的数据都属于临时数据，程序一旦运行结束都会被释放，通过文件可以将数据持久化 C++中对文件操作需要包含头文件 文件类型分为两种：1）文本文件：文件以文本的ASCII码形式存储在计算机中2）二进制文件：文件以文本的二进制形式存储在计算机中，用户一般不能直接读懂它们 操作文件的三大类：1）ofstream：写操作2）ifstream：读操作3）fstream：读写操作 文本文件： 写文件的步骤：1）包含头文件：#include2）创建流对象：ofstream ofs;3）打开文件：ofs.open(“文件路径”,打开方式);4）写数据：ofs&lt;&lt;“写入的数据”;5）关闭文件：ofs.close(); 文件打开方式【文件打开方式可以配合使用，利用|操作符】：1）ios::in 为读文件而打开文件2）ios::out 为写文件而打开文件3）ios::ate 初始位置：文件尾4）ios::app 追加方式写文件5）ios::trunc 如果文件存在先删除，再创建6）iOS::binary 二进制方式 读文件的步骤：1）包含头文件：#include2）创建流对象：ifstream ifs;3）打开文件并判断文件是否打开成功：ifs.open(“文件路径”,打开方式);4）读数据：四种方式读取5）关闭文件：ifs.close(); 二进制文件：以二进制的方式对文件进行读写操作，打开方式要指定为ios::binary 二进制方式写文件主要利用流对象调用成员函数write函数原型：ostream&amp; write(const char * buffer,int len);参数解释：字符指针buffer指向内存中的一段存储空间，len是读写的字节数 二进制方式读文件主要利用流对象调用成员函数read函数原型：istream&amp; read(char *buffer,int len);参数解释：字符指针buffer指向内存中的一段存储空间，len是读写的字节数","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"职工管理系统：","slug":"开发语言/C++/职工管理系统：","date":"2019-06-12T16:00:00.000Z","updated":"2021-05-20T14:35:23.418Z","comments":true,"path":"2019/06/13/开发语言/C++/职工管理系统：/","link":"","permalink":"http://example.com/2019/06/13/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/%E8%81%8C%E5%B7%A5%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%9A/","excerpt":"","text":"","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"函数模板：","slug":"开发语言/C++/函数模板：","date":"2019-06-11T16:00:00.000Z","updated":"2021-05-20T14:35:06.736Z","comments":true,"path":"2019/06/12/开发语言/C++/函数模板：/","link":"","permalink":"http://example.com/2019/06/12/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%EF%BC%9A/","excerpt":"","text":"模板就是建立通用的模具，大大提高复用性 模板的特点：模板不可以直接使用，它只是一个框架；模板的通用并不是万能的 ———————————————函数模板： C++另一种编程思想称为泛型编程，主要利用的技术就是模板 C++提供两种模板机制：函数模板和类模板 函数模板的作用：建立一个通用函数，其函数返回值类型和形参类型可以不具体制定，用一个虚拟的类型来代表 函数模板注意事项：1）自动类型推导，必须推导出一致的数据类型T才可以使用2）模板必须要确定出T的数据类型，才可以使用 普通函数与函数模板的区别：1）普通函数调用时可以发生自动类型转换（隐式类型转换）2）函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换；如果利用显式指定类型的方式，可以发生隐式类型转换 建议使用显示指定类型的方式，调用函数模板，因为可以自己确定通用类型T 普通函数与函数模板的调用规则：1）如果函数模板和普通函数都可以实现，优先调用普通函数2）可以通过空模板参数列表来强制调用函数模板3）函数模板也可以发生重载4）如果函数模板可以产生更好的匹配，优先调用函数模板 模板的局限性：模板的通用性并不是万能的 因此C++为了解决这种问题，提供模板的重载，可以为这些特定的类型提供具体化的模板","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"类模板：","slug":"开发语言/C++/类模板：","date":"2019-06-10T16:00:00.000Z","updated":"2021-05-20T14:34:51.985Z","comments":true,"path":"2019/06/11/开发语言/C++/类模板：/","link":"","permalink":"http://example.com/2019/06/11/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C++/%E7%B1%BB%E6%A8%A1%E6%9D%BF%EF%BC%9A/","excerpt":"","text":"","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"}]},{"title":"macOS的一些使用小技巧：","slug":"Apple、Linux/macOS、Ubuntu Server/macOS的一些使用小技巧：","date":"2018-11-29T16:00:00.000Z","updated":"2021-06-21T13:34:29.926Z","comments":true,"path":"2018/11/30/Apple、Linux/macOS、Ubuntu Server/macOS的一些使用小技巧：/","link":"","permalink":"http://example.com/2018/11/30/Apple%E3%80%81Linux/macOS%E3%80%81Ubuntu%20Server/macOS%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%9A/","excerpt":"","text":"在任意输入框中按option+shift+K组合键会显示苹果logo 文本编辑中按Fn+Delete键可向后删除内容 Finder+菜单栏中的前往+一直按住option，打开资源库 终端输入sudo spctl —master-disable命令打开【安全性与隐私】中的【任何来源】 隐藏和恢复桌面文件：隐藏桌面文件：defaults write com.apple.finder CreateDesktop -bool false;killall Finder恢复显示桌面文件：defaults write com.apple.finder CreateDesktop -bool true;killall Finder 快速调用emoji表情：control+command+空格 CheatSheet:长按command键可显示当前应用所有的快捷键 调整launchpad图标大小： 改行数：defaults write com.apple.dock springboard-rows -int 10改列数：defaults write com.apple.dock springboard-columns int 7killall Dock 恢复系统默认：defaults write com.apple.dock springboard-rows Defaultdefaults write com.apple.dock springboard-columns Defaultkillall Dock 移动文件：打开源文件夹和目标文件夹，拖拽源文件到目标文件夹拷贝文件：按住option，拖拽源文件到目标文件夹 全屏截图：command+shift+3截取部分屏幕：command+shift+4 回到桌面：command+F3","categories":[{"name":"Apple、Linux","slug":"Apple、Linux","permalink":"http://example.com/categories/Apple%E3%80%81Linux/"}],"tags":[{"name":"macOS、Ubuntu Server","slug":"macOS、Ubuntu-Server","permalink":"http://example.com/tags/macOS%E3%80%81Ubuntu-Server/"}]},{"title":"macOS终端ssh远程连接Ubuntu server：","slug":"Apple、Linux/macOS、Ubuntu Server/macOS终端ssh远程连接Ubuntu server：","date":"2018-11-28T16:00:00.000Z","updated":"2021-06-21T13:34:12.467Z","comments":true,"path":"2018/11/29/Apple、Linux/macOS、Ubuntu Server/macOS终端ssh远程连接Ubuntu server：/","link":"","permalink":"http://example.com/2018/11/29/Apple%E3%80%81Linux/macOS%E3%80%81Ubuntu%20Server/macOS%E7%BB%88%E7%AB%AFssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5Ubuntu%20server%EF%BC%9A/","excerpt":"","text":"原因： Ubuntu server虚拟机界面实在是不如Mac终端好操作 Linux下的命令与UNIX很多不一样，无法直接在macOS下学习Linux 步骤： Ubuntu系统默认安装了openssh-client，但没有安装openssh-server，先检查一下(ps -e | grep ssh) 安装openssh-server：sudo apt-get install openssh-server 如果出现sshd，代表安装成功【sudo /etc/init.d/ssh start启动服务】 ifconfig -a查看IP地址 ssh 用户名@IP地址","categories":[{"name":"Apple、Linux","slug":"Apple、Linux","permalink":"http://example.com/categories/Apple%E3%80%81Linux/"}],"tags":[{"name":"macOS、Ubuntu Server","slug":"macOS、Ubuntu-Server","permalink":"http://example.com/tags/macOS%E3%80%81Ubuntu-Server/"}]},{"title":"shell是什么：","slug":"Apple、Linux/《Linux命令行大全》/shell是什么：","date":"2018-10-30T16:00:00.000Z","updated":"2021-05-30T01:04:37.554Z","comments":true,"path":"2018/10/31/Apple、Linux/《Linux命令行大全》/shell是什么：/","link":"","permalink":"http://example.com/2018/10/31/Apple%E3%80%81Linux/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/shell%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9A/","excerpt":"","text":"date：显示当前系统的时间和日期 cal ：默认情况下显示当月的日历 df ：查看磁盘驱动器当前的可用空间 free ：显示可用内存 exit ：结束终端会话（或直接关闭终端窗口） （1）shell是一个接收由键盘输入的命令，并将其传递给操作系统来执行的程序 （2）当使用图形用户界面时，需要另一种叫做终端仿真器的程序与shell进行交互（KDE环境下使用的是konsole,GNOME环境下使用的是gnome-terminal,但是在桌面菜单上很可能将它们简单的统称为终端） （3）shell提示符：username@machinename,其后是当前工作目录(长度更长一些)和一个$符号；如果shell提示符的最后一个字符是#，而不是一个$符号，那么终端会话将享有超级用户特权 （4）命令历史记录：在默认情况下，大部分Linux发行版本能够存储最近输入的500个命令","categories":[{"name":"Apple、Linux","slug":"Apple、Linux","permalink":"http://example.com/categories/Apple%E3%80%81Linux/"}],"tags":[{"name":"《Linux命令行大全》","slug":"《Linux命令行大全》","permalink":"http://example.com/tags/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/"}]},{"title":"导航、Linux系统、操作文件与目录：","slug":"Apple、Linux/《Linux命令行大全》/导航、Linux系统、操作文件与目录：","date":"2018-10-29T16:00:00.000Z","updated":"2021-05-30T01:02:24.597Z","comments":true,"path":"2018/10/30/Apple、Linux/《Linux命令行大全》/导航、Linux系统、操作文件与目录：/","link":"","permalink":"http://example.com/2018/10/30/Apple%E3%80%81Linux/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/%E5%AF%BC%E8%88%AA%E3%80%81Linux%E7%B3%BB%E7%BB%9F%E3%80%81%E6%93%8D%E4%BD%9C%E6%96%87%E4%BB%B6%E4%B8%8E%E7%9B%AE%E5%BD%95%EF%BC%9A/","excerpt":"","text":"pwd(打印工作目录)：显示当前工作目录（第一次登录系统时或是启动终端仿真器会话时，当前工作目录被设置成主目录，每个用户账号都有一个主目录，作为普通用户操作时，这是唯一一个允许用户写文件的地方） ls：列出当前工作目录的文件和目录 通过ls命令可以查看目录内容，确定各种重要文件和目录的属性 ls 指定目录：列出指定要显示的目录 ls ~ /usr：列出用户主目录（由符号波浪线表示）和/usr目录的内容 ls -l：将输出以长格式显示 选项和参数：通常，命令后面跟有一个或多个选项，带有不同选项的命令其功能也不一样；此外，命令后面还会跟有一个或多个参数，这些参数是命令作用的对象【command -options arguments】 大部分命令使用的选项是在单个字符前加上连字符，如-l，但是很多命令，包括GNU项目里的命令，也支持在单字前加两个连字符的长选项，而且很多命令也允许多个短选项串在一起使用 ls命令包含了两个选项，l选项产生长格式输出，而t选项则表示以文件修改时间的先后将结果进行排序，加上长选项—reverse，则结果会以相反的顺序输出 ls命令的常用选项 下面的例子来自于Ubuntu系统：ls长列表字段： cd 目标工作目录的路径名：改变工作目录（即在文件系统树的位置） 路径名指的是沿着分枝到达目标目录的路由，路径名分为两种：绝对路径名和相对路径名 绝对路径名：从根目录开始，其后紧接着一个又一个文件树分支，直到到达目标目录或文件 /usr/bin:大多数系统程序都安装在这个目录里【根目录(在路径名中用前导斜杠来表示)中有一个目录是usr,该目录包含一个bin目录】 相对路径名：从工作目录开始，通常使用一些特殊符号来表示文件系统树中的相对位置（“.” ”..”）“.”代表当前工作目录“..”代表当前工作目录的父目录 我们希望把工作目录改变成/usr/bin的父目录/usr1）绝对路径名2）相对路径名 也可以把工作目录从/usr变到/usr/bin1）绝对路径名2）相对路径名 几乎在所有的情况下都可以省略“./”，因为它是隐含的，一般而言，如果没有指定路径名，则默认为工作目录 cd的一些快捷方式：1）cd：将当前工作目录改变为主目录2）cd -:将工作目录改变成先前的工作目录3）cd ~username：将工作目录改变为username的主目录 file filename：确定文件的类型 less filename：查看文本文件的内容，Q键退出less程序 less程序最常使用的键盘命令： 符号链接： 在浏览过程中，我们可能会看到带有如下条目的目录信息 该条目信息的第一个字母是l，而且看起来像是有两个文件名，这种特殊的文件叫做符号链接（又叫软链接或symlink） 假设，一个程序需要使用包含foo文件中的一个共享资源，但foo版本变化很频繁，这样，在文件名中包含版本号会是一个好主意，因此管理员或其他相关方就能够看到安装了foo的哪个版本，这就出现了一个问题，如果改变了共享资源的名称，就必须跟踪每个可能使用了该共享资源的程序，并且当安装了该资源新的版本后，都要让使用它的程序去寻找新的资源名 假设foo的安装版本是2.6，他的文件名是foo-2.6，然后创建一个符号链接foo指向foo-2.6，这意味着，当一个程序打开foo文件时，它实际上打开的是文件foo-2.6.这样一来皆大欢喜，依赖foo文件的程序能够找到它，并且也能看到实际安装的版本。当需要升级到foo-2.7时，只需将该文件添加到系统里，删除符号链接文件foo，创建一个指向新版本的符号链接即可，这不仅解决了版本升级的问题，也可以将两种版本都保存在机器里。假如foo-2.7存在一个程序错误需要切换到旧的版本，同样，只需要删除指向新版本的符号链接，重新创建指向旧版本的符号链接即可 硬链接：默认情况下，每个文件有一个硬链接，该硬链接会给文件起名字。当创建一个硬链接的时候，也为这个文件创建了一个额外的目录条目 硬链接和文件本身没有什么区别，与包含符号链接的目录列表不同，包含硬链接的目录列表没有特别的链接指示说明。当硬链接被删除时，只是删除了这个链接，但是文件本身的内容依然存在（也就是说，该空间没有释放），除非该文件的所有链接都被删除了 ln file link：创建硬链接 ln -s item link:创建符号链接，这里的item可以是文件也可以是目录 符号链接是通过创建一个特殊类型的文件来起作用的，该文件包含了指向引用文件或目录的文本指针 由于shell需要经常使用文件名，因此它提供了一些特殊字符来帮助你快速指定一组文件名，这些特殊字符称为通配符，通配符（也叫文件名替换）允许用户依据字符模式选择文件名通配符的使用使得为文件名构建复杂的筛选标准成为可能： mkdir dir1：创建单个dir1目录 mkdir dir1 dir2 dir3：创建3个目录 cp：复制文件和目录cp item1 item2：将单个文件或目录item1复制到文件或目录item2中cp item1 . :将item1复制到当前目录cp item… directory：将多个项目（文件或目录）复制进一个目录中 需要注意的是，在没有任何警告的情况下，cp命令会覆盖第一次的复制内容（命令一样的情况下） mv：文件移动和文件重命名（在这两种情况下，完成操作后，原来的文件名将不存在） mv item1 item2:将文件（或目录）item1移动（或重命名）为item2mv item… directory：将一个或多个条目从一个目录移动到另一个目录下 rm item… ：移除（删除）文件和目录 （1）与Windows相同，类UNIX操作系统（Linux）也是以称之为分层目录结构的方式来组织文件的，文件系统的第一个目录叫做根目录，它包含了文件和子目录，子目录里包含了更多的文件和子目录，依此类推 （2）在Windows系统中，每个存储设备都有一个独立的文件系统树。而在类UNIX系统中，无论多少驱动器或存储设备与计算机相连，通常只有一个文件系统树。根据系统管理员的设置，存储设备将会连接（挂载）到文件系统树的不同位置，系统管理员要负责系统的维护 （3）树通常是倒立显示的，顶部是根目录，依次向下排列的是子目录 （4）以“.”字符开头的文件名是隐藏的，这仅说明ls不会列出这些文件，除非输入ls -a,在创建用户账号时，主目录里会放置一些隐藏文件，用来配置账号信息，此外，一些应用程序也会将它们的配置文件和设置文件以隐藏文件的形式放在主目录下面 （5）与UNIX一样，在Linux中，文件名与命令是区分大小写的 （6）Linux没有文件扩展名的概念，我们可以按照自己的喜好随意给文件命名，文件的内容或用途由其他方式来决定 （7）Linux支持长文件名，但是在创建文件名的过程中，仅句号、连字符和下划线是可以使用的，文件名中不要嵌入空格，可以使用下划线 （8）在Linux系统中找到的目录： 实战演练：","categories":[{"name":"Apple、Linux","slug":"Apple、Linux","permalink":"http://example.com/categories/Apple%E3%80%81Linux/"}],"tags":[{"name":"《Linux命令行大全》","slug":"《Linux命令行大全》","permalink":"http://example.com/tags/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/"}]},{"title":"命令的使用：","slug":"Apple、Linux/《Linux命令行大全》/命令的使用：","date":"2018-10-28T16:00:00.000Z","updated":"2021-05-30T01:03:46.684Z","comments":true,"path":"2018/10/29/Apple、Linux/《Linux命令行大全》/命令的使用：/","link":"","permalink":"http://example.com/2018/10/29/Apple%E3%80%81Linux/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/%E5%91%BD%E4%BB%A4%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%9A/","excerpt":"","text":"type命令是一个shell内置命令，可根据指定的命令名显示shell将要执行的命令类型：type command which命令可以确定一个给定可执行文件的准确位置 which命令只适用于可执行程序，而不适用于内置命令和命令别名（真正可执行程序的替代物），试图在shell内置命令（例如cd）中使用which命令时，要么没响应，要么得到一条错误信息 bash为每一个shell内置命令提供了一个内置的帮助工具，输入help，然后输入shell内置命令的名称即可使用该帮助工具 注意：出现在命令语法描述中的方括号表示一个可选的选项，竖线符号代表的是两个互斥的选项，这种表示法说明，cd命令后可能有一个-L参数，也可能是-P参数，甚至可以跟参数dir –help选项描述了命令支持的语法和选项 大多数供命令行使用的可执行文件，提供一个称之为manual或者是man page的正式文档，该文档可以用一种称为man的特殊分页程序来查看：man program(这里的program是需要查看的命令名称) man ls: 在大多数Linux系统中，man命令调用less命令来显示手册文档 apropos: whatis程序显示匹配具体关键字的手册页的名字和一行描述 GNU项目提供了info页面来代替手册文档，info页面可通过info阅读器来显示，info页面使用超链接，这与网页结构很相似 info ls: 通过alias命令将以上命令整合成一条新的命令【给这条命令起了一个名字foo，现在foo就代表这条命令了】 unalias foo:删除别名 要查看在环境中定义的所有别名，可以使用不带参数的alias命令 在命令行定义别名还有一个小问题：当shell会话结束时，这些别名也随之消失了 命令行小技巧：通过使用分号来分隔多条命令，就可以将多条命令输入在一行之中","categories":[{"name":"Apple、Linux","slug":"Apple、Linux","permalink":"http://example.com/categories/Apple%E3%80%81Linux/"}],"tags":[{"name":"《Linux命令行大全》","slug":"《Linux命令行大全》","permalink":"http://example.com/tags/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/"}]},{"title":"重定向和管道：","slug":"Apple、Linux/《Linux命令行大全》/重定向和管道：","date":"2018-10-27T16:00:00.000Z","updated":"2021-05-30T01:04:24.201Z","comments":true,"path":"2018/10/28/Apple、Linux/《Linux命令行大全》/重定向和管道：/","link":"","permalink":"http://example.com/2018/10/28/Apple%E3%80%81Linux/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E7%AE%A1%E9%81%93%EF%BC%9A/","excerpt":"","text":"I/O是输入/输出(input/output)的缩写，I/O重定向可以把命令行的输入重定向为从文件中获取内容，也可以把命令行的输出结果重定向到文件中，如果我们将多个命令行关联起来，将形成非常强大的命令：管道 标准输出重定向：I/O重定向功能可以重新定义标准输出内容发送到哪里，使用重定向操作符“&gt;”，后面接文件名，就可以把标准输出重定向到另一个文件中，而不是显示在屏幕上，主要用于把命令的输出内容保存到一个文件中 标准错误重定向： 将标准输出和标准错误重定向到同一个文件:1）传统的方法，在旧版本的shell中使用2）在这个例子中，只使用一个标记符“&amp;&gt;”就把标准输出和标准错误都重定向到了文件中 处理不想要的输出：有时候沉默是金，命令执行后我们并不希望得到输出，而是想把这个输出丢弃，尤其是在输出错误和状态信息的情况下更为需要。系统提供了一种方法，即通过把输出重定向到一个称为/dev/null的特殊文件中来实现它，这个文件是一个称为位桶(bit bucket)的系统设备，它接受输入但是不对输入进行任何处理 标准输入重定向： cat file..：合并文件，读取一个或多个文件，并把它们复制到标准输出文件中 管道:命令从标准输入到读取数据，并将数据发送到标准输出的能力是使用了名为管道的shell特性，使用管道操作符“｜”可以把一个命令的标准输出传送到另一个命令的标准输入中 command | command【标准输出—&gt;标准输入】 通过使用该技术，可以很方便的检查任意一条生成标准输出的命令的运行结果 过滤器：管道功能经常用来对数据执行复杂的操作，也可以把多条命令合在一起构成一个管道，这种方式中用到的命令通常被称为过滤器(filter)，过滤器接受输入，按照某种方式对输入进行改变，然后再输出它 sort：假设要把/bin和/usr/bin目录下的所有可执行程序合并成一个列表，并且按照顺序排列，最后再查看这个列表 uniq：经常和sort命令结合使用，uniq可以接受来自于标准输入或者一个单一文件名参数对应的已排好序的数据列表，默认情况下，该命令删除列表中的所有重复行 wc(字数统计，word count)：用来显示文件中包含的行数、字数和字节数 grep：在文件中查找匹配文本 head/tail：打印文件的开头部分/结尾部分：head命令将输出文件的前10行，tail命令则输出文件的最后10行，可以通过-n选项来调整输出的行数 这些命令选项也可以应用在管道中： tee：读取标准输入，再把读到的内容复制到标准输出（允许数据可以继续向下传输到管道中）和一个或更多的文件中去【标准输入—&gt;标准输出】 在使用grep命令过滤管道内容之前，先使用tee命令来获取整个目录列表并输出到ls.txt文件中：","categories":[{"name":"Apple、Linux","slug":"Apple、Linux","permalink":"http://example.com/categories/Apple%E3%80%81Linux/"}],"tags":[{"name":"《Linux命令行大全》","slug":"《Linux命令行大全》","permalink":"http://example.com/tags/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/"}]},{"title":"扩展和引用：","slug":"Apple、Linux/《Linux命令行大全》/扩展和引用：","date":"2018-10-26T16:00:00.000Z","updated":"2021-05-30T01:03:33.089Z","comments":true,"path":"2018/10/27/Apple、Linux/《Linux命令行大全》/扩展和引用：/","link":"","permalink":"http://example.com/2018/10/27/Apple%E3%80%81Linux/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/%E6%89%A9%E5%B1%95%E5%92%8C%E5%BC%95%E7%94%A8%EF%BC%9A/","excerpt":"","text":"扩展：每次输入命令行按下Enter键时，bash都会在执行命令之前对文本进行多重处理，产生这个结果的处理过程称为扩展，有了扩展功能，在输入内容后，这些内容将在shell对其执行之前被扩展成其他内容 echo:shell内置命令，把文本参数内容打印到标准输出 路径名扩展：通过使用通配符来实现扩展的机制 波浪线扩展：如果把～用在一个单词的开头，那么它将被扩展为指定用户的主目录名，如果没有指定用户命名，则扩展为当前用户的主目录 算术扩展：shell支持通过扩展来运行算术表达式，这允许我们把shell提示符当作计算器来使用： 花括号扩展：可以按照花括号里面的模式创建多种文本字符串 参数扩展：命名为USER的变量包含你的用户名，为了触发参数扩展，并显示出USER的内容： 命令替换：可以把一个命令的输出作为一个扩展模式使用 引用： 在第一个例子中，shell会对echo命令的参数列表进行单词分割，去除多余的空白；在第二个例子中，因为$1是一个未定义的变量，所以参数扩展将把$1的值替换为空字符串 shell提供了一种称为引用（quoting）的机制，用来有选择性的避免不想要的扩展 双引号：在第一个例子中，没有加上引号的命令替换将导致命令行被识别为命令后面跟着38个参数；而在第二个例子中加了双引号，使得命令行被识别为命令后面只跟着一个参数，这个参数包含着嵌入空格和换行字符 单引号： 转义字符： 有时候我们只是想要引用单个字符，这种情况可以通过在该字符前加上反斜杠来实现，这里的反斜杠称为转义字符，转义字符经常在双引号中用来有选择性的阻止扩展： 转义字符也常用来消除文件名中某个字符的特殊含义，比如文件名中可以使用在shell中通常具有特殊含义的字符，这些字符包括“$”、“!”、“&amp;”、空格等 如果想要显示反斜杠字符，可以通过使用两个反斜杠“\\”来实现，需要注意的是，单引号中的反斜杠将失去它的特殊含义，而只被当成一个普通字符","categories":[{"name":"Apple、Linux","slug":"Apple、Linux","permalink":"http://example.com/categories/Apple%E3%80%81Linux/"}],"tags":[{"name":"《Linux命令行大全》","slug":"《Linux命令行大全》","permalink":"http://example.com/tags/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/"}]},{"title":"高级键盘技巧：","slug":"Apple、Linux/《Linux命令行大全》/高级键盘技巧：","date":"2018-10-25T16:00:00.000Z","updated":"2021-05-30T01:02:51.923Z","comments":true,"path":"2018/10/26/Apple、Linux/《Linux命令行大全》/高级键盘技巧：/","link":"","permalink":"http://example.com/2018/10/26/Apple%E3%80%81Linux/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/%E9%AB%98%E7%BA%A7%E9%94%AE%E7%9B%98%E6%8A%80%E5%B7%A7%EF%BC%9A/","excerpt":"","text":"光标移动： 修改文本： 剪切和粘贴文本： 自动补齐功能：在输入命令时，按Tab键将触发自动补齐功能 使用历史命令：bash会保存使用过命令的历史记录，这些命令的历史记录列表保存在用户主目录的.bash_history文件中 搜索历史命令： history | less：查看历史记录的内容列表 bash默认会保存用户最近使用过的500个命令，其中500是个默认值 找到用来列出/usr/bin目录下内容的命令： 历史记录扩展：","categories":[{"name":"Apple、Linux","slug":"Apple、Linux","permalink":"http://example.com/categories/Apple%E3%80%81Linux/"}],"tags":[{"name":"《Linux命令行大全》","slug":"《Linux命令行大全》","permalink":"http://example.com/tags/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/"}]},{"title":"权限：","slug":"Apple、Linux/《Linux命令行大全》/权限：","date":"2018-10-24T16:00:00.000Z","updated":"2021-05-30T01:03:58.742Z","comments":true,"path":"2018/10/25/Apple、Linux/《Linux命令行大全》/权限：/","link":"","permalink":"http://example.com/2018/10/25/Apple%E3%80%81Linux/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/%E6%9D%83%E9%99%90%EF%BC%9A/","excerpt":"","text":"传统的UNIX操作系统与那些传统的MS-DOS操作系统不同，区别在于它们不仅是多重任务处理系统，而且还是多用户系统,这意味着同一时间内可以有多个用户使用同一台计算机 id命令可以获得用户身份标识的相关信息 1）用户账户定义在文件/etc/passwd中，对于每一个用户账户，文件/etc/passwd中都定义了对应用户的用户（登录）名、uid、gid、账户的真实姓名、主目录以及登录shell信息2）用户组定义在文件/etc/group中，如果查看文件/etc/passwd和文件/etc/group的内容，可以发现除了普通用户账户信息之外，文件中还有对应于超级用户（uid为0）和其他不同种类的系统用户的账户信息3）在创建用户账户和群组时，这些文件随着文件/etc/shadow的变动而修改，文件/etc/shadow中保存了用户的密码信息 对文件和目录的访问权限是按照读访问、写访问以及执行访问来定义的： chmod：更改文件或者目录的模式（权限），只有文件所有者和超级用户才可以更改文件或者目录的模式1）八进制数字表示法：使用八进制数字来设置所期望的权限模式 通过使用3位八进制数字，我们可以分别设置文件所有者、组成员和其他所有用户的文件模式 2）符号表示法：分为三部分：更改会影响谁、要执行哪个操作、要设置哪种权限 umask命令控制着创建文件时指定给文件的默认权限，它使用八进制表示法来表示从文件模式属性中删除一个位掩码 有三种方法用来转换身份：1）注销系统并以其他用户的身份重新登录系统2）使用su命令3）使用sudo命令 在shell会话状态下，使用su命令将允许你假定为另一个用户的身份，既可以以这个用户的ID来启动一个新的shell会话，也可以以这个用户的身份来发布一个命令使用sudo命令将允许管理者创建一个称为/etc/sudoer的配置文件，并且定义一些特定的命令，这些命令只有被赋予为假定身份的特定用户才允许执行 su：以其他用户和组ID的身份来运行shell sudo：以另一个用户的身份执行命令 chown：更改文件或者目录的所有者和所属群组，需要超级用户的权限 chgrp：在更早的UNIX版本中，chown命令只能更改文件的所有者，而不能改变文件所属群组，为了达到这个目的，可以使用chgrp 实例： passwd：设置或者更改密码","categories":[{"name":"Apple、Linux","slug":"Apple、Linux","permalink":"http://example.com/categories/Apple%E3%80%81Linux/"}],"tags":[{"name":"《Linux命令行大全》","slug":"《Linux命令行大全》","permalink":"http://example.com/tags/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/"}]},{"title":"进程：","slug":"Apple、Linux/《Linux命令行大全》/进程：","date":"2018-10-23T16:00:00.000Z","updated":"2021-05-30T01:03:18.725Z","comments":true,"path":"2018/10/24/Apple、Linux/《Linux命令行大全》/进程：/","link":"","permalink":"http://example.com/2018/10/24/Apple%E3%80%81Linux/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/%E8%BF%9B%E7%A8%8B%EF%BC%9A/","excerpt":"","text":"现代操作系统通常都支持多重任务处理，多重任务处理是指系统通过快速切换运行中的程序来实现多任务的同时执行，Linux内核通过使用进程来管理多重任务，进程是Linux用来安排不同程序等待CPU调度的一种组织方式 进程如何工作：系统启动时，内核先把它的一些程序初始化为进程，然后运行一个称为init的程序，init程序将依次运行一系列称为脚本初始化的shell脚本(放在/etc目录下)，这些脚本将会启动所有的系统服务，其中的很多服务都是通过守护程序来实现的，而后台程序只是呆在后台做它们自己的事情，并且没有用户界面，因此，即使没有用户登录，系统也在忙于执行一些例行程序 一个程序的运行可以触发其他程序的运行，在进程系统中这种情况被表述为父进程创建子进程 内核会保存每个进程的信息以便确保任务有序进行，比如，每个进程将被分配一个称为进程ID(PID，process ID)的号码。进程ID是按递增的顺序来分配的，init进程的PID始终为1.内核也记录分配给每个进程的内存信息以及用来恢复运行的进程就绪信息。和文件系统类似，进程系统中也存在所有者、用户ID、有效用户ID等 ps命令：查看进程信息（默认情况下，ps命令输出的信息并不是很多，只是输出和当前终端会话相关的进程信息）1）TTY是teletype(电传打字机)的缩写，代表了进程的控制终端2）UNIX在这里也显示了进程的运行时间，TIME字段表示了进程消耗的CPU时间总和 添加x选项(注意这里没有前置的连字符)将告知ps命令显示所有的进程，而不需要关注它们是由哪个终端（如果有其他的情况）所控制的。TTY列中出现的“？”表示没有控制终端 这些进程状态的后面可以带其他的字符来表示不同的特殊进程特性 ps aux：将会显示属于每个用户的进程信息，使用这些选项时不带前置连字符将使得命令以“BSD模式(BSD-style)”运行。ps命令的Linux版本可以模拟多种UNIX版本中ps程序的运行方式： 虽然ps命令可以显示有关机器运行情况的很多信息，但是它提供的只是在ps命令被执行时刻机器状态的一个快照。要查看机器运行情况的动态视图，可以使用top命令 top程序将按照进程活动的顺序，以列表的形式持续更新显示系统进程的当前信息（默认每3秒更新一次），它主要用于查看系统“最高（top）”进程的运行情况，top命令显示的内容包含两个部分，顶部显示的是系统总体状态信息，下面显示的是一张按CPU活动时间排序的进程情况表 top程序可以接受许多键盘指令，其中最常用的有两个：一个是h，输入后将显示程序的帮助界面；另一个是q，用来退出top命令 主流的桌面环境都提供了用来显示类似top命令的输出信息的图形化应用程序，但是top命令优于图形化版本，这是因为top命令运行的更快，而且消耗的系统资源要少得多，毕竟，系统监控程序不应该减缓正在被监控的系统的处理速度 控制进程： 1）中断进程：在终端里按下Ctrl-C键将会中断一个程序，它意味着我们委婉的请求程序结束，许多（但不是所有）命令行程序都可以使用这种方法来实现中断 2）使进程在后台运行： 3）使进程回到前台运行： 4）停止（暂停）进程： 信号： kill命令通常用来“杀死”（终止）进程，它可以用来终止运行不正常的程序或者反过来拒绝终止的程序","categories":[{"name":"Apple、Linux","slug":"Apple、Linux","permalink":"http://example.com/categories/Apple%E3%80%81Linux/"}],"tags":[{"name":"《Linux命令行大全》","slug":"《Linux命令行大全》","permalink":"http://example.com/tags/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/"}]},{"title":"环境：","slug":"Apple、Linux/《Linux命令行大全》/环境：","date":"2018-10-22T16:00:00.000Z","updated":"2021-05-30T01:03:05.675Z","comments":true,"path":"2018/10/23/Apple、Linux/《Linux命令行大全》/环境：/","link":"","permalink":"http://example.com/2018/10/23/Apple%E3%80%81Linux/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/%E7%8E%AF%E5%A2%83%EF%BC%9A/","excerpt":"","text":"在shell会话调用环境期间，shell会存储大量的信息，程序使用存储在环境中的数据来确定我们的配置，尽管大多数系统程序使用配置文件来存储程序设置，但是也有一些程序会查找环境中存储的变量来调整自己的行为，用户可以使用环境来自定义shell 尽管shell在环境中存储了两种基本类型的数据，但是在bash中，这两种类型基本上没有区别。这两种数据类型分别是环境变量和shell变量。shell变量是由bash存放的少量数据，环境变量就是除此之外的所有其他变量。除变量之外，shell还存储了一些编程数据，也就是别名和shell函数 set命令会同时显示shell变量和环境变量，而printenv只会显示环境变量printenv | less: 命令printenv也能够列出特定变量的值： 在使用set命令时，如果不带选项或参数，那么只会显示shell变量、环境变量以及任何已定义的shell函数，与printenv命令不同的是，set命令的输出结果是按照字母顺序排列的set | less: 如需要查看单个变量的值，也可以使用echo命令 set命令和printenv命令都不能显示的一个环境元素是别名，要查看别名，需使用不带任何参数的alias命令 一些有趣的变量： 环境是如何建立的：用户登录系统后，bash程序就会启动并读取一系列称为启动文件的配置脚本，这些脚本定义了所有用户共享的默认环境。接下来，bash会读取更多存储在主目录下的用于定义个人环境的启动文件。这些步骤的确切顺序是由启动的shell会话类型决定的 修改环境： 文本编辑器： 使用文本编辑器配置文件：所有的文本编辑器都可以通过在命令行输入编辑器名称和需编辑的文件名称的方式启动，如果输入的文件不存在，编辑器会认为用户想要创建一个新的文件 扩展名.bak、.sav、.old和.orig是常用的标示备份文件的方法 激活修改：因为只有在启动shell会话时才会读取.bashrc，所以对.bashrc做出的修改只有在关闭shell终端会话并重启的时候才会生效。也可以使用命令强制命令bash重新读取.bashrc文件 在shell脚本和bash启动文件中，注释是以“#”开头的","categories":[{"name":"Apple、Linux","slug":"Apple、Linux","permalink":"http://example.com/categories/Apple%E3%80%81Linux/"}],"tags":[{"name":"《Linux命令行大全》","slug":"《Linux命令行大全》","permalink":"http://example.com/tags/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/"}]},{"title":"vi的基本使用：","slug":"Apple、Linux/《Linux命令行大全》/vi的基本使用：","date":"2018-10-21T16:00:00.000Z","updated":"2021-05-30T01:04:50.586Z","comments":true,"path":"2018/10/22/Apple、Linux/《Linux命令行大全》/vi的基本使用：/","link":"","permalink":"http://example.com/2018/10/22/Apple%E3%80%81Linux/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/vi%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%EF%BC%9A/","excerpt":"","text":"本文目录 使用vi的原因 启动、退出、保存vi vi的三种工作模式 移动光标 基本编辑 a.撤销命令 b.删除文本 c.剪切、复制和粘贴文本 d.合并行 查找和替换 a.行内搜索 b.搜索整个文件 c.全局搜索和替换 编辑多个文件 a.切换文件 b.载入更多的文件 c.文件之间的内容复制 d.插入整个文件 使用vi的原因： vi总是可用的，如果用户面前的系统没有图形界面，例如是远程服务器或者是本地系统的X配置不可用，那么vi就会成为救命的稻草。POSIX（一种UNIX系统的程序兼容标准）要求系统必须配备有vi vi是轻量级的软件，运行速度快。对很多任务来说，启动vi比在菜单中找到一个图形界面编辑器并等待几兆大小的编辑器载入要容易的多。另外，vi的设计还非常利于打字 用户不想被其他Linux和UNIX用户蔑视 启动、退出、保存vi：启动vi：vi 新文件名 退出、保存vi： 12345678910esc :w 保存文件但不退出vi :w file 将修改另外保存到file中，不退出vi（另存为）【此命令在以新名称保存文件的同时，并不更改编辑中的原文件的名称，当用户继续编辑时，编辑的还是原文件而不是新文件】 :w! 强制保存，不退出vi :wq 保存文件并退出vi :wq! 强制保存文件，并退出vi :q 不保存文件，退出vi :q! 不保存文件，强制退出vi :e! 放弃所有修改，从上次保存文件开始再编辑 命令模式下输入ZZ 保存当前文档并退出vi vi的三种工作模式： 如果用户阅读vi的说明文档，会困惑的发现命令模式被称为普通模式，而使用ex命令则被称为命令模式 移动光标（命令模式下）： l或右方向键：右移一位 h或左方向键：左移一位 j或下方向键：下移一行 k或上方向键：上移一行 数字0：至本文开头 基本编辑：在命令模式下按u键可以撤销用户多步操作 删除文本（命令模式下）： 12x：当前字符3x：当前字符和之后2个字符 剪切(d)、复制(y)和粘贴(p)文本： 12345678910111213141516171819命令d不只是删除文本，而是在剪切文本，用户每次使用d命令之后，都会复制删除的内容进缓存（类似剪贴板），然后用户就可以使用p命令将缓存中的内容粘贴到光标之后或使用P命令将内容粘贴到光标之前dd：当前行5dd：当前行和之后4行dW：当前字符到下一单词的起始d$：当前字符到当前行的末尾d0：当前字符到当前行的起始d^：当前字符到当前行下一个非空字符dG：当前行到文件末尾d20G：当前行到文件第20行yy：当前行5yy：当前行和之后4行yW：当前字符到下一单词的起始y$：当前字符到当前行的末尾Y0：当前字符到当前行的起始y^：当前字符到当前行下一个非空字符yG：当前行到文件末尾y20G：当前行到文件第20行 合并行(J)：vi在行的概念上非常严格，通常来说，将光标移动到行的末端并删除行的末尾字符并不能将此行与下一行合并 查找和替换:行内搜索：命令f在行内进行搜索，并将光标移至搜索到的下一个指定字符。比如命令fa就会将光标移动到本行下一处出现字符a的地方，在执行过一次行内搜索之后，输入分号可以使vi重复上一次搜索 搜索整个文件：命令“/”可以完成对单词或短语的搜索，当用户使用“/”命令后，一个“/”符号会出现在屏幕的底部。接下来，输入需要搜索的单词或短语，以Enter结束，光标就会移动到下一处包含被搜索字符串的地方，使用n命令可以重复此搜索 全局搜素和替换：vi使用ex命令来执行几行之内或者整个文件中的搜索和替换操作 12345678910111213141516:%s&#x2F;Line&#x2F;line&#x2F;g :冒号用于启动一条ex命令 %确定了操作作用的范围，%简洁的代表了从文件的第一行到最后一行（还可以用1,2表示从第一行到第二行），如果不明确指出命令的作用范围，那么命令只会在当前行生效 s指定了具体的操作：替换 &#x2F;Line&#x2F;line搜索和替换的文本 g代指global（全局），也就是说对搜索到的每一行的每一个实例进行替换，如果g缺失，那么只替换每一行第一个符合条件的实例 在命令末尾添加c，则命令在每次替换之前都会请求用户确认::%s&#x2F;Line&#x2F;line&#x2F;gc y：执行替换 n：跳过此次替换 a：执行此次替换和之后的所有替换 q或者ESC：停止替换 l：执行此次替换并退出替换，是last的缩写 Ctrl-E，Ctrl-Y：分别是向下滚动和向上滚动，能用于查看替换处的上下文 编辑多个文件:1vi file1 file2 file3… 打开多个文件 切换文件： 1:n下一个文件 :N上一个文件 当用户从一个文件切换到另一个的时候，vi要求用户必须先保存对当前文件做出的修改才能切换到其他文件。若要放弃对文件的修改并使vi强制切换到另一个文件，可在命令后添加感叹号！ 12:buffers 查看正在编辑的文件列表:buffer 2 切换到文件2 载入更多的文件： 1:e 文件名【使用此命令载入的文件不会响应:n或:N命令，而需要使用:buffer加文件编号来切换文件】 文件之间的内容复制：使用之前的复制粘贴命令即可 插入整个文件： 1:r text1 将text1文件内容插入到当前文件光标处","categories":[{"name":"Apple、Linux","slug":"Apple、Linux","permalink":"http://example.com/categories/Apple%E3%80%81Linux/"}],"tags":[{"name":"《Linux命令行大全》","slug":"《Linux命令行大全》","permalink":"http://example.com/tags/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/"}]},{"title":"定制提示符","slug":"Apple、Linux/《Linux命令行大全》/定制提示符：","date":"2018-10-20T16:00:00.000Z","updated":"2021-05-30T01:02:38.622Z","comments":true,"path":"2018/10/21/Apple、Linux/《Linux命令行大全》/定制提示符：/","link":"","permalink":"http://example.com/2018/10/21/Apple%E3%80%81Linux/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/%E5%AE%9A%E5%88%B6%E6%8F%90%E7%A4%BA%E7%AC%A6%EF%BC%9A/","excerpt":"","text":"系统的默认提示符：提示符中包含了用户名、主机名和当前的工作目录 提示符是由名为PS1（提示符字符串1）的环境变量定义的，echo命令可以帮助用户看到PS1的值 尝试设计提示符： 备份：在终端会话中，用户随时可以通过这个过程的逆操作来复原最初的提示符 如果提示符为空：那么用户不会得到任何提示 将提示符设置成最简略的内容： 在提示符中添加了一个铃声，每当系统显示提示符的时候，用户都会听到哔哔声，这在一些情况下可能会很有帮助，比如可以在一个耗时比较长的命令执行完毕时通知用户： 包括主机名和当天的时间信息： 添加颜色：字符颜色是由发送到终端仿真器的一个ANSI转义代码来控制的，该转义代码嵌入到了要显示的字符流中，控制代码不会打印到屏幕上，而是被终端解释为一条指令： 创造红色的提示符：但是此时用户输入的所有文字也变成红色了 修复这个问题： 设置文本的背景颜色，背景颜色不支持粗体属性： 文本除了正常(0)和粗体(1)属性外，还可以设置为下划线(4)、闪烁(5)和斜体(7)，为了维持好的品味，许多终端仿真器拒绝使用闪烁属性","categories":[{"name":"Apple、Linux","slug":"Apple、Linux","permalink":"http://example.com/categories/Apple%E3%80%81Linux/"}],"tags":[{"name":"《Linux命令行大全》","slug":"《Linux命令行大全》","permalink":"http://example.com/tags/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/"}]},{"title":"软件包管理","slug":"Apple、Linux/《Linux命令行大全》/软件包管理","date":"2018-10-19T16:00:00.000Z","updated":"2021-05-30T01:04:11.022Z","comments":true,"path":"2018/10/20/Apple、Linux/《Linux命令行大全》/软件包管理/","link":"","permalink":"http://example.com/2018/10/20/Apple%E3%80%81Linux/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%AE%A1%E7%90%86/","excerpt":"","text":"决定Linux发行版本质量最重要的因素是软件包系统和支持该发行版本社区的活力软件包管理是一种在系统上安装、维护软件的方法不同的Linux发行版用的是不同的软件包系统，并且原则上适用于一种发行版的软件包与其他版本是不兼容的。多数Linux发行版采用的不外乎两种软件包技术阵营，即Debian的.deb技术和Red Hat的.rpm技术，当然也有一些特例。比如Gentoo，Slackware和Foresight等软件包系统工作方式：Linux系统所有软件均可在网上找到，并且多数是以软件包文件的形式由发行商提供，其余则以可手动安装的源代码形式存在1）软件包文件2）库3）依赖关系4）高级和低级软件包工具：软件包管理系统通常包含两类工具—执行如安装、删除软件包文件等任务的低级工具和进行元数据搜索及提供依赖性解决的高级工具尽管所有Red-Hat系列版本都使用相同的低级工具（rpm），但使用的高级工具却不尽相同常见软件包管理任务：1）在库里面查找软件包2）安装库中的软件包3）安装软件包文件中的软件包4）删除软件包5）更新库中的软件包6）更新软件包文件中的软件包7）列出已安装的软件包列表8）判断软件包是否安装9）显示已安装软件包的相关信息10）查看某具体文件由哪个软件包安装得到","categories":[{"name":"Apple、Linux","slug":"Apple、Linux","permalink":"http://example.com/categories/Apple%E3%80%81Linux/"}],"tags":[{"name":"《Linux命令行大全》","slug":"《Linux命令行大全》","permalink":"http://example.com/tags/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/"}]},{"title":"基本概念","slug":"开发语言/C语言/基本概念","date":"2018-09-29T16:00:00.000Z","updated":"2021-05-21T01:45:34.494Z","comments":true,"path":"2018/09/30/开发语言/C语言/基本概念/","link":"","permalink":"http://example.com/2018/09/30/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","excerpt":"","text":"C语言的发展： C语言是从B语言发展而来的，B语言是从BCPL发展而来的，BCPL是从FORTRAN发展而来的 BCPL和B都支持指针间接方式，所以C也支持了 C语言还受到了PL/I的影响，还和PDP-II的机器语言有很大关系 1973年3月，第三版的Unix上出现了C语言的编译器 1973年11月，第四版的Unix(System Four)发布了，这个版本是完全用C语言重新写的 C语言标准： 1989年ANSI发布了一个标准：ANSI C 1990年ISO接受了ANSI的标准：C89 C的标准在1995年和1999年两次更新：C95和C99 所有的当代编译器都支持C99了 环境、开发环境和IDE： 环境：就是一个软件 开发环境：用于开发程序的一个软件，就是说这个软件是用来开发程序的 IDE：集成开发环境，集成的意思是多个功能集合在一起，所以就是集多种功能于一身的用来开发程序的软件 程序的执行： 解释：借助一个程序，那个程序能试图理解你的程序，然后按照你的要求执行 编译：借助一个程序，就像一个翻译，把你的程序翻译成计算机真正能懂的语言（机器语言写的程序），然后这个机器语言写的程序就能直接执行了 解释型语言VS编译型语言：语言本无解释和编译之分，解释型语言有特殊的计算能力，编译型语言有确定的运算性能 C需要被编译才能运行，所以你需要编辑器和编译器或者IDE（集成开发环境） 现代的编程语言在语法上的差异很小，几乎都是C-like语言，语言的能力和适用领域主要是由库和传统所决定的 程序是用特殊的编程语言写出来表达如何解决问题的，不是用编程语言来和计算机交谈，而是描述要求它如何做事情的过程和方法，我们要让计算机做计算，就需要找出计算的步骤，然后用编程语言写出来；计算机做的所有的事情都叫做计算，计算的步骤就是算法","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"编写第一个shell脚本：","slug":"Apple、Linux/《Linux命令行大全》/编写第一个shell脚本","date":"2018-09-29T16:00:00.000Z","updated":"2021-05-30T01:01:58.055Z","comments":true,"path":"2018/09/30/Apple、Linux/《Linux命令行大全》/编写第一个shell脚本/","link":"","permalink":"http://example.com/2018/09/30/Apple%E3%80%81Linux/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/%E7%BC%96%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AAshell%E8%84%9A%E6%9C%AC/","excerpt":"","text":"shell脚本是一个包含一系列命令的文件，shell读取这个文件，然后执行这些命令，就好像这些命令是直接输入到命令行中一样；shell既是一个强大的命令行接口，也是一个脚本语言解释器，大多数能够在命令行中完成的工作都可以在脚本中完成，反之亦然 为了成功创建和运行一个shell脚本，我们需要做三件事：1）编写脚本：shell脚本是普通的文本文件，所以我们需要一个文本编辑器来编辑它，最好文本编辑器可以提供“语法高亮”功能，从而能够看到脚本元素彩色代码视图，“语法高亮”可以定位一些常见的错误2）使脚本可执行：系统相当严格，它不会将任何老式的文本文件当作程序，所以我们需要将脚本文件的权限设置为允许执行3）将脚本放置在shell能够发现的位置：当没有显式指定路径名时，shell会自动的寻找某些目录，来查找可执行文件，为了最大程度的方便，我们将脚本放置在这些目录下 文本行中，在“#”符号后面的所有内容会被忽略“#!”字符序列是一种特殊的结构，称之为shebang，用来告知操作系统，执行后面的脚本应该使用的解释器的名字，每一个shell脚本都应该将其作为第一行 可执行权限：对于脚本，有两种常见的权限设置，权限为755的脚本，每个人都可以执行；权限为700的脚本，只有脚本的所有人才能执行，注意，为了能够执行脚本，它必须是可读的 脚本文件的位置：为了使脚本运行，我们必须显式指定脚本文件的路径 如果没有显式指定路径，则系统在查找一个可执行程序时，需要搜索一系列目录，这就是当我们在命令行中输入ls时，系统知道要执行/bin/ls的原因。/bin目录是系统会自动搜索的一个目录。 目录列表存放在名为PATH的环境变量中，这个PATH变量包含一个由冒号分隔开的待搜索目录的列表： 如果脚本位于该列表中的任何一个目录中，问题就解决了 这两个命令一样，为了减少输入，当在命令行中输入选项时，短选项更可取，但是在编写脚本时，长选项名可以提高可读性 缩进和行连接： 脚本和命令行的一个区别是，脚本可以使用制表符来实现缩进，但在命令行中，Tab键用来激活自动补齐功能","categories":[{"name":"Apple、Linux","slug":"Apple、Linux","permalink":"http://example.com/categories/Apple%E3%80%81Linux/"}],"tags":[{"name":"《Linux命令行大全》","slug":"《Linux命令行大全》","permalink":"http://example.com/tags/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/"}]},{"title":"macOS终端下执行第一个C程序","slug":"开发语言/C语言/macOS终端下执行第一个C程序","date":"2018-09-28T16:00:00.000Z","updated":"2021-05-21T01:43:49.530Z","comments":true,"path":"2018/09/29/开发语言/C语言/macOS终端下执行第一个C程序/","link":"","permalink":"http://example.com/2018/09/29/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/macOS%E7%BB%88%E7%AB%AF%E4%B8%8B%E6%89%A7%E8%A1%8C%E7%AC%AC%E4%B8%80%E4%B8%AAC%E7%A8%8B%E5%BA%8F/","excerpt":"","text":"在其他操作系统中，编译，加载，运行等规则会有所不同！ 1）新建一个文件夹“C语言程序演示” 2）在终端中cd进入这个新建的文件夹 3）在新文件夹中touch hello.c建立一个后缀名为.c的源程序 4）在hello.c源文件中写第一个C语言的代码 5）通过cc hello.c命令进行编译，如果源程序没有什么错误，编译过程将顺利进行，并生成一个可执行文件a.out【cc -c 源文件名称：编译，生成.o文件，叫做目标文件，存储的是.c文件中的代码对应的二进制指令；cc 目标文件名称：连接，为.o的目标文件添加启动代码，告诉编译器，要调用的函数在什么地方】 6）然后我们输入./a.out，即可运行a.out，打印出程序结果","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"数据类型","slug":"开发语言/C语言/数据类型","date":"2018-09-27T16:00:00.000Z","updated":"2021-05-21T01:45:25.143Z","comments":true,"path":"2018/09/28/开发语言/C语言/数据类型/","link":"","permalink":"http://example.com/2018/09/28/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"C数据类型、格式控制符整理123456789101112131415161718192021222324252627282930313233343536373839404142434445464748C数据类型：1⃣️基本数据类型：整型：char、short、int、long、long long(C99)浮点型：float、double、long double(C99)布尔型：bool(C99)1）char：字符类型，一个字节（一个字节&#x3D;八个比特），-128～+1272）short：短整型，通常为16位，两个字节，-32768～327673）int：取值范围取决于具体的机器，通常代表特定机器中整数的自然长度，通常为16位，其取值范围在-2147483648 ～ +2147483647之间，也有用32位表示的int类型4）long：长整型，四个字节，至少占32位存储单元，在某些机器上int与long类型的长度相同5）long long：八个字节6）float类型：取值范围取决于具体的机器，通常是32位，可以存储有效位数不超过7位的小数，取值范围一般在10^(-38)~10^(+38)之间7）double：双精度浮点型，64位，可以存储有效位数不超过16位的小数2⃣️构造类型：数组、结构体、枚举3⃣️指针类型4⃣️空类型：void5⃣️typedef自定义类型C格式控制符：不同类型的数据在变量中存储的形式是不一样的，所以在读取变量中的数据的时候，类型不同读取的方式也不同%hd：short%d：读取int整型，以十进制输出%o：读取int整型，以八进制输出（一个以0开始的数字字面量是8进制）%x：读取int整型，以十六进制输出（一个以0x开始的数字字面量是16进制，8进制和16进制只是如何把数字表达为字符串，与内部如何表达数字无关）%ld：long%lld：long long%hu：unsigned short%u：unsigned int%lu：unsigned long%llu：unsigned long longfloat和double类型的printf都使用%f或%e，float的scanf使用%f，double的scanf使用%lf%c：char类型，表示字符%s表示字符串%p：地址%%表示百分号（%）本身 数据类型的一些注意点 一个C语言程序，无论其大小如何，都是由函数和变量组成的，函数中包含一些语句，以指定所要执行的计算操作；变量则用于存储计算过程中使用的值。main是一个特殊的函数名，每个程序都从main函数的起点开始执行，每个程序都必须在某个位置包含一个main函数；函数之间进行数据交换的一种方法是调用函数向被调用函数提供一个值（称为参数）列表 变量的命名规则：变量名是由字母和数字组成的序列，但其第一个字符必须为字母，下划线“_”被看作是字母，通常用于命名较长的变量名，以提高其可读性。由于库例程的名字通常以下划线开头，因此变量名不要以下划线开头 变量就是内存中开辟的用来存储数据的那块空间，所以变量是用来存储数据的，我们声明一个变量，如果没有为这个变量赋值，这个变量是有值的，这个值是一个随机数、垃圾值 在同一个大括弧中不允许定义多个变量名相同的变量，不同大括弧可以 自动类型转换：当我们为变量赋值的时候，如果赋值的数据的类型和变量的类型不一致，这时候C系统会将赋值的数据的类型转换为变量的类型再赋值 如果某个算术运算符的所有操作数均为整型，则执行整型运算。但是，如果某个算术运算符有一个浮点型操作数和一个整型操作数，则在开始运算之前整型操作数将会被转换为浮点型 强制类型转换：要把一个量强制转换成另一个类型（通常是较小的类型）:(int)10.2，注意这时候的安全性，小的变量不总能表达大的量：(short)32768 强制类型转换只是从那个变量计算出了一个新的类型的值，它并不改变那个变量，无论是值还是类型都不改变 强制类型转换的优先级高于四则运算： 123double a&#x3D;1.0;double b&#x3D;2.0;int I&#x3D;(int)a&#x2F;b; 在printf函数的参数中，只能用\\n表示换行符，如果用程序的换行代替\\n，C编译器将会产生一条错误信息。printf函数永远不会自动换行，这样我们可以多次调用该函数以分阶段得到一个长的输出行。 printf函数并不是C语言本身的一部分，C语言本身并没有定义输入/输出功能。printf仅仅是标准库函数中一个有用的函数而已，这些标准库函数在C语言程序中通常都可以使用。 printf输出inf表示超过范围的浮点数，printf输出nan表示不存在的浮点数 scanf函数是一个阻塞式的函数，当CPU执行到这个函数的时候，CPU的执行就会暂停，不会继续往下执行了，并等待用户输入数据 scanf函数后面不要加\\n 如果没有特殊需要，只使用double，现代CPU能直接对double做硬件运算，性能不会比float差，在64位的机器上，数据存储的速度也不比float慢 #include&lt;stdbool.h&gt;之后就可以使用bool和true、false了 在C语言中如果我们直接写一个小数，那么这个小数的类型是double类型的，如果我们就是希望这个小数是一个float类型的，那么就在这个小数的后面加一个f/F char类型的变量中只能存储单个字符，并且这单个字符还要用单引号引起来；如果char类型的变量中存储的字符超过一个，那么它只会保存最后一个字符（char变量中可以存储一个空格，无法存储中文，因为在C语言中，一个中文占3个字节） 字符型变量是用来存储字符常量的变量。将一个字符常量存储到一个字符变量中，实际上是将该字符的ASCII码值（无符号整数）存储到内存单元中。【‘A’——65、‘a’——97、‘0’——48，为char变量赋值的时候可以直接赋值ASCII码】 所有整型都包括signed(带符号)和unsigned(无符号)两种形式，且可以表示无符号常量与十六进制字符常量； unsigned类型的数总是正值或0，如果char对象占用8位，那么unsigned char类型变量的取值范围为0～255，而signed char类型变量的取值范围则为-128～127（在采用对二的补码的机器上） 如果一个字面量常数想要表达自己是unsigned，可以在后面加U【255U】，用l或L表示long(long) unsigned的初衷并非扩展数能表达的范围，而是为了做纯二进制运算，主要是为了移位 无论是float还是double，默认都只显示小数点后6位(不足的用0补齐，多余六位的只保留六位)%.nf：表示显示小数点后n位%m.nf：如果变量整体的位数(小数点默认显示n位，无n的默认显示6位，小数点不足6位的在后面补0，大于6位的按6位计算)小于m，不足的地方就会以空格补齐（正数在前面补齐，负数在后面补齐）；如果变量整体的位数大于字符宽，那么实际有多少位就显示多少位(%0mf，不足的地方以0补齐)","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"scanf输入多个数据出现的问题","slug":"开发语言/C语言/scanf输入多个数据出现的问题","date":"2018-09-26T16:00:00.000Z","updated":"2021-05-21T01:43:39.414Z","comments":true,"path":"2018/09/27/开发语言/C语言/scanf输入多个数据出现的问题/","link":"","permalink":"http://example.com/2018/09/27/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/scanf%E8%BE%93%E5%85%A5%E5%A4%9A%E4%B8%AA%E6%95%B0%E6%8D%AE%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98/","excerpt":"","text":"如果使用scanf函数一次输入多个数据，只能是整型和浮点型，如果有char字符型混合输入，就会出现问题： 图中可以看到：num3的值并没有打印出来，出现这种情况的原因是什么呢？？？ 在执行scanf函数的时候，会让用户输入一个数据，数据输入完毕之后，并不是将这个数据直接赋值给变量，而是先将数据存储在缓冲区，输入的任何数据都会存储在缓冲区中 在执行scanf函数的时候，会先检查缓冲区中是否有数据，如果缓冲区中没有数据，那么就会让用户从键盘输入，如果缓冲区中有数据，直接从缓冲区中将数据拿出来，不会让用户输入数据 当从缓冲区中拿数据的时候，如果要拿的数据的类型是整型或者实型，如果拿到的数据的类型是空格、回车、Tab键，就会被自动忽略，继续往下拿；如果要拿的数据是字符型，不会忽略任何数据 我们来分析下面的一段程序：程序中要求用户输入一个整型数据num1，但是这个时候我们偏偏输入两个整型数据10、20，这个时候缓冲区其实有四个数据：10、空格、20、换行，执行第一个printf后结果为10，这是我们事先预料好的；当第二个scanf执行的时候，程序根本就不会让用户输入数据，因为缓冲区中已经有整型数据20了【当从缓冲区中拿数据的时候，如果要拿的数据的类型是整型或者实型，如果拿到的数据的类型是空格、回车、Tab键，就会被自动忽略，继续往下拿】，所以最终程序会直接打印出num2=20 让我们再回头看第一个程序：为什么num3的值打印出来的结果为空？？？执行完第11行程序以后，缓冲区中的数据为10、空格、2.5、空格、a、换行；打印num1、num2的值的时候，因为是整型或者浮点型，程序会自动忽略空格和换行，所以输出结果为num1=10，num2=2.500000；但是num3是一个字符型的数据，程序并不会忽略任何的数据，最后打印出来的结果为num3= ；【这里打印出来了一个空格，并不是空】 那这个时候就有问题了，如果scanf输入多个数据中包含字符型数据时，我就是想要输出来字符型数据，该怎么做呢？？？ 解决方案：通过rewind(stdin);这行代码把缓冲区中的数据全部清空，这个时候缓冲区中没有任何数据了 写C代码时，如果遇到整型、浮点型、字符型同时出现在scanf函数中的时候，要十分注意缓冲区中数据的情况！！","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"运算符和表达式","slug":"开发语言/C语言/运算符和表达式","date":"2018-09-25T16:00:00.000Z","updated":"2021-05-21T01:45:15.394Z","comments":true,"path":"2018/09/26/开发语言/C语言/运算符和表达式/","link":"","permalink":"http://example.com/2018/09/26/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/%E8%BF%90%E7%AE%97%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"","text":"C运算符、优先级整理123456789101112131415161718192021C运算符：赋值运算符【&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;】算术运算符【+、-、*、&#x2F;、%】关系运算符【&#x3D;&#x3D;、!&#x3D;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;】自增自减运算符【++、—-】逗号运算符【,】逻辑运算符【&amp;&amp;(与)、||(或)、！】取地址运算符【&amp;】C优先级：1）（）：从左到右2）! + - ++ —：从右到左（单目的+和-）3）* &#x2F; %：从左到右4）+ -：从左到右5）&lt; &lt;&#x3D; &gt; &gt;&#x3D;：从左到右6）&#x3D;&#x3D; !&#x3D;：从左到右7）&amp;&amp;：从左到右8）||：从左到右9）&#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D;：从右到左 运算符和表达式的一些注意点1）逃逸字符：用来表达无法印出来的控制字符或特殊字符，它由一个反斜杠”\\”开头，后面跟上另一个字符，这两个字符合起来，组成了一个字符：printf(“请分别输入身高的英尺和英寸，”“如输入\\“5 7 \\”表示5英尺7英寸：“); \\b：回退一格\\t：到下一个表格位\\n：换行\\r：回车\\”：双引号\\’：单引号\\：反斜杠本身 转义符只能是小写字母，每个转义符只能看作一个字符 垂直制表符“\\v”和换页符“\\f”对屏幕没有任何影响，但会影响打印机执行相应的操作 在C语言程序中，通常会用转义符表示不可打印的字符 2）如果参与算术表达式的操作数的类型不一致，那么这个算术表达式的结果的类型就是范围最大的那个类型 3）m % n的结果一定是在0～（n-1）之间 4）char类型的数据可以参与算术运算，当算术表达式中的操作数是一个char数据的时候，会先将这个char数据的ASCII码取出来代替，然后再参与算术运算，实际上它是一个int类型的数据在参与运算；char数据也可以参与比较运算 5）const是一个修饰符，加在int的前面，用来给这个变量加上一个const（不变的）的属性。这个const的属性表示这个变量的值一旦初始化，就不能再修改了，如果你试图对常量做修改，把它放在赋值运算符的左边，就会被编译器发现，指出为一个错误 6）无论是前自增表达式还是后自增表达式，都是将自身的值增加1 7）sizeof是一个运算符，给出某个类型或变量在内存中所占据的字节数：sizeof(int)、sizeof(i) sizeof是静态运算符，它的结果在编译时刻就决定了，不要在sizeof的括号里做运算，这些运算不会做的 8）逻辑运算是对逻辑量进行的运算，结果只有0或1，逻辑量是关系运算或逻辑运算的结果 逻辑非！【!a，如果a是true，结果就是false，如果a是false，结果是true】逻辑与&amp;&amp;【a &amp;&amp; b，如果a和b都是true，结果就是true，否则就是false】逻辑或||【a || b，如果a和b有一个是true，结果为true，两个都是false，结果为false】 x&gt;4 &amp;&amp; x&lt;6：像4&lt;x&lt;6这样的式子，不是C能正确计算的式子，因为4&lt;x的结果是一个逻辑值(0或1) 短路：逻辑运算是自左向右进行的，如果左边的结果已经能够决定结果了，就不会做右边的计算；对于&amp;&amp;，左边是false时就不做右边了；对于||，左边是true时就不做右边了 不要把赋值，包括复合赋值组合进表达式！a==6 &amp;&amp; b==1；a==6 &amp;&amp; b+=1 9）三元表达式、条件运算符（可以部分代替if else）： 1234567count = (count&gt;20) ? count-10 : count+10;if(count &gt; 20) count = count-10;else count = count+10; 10）逗号运算符：逗号用来连接两个表达式，并以其右边的表达式的值作为它的结果。逗号的优先级是所有的运算符中最低的，所以它两边的表达式会先计算；逗号的组合关系是自左向右，所以左边的表达式会先计算，而右边的表达式的值就留下来作为逗号运算的结果for（i=0，j=10；i&lt;j；i++，j—） 逗号表达式的目的并不是想要前面表达式的结果，而只是想要前面的表达式执行，要最后一个表达式的结果","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"控制流","slug":"开发语言/C语言/控制流","date":"2018-09-24T16:00:00.000Z","updated":"2021-05-21T01:45:06.429Z","comments":true,"path":"2018/09/25/开发语言/C语言/控制流/","link":"","permalink":"http://example.com/2018/09/25/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/%E6%8E%A7%E5%88%B6%E6%B5%81/","excerpt":"","text":"C选择结构、循环结构整理123456789101112131415161718192021222324252627282930313233341）if-else if-else2）switch-case：选择结构switch(表达式)&#123; case 值1: 执行代码; break; case 值2: 执行代码; break; case 值3: 执行代码; break; default: 执行代码; break;&#125;3）while循环4）do while循环【当循环体无论如何至少要执行一次的时候使用】do&#123; 循环体;&#125;while(条件表达式);5）for循环【当循环次数确定的时候，一般使用for循环；当循环次数不确定的时候，一般使用while循环】 控制流的一些注意点1）小技巧：Xcode中选中要对齐的代码：control+i，就会自动对齐 2）while循环应用场景： -循环体确定，循环次数也确定-循环体确定，循环的次数不确定，但是循环继续或者结束的条件确定-遍历指定范围的数-找出指定范围中符合特定条件的数-求累加和与平均值-找一堆数中的最大数和最小数-计数-穷举【一个一个试】 3）定义在一个大括弧中的变量，只能在这个大括弧中访问，出了大括弧，CPU立即将变量回收，无法访问到了: 123456789101112131415#include&lt;stdio.h&gt;int main(int argc,const char * argv[])&#123; int num=1; if(num &gt; 0)&#123; int age = 10; printf(&quot;age=%d\\n&quot;,age); &#125; printf(&quot;age=%d\\n&quot;,age); return 0;&#125; 我们可以自定义一个作用域来提前释放一个变量: 123456&#123; int i=1; printf(&quot;i=%d\\n&quot;,i);&#125; //这个时候，i就会在这里释放 4）无大括号else的匹配：else总是和最近的那个if匹配 5）if-else与switch-case的区别：前者从头开始遍历，后者直接跳转到符合要求处 每一个case块后面的break在语法上是可以不写的，break的意思代表立即结束整个switch-case结构，如果case块中没有break，那么就会直接穿透到下一个case中执行代码，直到遇到break才会结束switch结构，或者执行完 如果多个case块的处理逻辑是一样的，那么我们可以利用case穿透简写代码 switch后面的表达式任何类型都是可以的，除了实型 如果case块中要声明变量，那么这个case块就必须要使用大括弧 switch结构只能做等值判断，不能直接做范围判断，并且case后面的数据不能有变量 break的作用： 6）break和continue的区别： 如果在循环体中遇到了break，就会立即结束当前循环结构，但是还会继续外层循环 continue只能使用在循环体中，如果遇到了continue，会立即结束本次循环，然后回去判断循环条件【注意一下while循环体和for循环体不一样(前者可能包括i++，后者不包括)】 break和continue都只能作用于当前循环体！ 一道比较有意思的面试题： 7）while和do-while的区别：前者先判断条件后进循环体，后者先进循环体再判断条件 8）for循环中，三个表达式都可以省略，但是分号不能省略；如果第二个表达式省略，那么循环条件默认就是成立的 for循环三个表达式其实可以是任意的C语句： 9）goto：可以将CPU的执行跳转到当前函数的别的地方继续执行 当执行到goto语句的时候，CPU就会跳转到指定的标签的地方继续往下执行 goto语句也可以实现循环操作 goto可以往前跳，也可以往后跳，但是只能在当前函数中跳 取标签名下面的那一句代码不能是声明变量： 10）break和goto：","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"数组","slug":"开发语言/C语言/数组","date":"2018-09-23T16:00:00.000Z","updated":"2021-05-21T01:44:57.194Z","comments":true,"path":"2018/09/24/开发语言/C语言/数组/","link":"","permalink":"http://example.com/2018/09/24/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/%E6%95%B0%E7%BB%84/","excerpt":"","text":"局部变量的回收：在大括弧执行完毕之后，定义在这个大括弧中的变量就会被系统立即回收，声明变量的时候，其实是找系统为你从高地址向低地址分配指定字节数的连续空间，当变量回收的时候，其实就是告诉系统变量占用的字节不再使用了，可以分配给别的变量了，变量所占用的字节的数据是不会清空的【垃圾值的由来】 当将全局变量声明出来以后，系统会自动的将全局变量中的数据清零 一维数组： int arr[3];，其中所有的元素具有相同的数据类型，一旦创建，不能改变大小 数组中的元素在内存中是连续依次排列的： 遍历数组： 一维数组的初始化：1）使用这种方式初始化，数组的长度就不能使用变量了，但是使用宏可以【也可以干脆直接省略数组中的长度，这样数组的长度就是由大括弧中的数据的个数来决定的】 12int len&#x3D;3;int arr[len]&#x3D;&#123;10,20,30&#125;; &#x2F;&#x2F;错误 2）int arr[3]=&#123;10&#125;;这个时候数组的第0个元素的值是10，其他的元素的值被自动初始化为0，所以如果我们要将数组中的所有元素全部初始化为0，只需要在大括弧中写一个0就可以了 3）指定下标的初始化，其他的元素的值就自动初始化为0：int arr[3]=&#123;[1]=10,[2]=20&#125;; 声明一个数组，在内存中从高字节向低字节申请连续的（数组的长度*每个元素的字节数）个字节的空间 数组的元素的本质就是一个普通类型的变量，一个数组就是由多个普通类型的变量联合而成的 C语言的数组名中存储的就是数组的地址！ 数组的大小：sizeof(a)/sizeof(a[0])sizeof给出整个数组所占据的内容的大小，单位是字节；sizeof(a[0])给出数组中单个元素的大小，于是相除就得到了数组的单元个数；这样的代码，一旦修改数组中初始的数据，不需要修改遍历的代码 数组的赋值：数组变量本身不能被赋值，要把一个数组的所有元素交给另一个数组，必须采用遍历 1234for(int i=0;i&lt;length;i++)&#123; b[i]=a[i];&#125; 二维数组： 二维数组的长度一般认为是元素的个数【行*列】 二维数组的遍历：a[i][j]是一个int，表示第i行第j列上的单元 二维数组的初始化： 1）1.列数是必须给出的，行数可以由编译器来数2.每行一个{}，逗号分隔3.最后的逗号可以存在，有古老的传统 2） 12345int arr[3][4]=&#123;&#123;10&#125;,&#123;20&#125;,&#123;30&#125;&#125;;a[0][0]=10a[1][0]=20a[2][0]=30 其他元素会自动初始化为0 3）int arr[3][4]=&#123;10,20,30,40,50&#125;;按照顺序去初始化每一个元素，其他的元素的值就会被自动初始化为0 4）int arr[3][4]=&#123;[1]=&#123;10,20,30,40&#125;,[2]=&#123;50,60,70,80&#125;&#125;;给指定的行初始化，其他的元素自动初始化为0 二维数组从高地址向低地址申请了连续的（行列每一个元素占用的字节）个字节空间 二维数组在内存中仍然是一块连续的空间，并不是一个表格 求二维数组的长度的方法与一维数组一样：sizeof(arr)/sizeof(arr[0][0]); 求二维数组的行数：sizeof(arr)/sizeof(arr[0]); 求二维数组的列数：sizeof(arr[0])/sizeof(arr[0][0]); 如果函数的参数是一个一维数组，那么我们在传递的时候可以传递二维数组的某一行，二维数组的行其实是一个一维数组 二维数组也可以作为函数的参数【与一维数组类似】，但是其中形参的行数可以省略，列数不能省略，实参与形参的行数可以任意，实参的列数与形参的列数必须一致 解决方案【与一维数组稍微不同！】","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"函数","slug":"开发语言/C语言/函数","date":"2018-09-22T16:00:00.000Z","updated":"2021-05-21T01:44:47.611Z","comments":true,"path":"2018/09/23/开发语言/C语言/函数/","link":"","permalink":"http://example.com/2018/09/23/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/%E5%87%BD%E6%95%B0/","excerpt":"","text":"函数：函数是一块代码，接收零个或多个参数，做一件事情，并返回零个或一个值 循环：同一段代码反复不停的执行重用/复用：有一段代码，多个地方都要执行一次，但是不是反复不停的执行 定义在函数内部的变量，我们就叫做局部变量定义在函数外部的变量，我们就叫做全局变量，直接定义在源文件下面 局部变量只能在当前函数的内部访问全局变量从定义的地方开始，后面的所有函数中都可以访问这个全局变量 声明一个局部变量，如果没有为这个局部变量赋初始值，那么这个局部变量中的值是一个垃圾值；声明一个全局变量，如果没有为这个全局变量赋初始值，那么这个全局变量的初始值为0 如果全局变量的类型是char类型，并且我们也没有初始化，那么系统就会自动的为这个char变量赋值一个‘\\0’，代表一个不可见的字符，这个字符的ASCII码就是0 CPU执行声明局部变量的那句话的时候，才会在内存中声明局部变量，当作用域结束以后，就会自动回收；程序一启动，就在内存中创建全局变量，程序结束的时候全局变量才会被回收 可以定义一个和全局变量名称相同的局部变量【不建议】 声明在函数名称后面的小括弧中的变量就叫做这个函数的参数，参数实际上就是定义在函数内部的局部变量，所以在函数的内部不能再定义一个局部变量的名称和参数的名称一样 形参：声明在函数名的小括弧中的参数实参：在调用函数的时候，实际上为形参赋的值 return关键字用在函数体中，在函数体中如果遇到了return关键字，就会立即结束这个函数的执行 函数的声明(.h)和实现(.c) 当我们的程序的函数过多的时候，就要考虑分模块开发，一个模块至少包含两个文件，.h文件专门写函数的声明，.c文件专门写函数的实现 ，其他人想要调用函数，只需要导入头文件就可以了","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"值传递、地址传递","slug":"开发语言/C语言/值传递、地址传递","date":"2018-09-21T16:00:00.000Z","updated":"2021-05-21T01:43:30.132Z","comments":true,"path":"2018/09/22/开发语言/C语言/值传递、地址传递/","link":"","permalink":"http://example.com/2018/09/22/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/%E5%80%BC%E4%BC%A0%E9%80%92%E3%80%81%E5%9C%B0%E5%9D%80%E4%BC%A0%E9%80%92/","excerpt":"","text":"值传递：当函数参数的类型是int、float、double、char类型的时候，调用者传入一个实参变量，函数执行完毕之后，对实参变量的值没有影响 我们来分析下面一段代码：为啥test函数和main函数中num的值不一样呢？？ 程序执行原理： 地址传递：数组作为函数的参数时是地址传递，在传值的时候，是把实参数组名传递进来，数组名代表数组地址，所以这个时候传值传的是数组的地址，把数组的地址传递给了函数的参数，所以函数的参数也指向了实参数组【当数组作为函数的参数的时候，在函数的内部去修改这个参数数组的元素，其实修改的就是实参数组的元素】 当数组作为函数的参数的时候，那么在传递的时候，会丢失数组的长度，在函数的内部使用sizeof计算参数数组的字节数，得到的永远都是8 内部原理：如果函数的参数是一个数组，在声明这个参数的时候，并不会去真正的创建数组，而是去声明一个用来存储数组地址的指针变量，这个指针变量在内存中占据8个字节 那我们函数内部想要得到原来的数组长度该怎么办呢？？ 如果我们的函数的参数是一个数组，这个时候还必须得加一个参数，让调用者将这个数组的长度传递进来 如果我们为函数写了一个数组作为参数，其实编译器在编译的时候，已经把这个数组换成了指针【所以，以后为函数写一个数组参数的时候，不要写数组了，直接按照下图写一个指针】","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"指针作为函数的参数、返回值","slug":"开发语言/C语言/指针作为函数的参数、返回值","date":"2018-09-20T16:00:00.000Z","updated":"2021-05-21T01:43:20.750Z","comments":true,"path":"2018/09/21/开发语言/C语言/指针作为函数的参数、返回值/","link":"","permalink":"http://example.com/2018/09/21/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/%E6%8C%87%E9%92%88%E4%BD%9C%E4%B8%BA%E5%87%BD%E6%95%B0%E7%9A%84%E5%8F%82%E6%95%B0%E3%80%81%E8%BF%94%E5%9B%9E%E5%80%BC/","excerpt":"","text":"指针作为函数的参数： 当我们调用一个函数的时候，如果这个函数的参数是一个指针，那么我们就必须要为这个指针传递一个和指针类型相同的普通变量的地址，这个时候，在函数的内部去访问参数指针指向的变量的时候，其实访问的就是实参变量 下面的程序遇到了一个问题：函数内部只能返回一个数据 当函数需要返回多个数据的时候就可以使用指针作为函数的参数 解决方法：使用指针作为函数的参数，让调用者将自己的变量的地址传递到函数的内部，函数的内部通过指针就可以修改实参变量的值1）2） 指针作为函数的返回值： 可以返回局部变量的值，但是不能返回局部变量的地址 如果你就是要返回一个指针，那么你就要保证这个指针指向的空间在函数结束以后仍然存在，那么这个时候，就可以将空间申请在堆区，然后返回堆区的地址【使用完后一定要记得free】","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"指针","slug":"开发语言/C语言/指针","date":"2018-09-19T16:00:00.000Z","updated":"2021-05-21T01:44:37.874Z","comments":true,"path":"2018/09/20/开发语言/C语言/指针/","link":"","permalink":"http://example.com/2018/09/20/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/%E6%8C%87%E9%92%88/","excerpt":"","text":"变量的值：存储在变量中的数据叫做变量的值变量的地址：一个变量是由一个或多个字节组成的，组成这个变量的低字节的地址，就是这个变量的地址 变量的地址就叫做指针，指针变量就是专门用来存储地址的变量，专门用来存储另外一个变量的地址，那么我们就说这个指针变量指向了另外一个变量【它自己也有一个地址】，通过指针变量可以间接的访问指针变量指向的另外一个变量 int* p1;，代表声明了一个叫做p1的指针变量，这个指针变量的类型是int，这个代表这个变量不是一个普通变量，而是一个专门用来存储地址的指针变量【只能存储int变量的地址】 指针变量初始化只能给他一个地址：int* p1=&amp;num; 使用指针间接的操作指向的变量： 1234int num &#x3D; 10;int* p1&#x3D;&amp;num;*p1&#x3D;100; &#x2F;&#x2F;*p1代表指向的变量，也就是num 运算符&amp;：获得变量的地址，它的操作数必须是变量:int i;printf(“%p”,&amp;i); *是一个单目运算符，用来访问指针的值所表示的地址上的变量,可以做右值也可以做左值int k=*p;*p=k+1; 指针的一些注意点： 1）【指针+1】并不是在指针地址的基础之上加一个字节的地址，而是在这个指针地址的基础之上加一个单位变量占用的字节数【这个时候p1指向的就是num1】 2）p++的意思是取出p所指的那个数据，之后再把p移到下一个位置去，的优先级虽然高，但是没有++高，常用于数组类的连续空间操作 3）int* p1;我们声明一个指针变量，如果没有为其初始化，那么这个时候这个指针变量是有值的，这个值是一个垃圾值，，这个时候，这个指针变量就有可能指向了一块随机的空间，像这样的指针我们就叫做野指针【最好给他初始化一下：int *p1=NULL;NULL值代表指针变量不指向内存中的任何地址】 4）多个指针指向同一变量： 5）指针分好多类型，但无论指针什么类型，在内存中都是占据着8个字节，指向不同类型的指针是不能直接互相赋值的，这是为了避免用错指针 6）p1指针变量中存储的是num变量的地址，也就是num变量的低字节的地址，这个时候p1指针能操作多少个字节是根据指针的类型来决定的【这就是为什么指针要分类型，还必须跟指向的普通变量的类型一致】 一级指针和多级指针： 一个指针变量中存储的是一个普通变量的地址，像这样的指针，我们就叫做一级指针一个指针变量中存储的是一个一级指针变量的地址，像这样的指针，我们就叫做二级指针 声明多级指针： 一级指针只能存储普通变量的地址，二级指针只能存储一级指针变量的地址 指针与数组： 使用指针来遍历数组：1）2）本方法中不能换成*(arr++)，数组名代表数组的地址，而数组一旦创建，数组的地址就确定了，不能改变，所以我们不能为数组名赋值，不能修改数组名的值，但是可以使用数组名的值3）此方法跟前两种不一样 中括弧的本质【数组arr[0]等价于*(arr+0)，操作数组我们虽然使用中括弧下标来操作，实际上内部仍然是使用指针来操作】：指针变量后面可以使用中括弧，在中括弧中写上下标来访问数据：p1[n]完全等价于*(p1+n) 函数参数表中的数组实际上是指针,但是可以用数组的运算符[]进行运算 数组变量是特殊的指针：1）数组变量本身表达地址，所以int a[10];int *p=a;无需用&amp;取地址，但是数组的单元表达的是变量，需要用&amp;取地址2）[]运算符可以对数组做，也可以对指针做3）*运算符可以对指针做，也可以对数组做4）数组变量是const的指针，所以不能被赋值：int a[];int * const a; 如果一个数组是用来存储指针类型的数据的话，那么这个数组就叫做存储指针的数组：int* arr[3]; 指针之间的运算：指针与指针之间只能做减法运算，不能做加乘除运算，可以做比较运算 指针与指针之间可以做减法运算，结果是一个long类型的数据，代表两个指针指向的变量之间相差多少个单位变量 如果参与减法运算的两个指针不指向同一个数组，先求出两个指针的差/每一个指针变量对应的普通变量占用的字节数 指针的比较运算： 指向函数的指针：程序在运行的时候，会将程序加载到内存，程序中的函数肯定存在于内存的代码段中，我们可以声明一个指针，存储这个函数的地址，让这个指针指向这个函数，使用指针来间接的调用函数 一个指向函数的指针，并不是任意的函数都可以指向，要求指向的函数的返回值类型和参数类型必须要与指针的描述一样函数的名称就代表这个函数的地址：【注意不要在函数名后加小括弧，如果加了小括弧，就代表指向这个函数，拿到这个函数的返回值】 如果指向的函数有参数有返回值，调用的时候有参数就传参，有返回值就接！","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"const修饰基本数据类型","slug":"开发语言/C语言/const修饰基本数据类型","date":"2018-09-18T16:00:00.000Z","updated":"2021-05-21T01:43:00.416Z","comments":true,"path":"2018/09/19/开发语言/C语言/const修饰基本数据类型/","link":"","permalink":"http://example.com/2018/09/19/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/const%E4%BF%AE%E9%A5%B0%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","excerpt":"","text":"const int num = 10;一般情况下来说，被const修饰的变量具备一定程度上的不可变性【只能取值不能修改】 const修饰数组：const int arr[4]=&#123;10,20,30,40&#125;;，数组的元素的值不能修改,数组变量已经是const的指针了，这里的const表明数组的每个单元都是const int，所以必须通过初始化进行赋值 const修饰指针：1）2）int const * p1=&amp;num;效果同上3）int * const p1=&amp;num;p1的值不能修改，但是可以通过p1去修改p1指向的变量的值4）int const * const p1=&amp;num;既不能修改p1的值，也不能通过p1去修改p1指向的变量的值 当函数的参数是一个指针的时候，这个时候函数的内部是有可能会修改实参变量的值,所以要加一个const:","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"与申请字节空间有关的三个函数","slug":"开发语言/C语言/与申请字节空间有关的三个函数","date":"2018-09-17T16:00:00.000Z","updated":"2021-05-21T01:43:11.447Z","comments":true,"path":"2018/09/18/开发语言/C语言/与申请字节空间有关的三个函数/","link":"","permalink":"http://example.com/2018/09/18/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/%E4%B8%8E%E7%94%B3%E8%AF%B7%E5%AD%97%E8%8A%82%E7%A9%BA%E9%97%B4%E6%9C%89%E5%85%B3%E7%9A%84%E4%B8%89%E4%B8%AA%E5%87%BD%E6%95%B0/","excerpt":"","text":"#include&lt;stdlib.h&gt; 向堆区申请字节空间来使用：我们在堆区申请的字节空间，如果不主动释放，那么系统是不会释放掉的，除非程序结束 1）malloc()：向堆空间申请指定连续的字节空间来使用【参数是size_t类型的，也就是unsigned long】返回值是void *，返回的是创建的空间中第一个字节的地址 2）calloc()：calloc申请的字节，申请完之后，系统会将字节中的数据清零 3）realloc()：当我们发现我们之前在堆区申请的字节空间不够用的时候，就可以使用realloc函数来为我们的字节空间扩容【如果原来的空间后面还有剩余的空间，并且足够扩容，那么直接就扩容在后面；如果原来的空间后面有剩余空间但是剩下的空间不够扩容，就重新找一块足够的空间申请，将原来的数据拷贝过来，原来的空间被自动释放】 空间由3个变成4个，扩容了一个：","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"结构体(struct)","slug":"开发语言/C语言/结构体(struct)","date":"2018-09-16T16:00:00.000Z","updated":"2021-05-21T01:44:28.061Z","comments":true,"path":"2018/09/17/开发语言/C语言/结构体(struct)/","link":"","permalink":"http://example.com/2018/09/17/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/%E7%BB%93%E6%9E%84%E4%BD%93(struct)/","excerpt":"","text":"我们使用结构体仅仅是创建了一个新的数据类型而已，并没有声明变量，是在指定新的数据类型是由哪些成员组合而成 12345678struct Student&#123; char *name; int age; int score; float height;&#125;;struct Student stu; &#x2F;&#x2F;代表声明了一个struct Student类型的变量，变量名字叫做stu，这个时候stu才是一个变量，才会在内存中申请空间 结构体初始化： 结构和数组有点像，数组用[]运算符和下标访问其成员，结构用.运算符和名字访问其成员 匿名结构体：这个结构体类型没有名称，只能在声明结构体的同时就创建变量，不能单独的声明这个结构体类型的变量 12345struct&#123; char *barnd; char *color; int price;&#125;fengshan1; 声明一个结构体变量，如果没有为这个结构体变量的成员赋值，那么成员是有值的，这个值是一个垃圾值；在声明结构体变量的同时，只要初始化一个成员，其他的成员就会被自动的初始化为0 如果结构体类型是定义在函数的内部的，那么这个结构体类型只能在这个函数的内部使用，如果我们希望这个结构体类型可以用在所有的函数中，那么就把这个结构体类型定义在函数的外面 结构体之间比较： 相同结构体类型的变量之间是可以相互赋值的【值传递】 12struct Student xiaoMing&#x3D;&#123;&quot;小明&quot;,19,100&#125;;struct Student xiaoHua&#x3D;xiaoMing; 结构体数组： 结构体指针：结构体变量是一个变量，struct Student xiaoMing=&#123;“小明”,18,100&#125;; xiaoMing首先是一个变量，类型是struct Student类型的，既然xiaoMing是一个变量，那么这个变量肯定是有地址的，既然有地址，那么就可以声明一个指针指向这个结构体变量 结构指针：和数组不同，结构变量的名字并不是结构变量的地址，必须使用&amp;运算符struct date *pDate=&amp;today; 结构体作为函数参数：int numberOfDays(struct date d)整个结构可以作为参数的值传入函数这时候是在函数内新建一个结构变量，并复制调用者的结构的值也可以返回一个结构这与数组完全不同 结构体作为函数的参数【值传递】： 改成指针后就是地址传递了 结构体完全可以作为函数的返回值，在返回的时候，直接将这个结构体变量的值返回即可 如果你要返回结构体变量的地址，那么就要把这个结构体变量创建在堆区：","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"枚举(enum)","slug":"开发语言/C语言/枚举(enum)","date":"2018-09-15T16:00:00.000Z","updated":"2021-05-21T01:42:48.016Z","comments":true,"path":"2018/09/16/开发语言/C语言/枚举(enum)/","link":"","permalink":"http://example.com/2018/09/16/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/%E6%9E%9A%E4%B8%BE(enum)/","excerpt":"","text":"支持新创建一种数据类型，这个数据类型的变量的取值被限定，枚举值的名称都以枚举类型来开头 每一个枚举值/枚举项都有一个对应的整型的数，默认从0开始，依次的递增【实际上可以手动的赋值】，无论是什么类型的枚举变量，都是占据4个字节，枚举变量中真正存储的是枚举值所对应的整型的数 枚举类型名字通常并不真的使用，要用的是在大括号里的名字，因为它们就是常量符号，它们的类型是int，值依次从0到n 虽然枚举类型可以当作类型使用，但是实际上很少用","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"typedef","slug":"开发语言/C语言/typedef","date":"2018-09-14T16:00:00.000Z","updated":"2021-05-21T01:42:37.884Z","comments":true,"path":"2018/09/15/开发语言/C语言/typedef/","link":"","permalink":"http://example.com/2018/09/15/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/typedef/","excerpt":"","text":"为一个已经存在的数据类型取一个别名【为结构体和枚举取一个别名】 size_t其实就是unsigned long C语言提供了一个叫做typedef的功能来声明一个已有的数据类型的新名字，比如 typedef int Length;","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"联合(union)","slug":"开发语言/C语言/联合(union)","date":"2018-09-13T16:00:00.000Z","updated":"2021-05-21T01:42:28.065Z","comments":true,"path":"2018/09/14/开发语言/C语言/联合(union)/","link":"","permalink":"http://example.com/2018/09/14/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/%E8%81%94%E5%90%88(union)/","excerpt":"","text":"所有的成员共享一个空间同一时间只有一个成员是有效的union的大小是其最大的成员","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"进制","slug":"开发语言/C语言/进制","date":"2018-09-12T16:00:00.000Z","updated":"2021-05-21T01:44:18.343Z","comments":true,"path":"2018/09/13/开发语言/C语言/进制/","link":"","permalink":"http://example.com/2018/09/13/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/%E8%BF%9B%E5%88%B6/","excerpt":"","text":"C语言可以识别的进制：1）二进制【C语言中如果要写二进制，就加一个0b的前缀】2）八进制【加一个0前缀】3）十进制4）十六进制【加一个0x前缀】 %d：将整型变量中的数据以十进制的形式输出来%o：将整型变量中的数据以八进制的形式输出来%x：将整型变量中的数据以十六进制的形式输出来 数码：指的是这个数据的每一位数字数位：数码在这个数中的位置，从右到左依次递增，从0开始基数：就是进制位权：数码*（基数的数位次方） 进制转换： 1）十进制转换为二进制(除2取余法)：将这个数除以2，直到商为0，然后将余数倒序 【十进制转换为八进制/十六进制类似】 2）二进制转换为十进制(加权法)：将这个二进制的每个数码的位权相加【八进制/十六进制转换为十进制类似】 3）二进制转换为八进制(三合一)：将这个二进制从低位到高位每三个分成一组，高位不够补0，将每一组转换为十进制，将每一组的十进制连起来（二进制转换为十六进制类似） 4）八进制转换为二进制(一拆三)（十六进制转换为二进制类似） 5）八进制—&gt;十六进制；八—&gt;二—&gt;十六 6）十六进制—&gt;八进制：十六—&gt;二—&gt;八 内存中的数据存储单元是由一个一个的二进制位组成的，每一个二进制位只能存储0或者1；把内存中的八个二进制位分为一组，叫做一个字节，作为存储数据的最小基本单元 如果要往内存中存储数据的话，就至少要使用一个字节，这时候一个字节最多可以表示256种数据 123456单位换算：1字节(byte)&#x3D;8bit1KB&#x3D;1024byte1MB&#x3D;1024KB1GB&#x3D;1024MB1TB&#x3D;1024GB 我们在声明变量的时候，并不是去开辟一块空间，而是向系统在内存中申请一块指定字节数的连续的字节空间 char——1个字节int——4个字节float—4个字节double—8个字节 sizeof：计算常量、变量在当前系统上内存中占用的字节数【sizeof(数据类型)、sizeof(变量名)、sizeof(常量) 】 char类型的变量在内存中占据一个字节，char类型的常量在内存中占据四个字节 变量在内存中占据的字节数，会因为系统版本、编译器的不同而发生变化 原码、反码、补码都是二进制，只不过是二进制的不同表现形式，数据是以补码的二进制存储的 int类型的变量，在内存中占据4个字节，32位，为了可以表示正负性，使用最高位来表示正负，最高位为0，表示正，最高位为1，表示负，所以用来表示数据的只有31位，2^31，最小值为-2147483648，最大值为2147483647 原码：最高位表示符号位，剩下的位数是这个数的绝对值的二进制 反码：正数的反码就是其原码，负数的反码就是在其原码的基础之上，符号位不变，其他位取反 补码：正数的补码就是其原码，负数的补码就是在其反码的基础上+1 为什么数据要以补码的形式存储呢？因为计算机中只有加法没有减法，为了更加低成本的计算出结果，所以使用补码来存储数据 位运算指的是一个二进制数据的每一位来参与运算，前提是这个数必须是一个二进制 注意：1）参与位运算的二进制数据必须是补码形式2）位运算的结果也是二进制的补码形式 1）按位与(&amp;)：参与按位与的两个二进制数，如果都为1，那么结果就为1，只要有一位为0，那么结果就为0【3 &amp; 2 = 2】 任何数按位与1的结果是这个数的最低位，偶数的最低位一定是0，奇数的最低位一定是1，所以如果要判断这个数是奇数还是偶数，只要用这个数按位与1就可以了，如果结果为1，那么就是奇数，如果结果为0，那么就是偶数 2）按位或(|)：参与按位或的二进制数据，只要有一位是1，那么结果就为1，只有当两位都是0的时候结果才为0 3）按位取反(~)：单目运算符，将这个二进制数的每一位取反 4）按位异或(^)：参与按位异或的二进制的位，相同为0，不同为1 交换两个变量的值可以用异或运算 5）按位左移(&lt;&lt;)：参与按位左移运算的二进制数据，向左移动指定的位数，低位不够补0，高位溢出丢弃【左移运算有可能会改变其正负性；将一个数左移n位，相当于将这个数乘以2的n次方】 6）按位右移(&gt;&gt;)：参与按位右移运算的二进制数据，向右移动指定的位数，低位溢出丢弃，高位补符号位【右移运算不会改变其正负性；将一个数右移n位，相当于将这个数除以2的n次方】 变量的存储： 变量占用的字节空间一定是连续的，内存中存储数据的最小基本单位是字节，每个字节都有一个独一无二的内存地址，是一个十六进制的数 在为变量分配字节空间的时候，是从高地址向低地址分配的 存储在变量中的数据是以数据的二进制补码形式存储进去的【低位存储在低字节，高位存储在高字节】 变量的地址： 是组成这个变量的低字节的地址，使用&amp;取地址可以取出变量的地址 %p：取地址 声明变量就会占用内存空间，实际上程序在运行的时候，并不是说只有我们的代码才会声明变量，系统自己也会在内存中申请空间存储数据 short int：在内存中占据两个字节【最高位表示符号位，2^15，所以最小值：-32768，最大值：32767】【%hd来输出，%d可能会有问题】 long short：在32位系统下占4个字节，在64位占8个字节【%ld来输出】 long long int：在32位和64位下都占据8个字节【%lld来输出】 unsigned int，2^32，最高位不用来表示符号位了，所以最小值为0【%u来输出】 unsigned short int【%hu来输出】 字符数据在内存中存储的是这个字符所对应的ASCII码的二进制补码【实际上就是一个整数，可以用%d输出】 char变量是一个有符号的，最高位表示符号位 %c读取的时候，先从变量中读取出存储在变量中的整数，然后再去ASCII码表中去查找这个整数对应的字符，再显示这个字符","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"字符串","slug":"开发语言/C语言/字符串","date":"2018-09-11T16:00:00.000Z","updated":"2021-05-21T01:44:08.830Z","comments":true,"path":"2018/09/12/开发语言/C语言/字符串/","link":"","permalink":"http://example.com/2018/09/12/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/%E5%AD%97%E7%AC%A6%E4%B8%B2/","excerpt":"","text":"字符串数据在C中的存储方式：内存中的五大区域： 栈：是专门用来存储局部变量的，所有的局部变量都是声明在栈区域中 堆：允许程序员手动的从堆申请指定字节数的空间来使用 BSS段：是用来存储未初始化的全局变量和静态变量，声明一个全局变量，如果我们没有初始化，在程序运行最开始的时候，这个全局变量是没有初始化的，存储在BSS段【程序运行后系统就自动的初始化为0，并把初始化后的全局变量存储在数据段中】 数据段/常量区：用来存储已经初始化的全局变量、静态变量和常量数据 代码段：用来存储程序的代码/指令 字符串数据在C语言中有两种存储方式： 使用字符数组来存储：将字符串数据的每一个字符存储到字符数组中，并追加一个’\\0’代表存储结束char name[]=“jack”; 使用字符指针来存储字符串数据：直接将一个字符串数据初始化给一个字符指针char* name =“jack”; 1）当它们都是局部变量的时候： 字符数组是申请在栈区，字符串的每一个字符存储在这个字符数组的每一个元素中；指针变量是声明在栈区的，字符串数据是以字符数组的形式存储在常量区的，指针变量中存储的是字符串在常量区的地址 2）当它们作为全局变量的时候： 字符数组是存储在常量区的，字符串的每一个字符存储在这个字符数组的每一个元素中；指针变量也是存储在常量区的，字符串数据是以字符数组的形式存储在常量区的，指针变量中存储的是字符串在常量区的地址 3）以字符数组的形式存储字符串数据，不管是全局的还是局部的，都可以使用下标去修改字符数组中的每一个元素；以字符指针的形式存储字符串数据，不管是全局的还是局部的，都不能通过指针去修改指向的字符串数据 当我们以字符指针的形式要将字符串数据存储到常量区的时候，并不是直接将字符串存储到常量区，而是先检查常量区中是否有相同内容的字符串，如果有直接将这个字符串的地址拿过来返回，如果没有，才会将这个字符串数据存储在常量区中 当我们重新为字符指针初始化一个字符串的时候，并不是修改原来的字符串，而是重新的创建了一个字符串，把这个新的字符串的地址赋值给它 几个比较容易混的点： 这样是可以的，但是不是把“jack”改成了“rose”，而是重新创建了一个“rose”，把“rose”的地址赋值给namechar *name = &quot;jack&quot;;name = &quot;rose&quot;; 这样是不行的，name是数组名，代表数组的地址，不能为数组名赋值char name[]=&quot;jack&quot;;name = &quot;rose&quot;; 这样做是可以的，直接修改数组的元素name[0]=&#39;r&#39;;name[1]=&#39;o&#39;;name[2]=&#39;s&#39;;name[3]=&#39;e&#39;;name[4]=&#39;\\0&#39;; 统计字符串中某一个字符出现的次数： 使用字符指针数组来存储多个字符串数据：这是一个一维数组，每一个元素的类型是char指针：char* names[4] = &#123;&quot;jack&quot;,&quot;rose&quot;,&quot;lily&quot;,&quot;lilei&quot;&#125;; 在声明字符数组的同时，如果初始化了部分元素，那么其他的字符会被初始化为’\\0’，‘\\0’是一个字符，是一个不可见的字符，打印出来啥都没有，这个字符的ASCII码是0 在C语言中字符串数据必须要用双引号引起来 C语言中存储字符串数据：将字符串数据的每一个字符存储到字符数组中，并在后面追加一个’\\0’代表字符串存储完毕 最根本的方式存储字符串：char name[5]=&#123;‘j’,’a’,’c’,’k’,’\\0’&#125;; char name[]=&#123;“jack”&#125;;系统会自动的将这个字符串中的每一个字符存储到字符数组中，并自动的追加一个’\\0’ 最常用的方式：char name[]=“jack”; 如果我们使用字符数组存储字符串数据的时候，没有指定这个字符数组的长度，那么这个时候这个字符数组的长度为字符串长度+1 我们在使用字符数组存储字符串数据的时候，最好不要指定长度了 如果在声明一个字符数组的同时我们就初始化一个字符数据给这个数组，那么这个时候是可以用中文的【这个字符数组的长度为7，因为一个中文占3个字节】 使用格式控制符%s就可以输出存储在字符数组中的字符串数据【%s从给定的数组的地址开始，一个字节一个字节的输出，直到遇到’\\0’为止】 无需&amp; 使用scanf函数：1）如果用户输入的字符串数据在给定的字符数组中存储不下的时候，就会运行报错2）用户在输入字符串的时候，如果输入了空格，就会认为输入结束 不能使用sizeof去计算字符数组的长度来得到字符串的长度，因为有可能字符串数据存储在字符数组中只占了一部分空间解决方法： 字符串常量：“Hello”会被编译器变成一个字符数组放在某处，这个数组的长度是6，结尾还有表示结束的0两个相邻的字符串常量会被自动连接起来 C语言的字符串是以字符数组的形态存在的，不能用运算符对字符串做运算，通过数组的方式可以遍历字符串，唯一特殊的地方是字符串字面量可以用来初始化字符数组 char *s=“Hello,world!”;s是一个指针，初始化为指向一个字符串常量，由于这个常量所在的地方，所以实际上s是const char *s，但是由于历史的原因，编译器接受不带const的写法，但是试图对s所指的字符串做写入会导致严重的后果如果需要修改字符串，应该用数组：char s[]=“Hello,world!”;数组：这个字符串在这里，作为本地变量空间自动被回收指针：这个字符串不知道在哪里，处理参数，动态分配空间 如果要构造一个字符串，用数组如果要处理一个字符串，用指针 在%和s之间的数字表示最多允许读入的字符的数量，这个数字应该比数组的大小小一 stdio.h文件：puts()函数：用来输出字符串的【优点是输出完毕之后自动换行，缺点是只能输出字符串，也不能使用占位符】 fputs()函数：将字符串数据输出到指定的流中【标准输出流：控制台；文件流：磁盘上的文件】输出到标准输出流中：将字符串存储到文件中：1）要先声明一个文件指针，指向磁盘上的文件【fopen函数可以创建一个指向文件的指针】2）使用fputs()函数将字符串写入到指定的文件流中3）写完之后一定要记得使用fclose()函数将这个文件关闭 gets()函数：从控制台接收用户输入一个字符串数据【优点是当用户输入的数据包含空格的时候，会连空格一起接收；缺点是和scanf函数一样不安全，当用来存储字符串的数据的字符数组的长度不够的时候，程序就会崩溃】 fgets()函数：从指定的流中读取字符串，这个流可以是标准输入流：控制台，也可以是文件流1）从标准输入流中读取数据解决方案：2）从文件流中读取数据 string.h头文件：strlen,strcmp,strcpy,strcat,strchr,strstrstrlen:size_t strlen(const char *s);返回s的字符串长度（不包括结尾的0） strcmp:int strcmp(const char *s1,const char *s2);比较两个字符串，返回：0: s1==s21: s1&gt;s2-1: s1&lt;s2int strncmp(const char *s1,const char *s2,size_t n);只比较前几个字符 strcpy:【存储字符串1的字符数组长度不够，无法存储字符串2，这个时候运行就会崩溃】char *strcpy(char *restrict dst,const char *restrict src);把src的字符串拷贝到dst，restrict表明src和dst不重叠返回dst,为了能链起代码来 复制一个字符串：char *dst=(char *)malloc(strlen(src)+1);strcpy(dst,src);把name2拷贝到name1: strcat:【接的时候会把第一个字符串后的’\\0’干掉】char *strcat(char *restrict s1,const char *restrict s2);把s2拷贝到s1的后面，接成一个长的字符串返回s1s1必须具有足够的空间 strcpy,strcat不安全！！ 安全版本：char *strncpy(char *restrict dst,const char *restrict src,size_t n);char *strncat(char *restrict s1,const char *restrict s2,size_t n); 字符串中找字符：char *strchr(const char *s,int c);char *strrchr(const char *s,int c);返回NULL表示没有找到 字符串中找字符串：char *strstr(const char *s1,const char *s2);char *strcasestr(const char *s1,const char *s2);","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]},{"title":"预处理指令","slug":"开发语言/C语言/预处理指令","date":"2018-09-10T16:00:00.000Z","updated":"2021-05-21T01:43:58.783Z","comments":true,"path":"2018/09/11/开发语言/C语言/预处理指令/","link":"","permalink":"http://example.com/2018/09/11/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/C%E8%AF%AD%E8%A8%80/%E9%A2%84%E5%A4%84%E7%90%86%E6%8C%87%E4%BB%A4/","excerpt":"","text":"C语言的代码主要分为两类：1）C代码2）预处理代码：以#开头的代码 预处理指令的分类：1）文件包含指令：#include2）宏定义：#define【可以将一段C代码定义为一个标识，使用这个标识就可以使用这段代码】3）条件编译指令：#if【只编译指定的C代码为二进制指令】 预处理指令的特点：1）都是以#开头2）预处理指令的后面没有分号 文件包含指令：文件包含指令作用：可以将指定的文件的内容拷贝到写指令的地方#include”文件路径”#include&lt;文件路径&gt; 绝对路径：路径从根目录开始相对路径：相对于当前这个文件夹的路径，和当前文件路径相同的部分删除【一般把导入文件放到和main.c相同的文件夹下】 #include”文件路径”和#include&lt;文件路径&gt;的寻找指定文件的方式不一样：1）前者先去当前源文件所在的目录中查找这个文件，如果有直接包含，如果没有再去系统自带的编译器目录中查找，如果有直接包含，如果没有报错2）后者直接去编译器目录中查找，如果有包含，没有报错 宏定义：它是一个预处理指令，所以它在编译之前执行，可以将一段C代码定义为一个标识，使用这个标识就可以使用这段代码 宏的原理：在预编译的时候，就会执行源文件中的预处理指令，会将C代码中使用宏名的地方替换为宏值【任意的C代码】，将C代码中的宏名替换为宏值的过程叫做宏替换/宏代换 在定义宏的时候不会去检查语法，只有当完成了宏替换的时候，才会去检查替换以后是否符合语法规范 如果宏值是一个表达式，那么宏值并不是这个表达式的结果，而是这个表达式本身 如果宏值中包括一个变量名，那么在使用这个宏之前必须要保证这个变量已经存在 【默认情况下，宏从定义的地方一直到文件结束都可以使用，#undef 宏名可以让指定的宏提前失效】#define N 10 只能在中间使用这个宏，#undef N下面宏失效 #undef N 字符串中如果出现了宏名，系统不会认为这是一个宏，而是认为是字符串的一部分 如果宏后面跟了分号，那么就会把分号作为宏值的一部分 我们在定义宏的时候，宏名是可以带参数的，在这个宏值中可以直接使用这个参数，如果使用的宏有参数，那么就必须要在使用它的时候为这个宏的参数传值 宏不是函数，所以宏的参数不需要加类型说明符 为带参数的宏传值的时候，是本色传递，如果传递一个变量，并不是传递这个变量的值 条件编译指令：默认的情况下，所有的C代码都会被编译为二进制代码，条件编译指令可以让编译器只编译指定部分的代码 在预编译的时候，如果条件成立，就会将其中的C代码编译成二进制指令，如果条件不成立，就不会将其中的C代码编译成二进制指令【条件只能是宏，不能是变量】 If语句无论如何全部都要被编译为二进制指令，条件编译指令只会将符合条件的C代码编译为二进制指令 如果定义了指定的宏，就编译其中的代码 无论一个文件被#include多少次，只希望它最终只会被包含一次 static和extern：C语言中的关键字，用来修饰变量和函数 如果局部变量被static修饰，这个变量就叫做静态变量，静态变量不再存储在栈区域，而是存储在常量区，当函数执行完之后，这个静态变量不会被回收，后面再去执行这个函数的时候，声明静态变量的这句话就不会再执行了，直接略过，直接使用这个静态变量的值【静态变量只有一份】 extern不能修饰局部变量 当我们分模块开发的时候，如果要在模块中声明全局变量，全局变量的声明要写在.h文件中，全局变量的实现要写在.c文件中【如果将全局变量定义在模块中，这个全局变量就必须要使用static或者extern修饰】 如果定义在模块中的全局变量使用extern修饰，这个模块中的全局变量就可以跨模块访问；使用static修饰，这个模块中的全局变量就只能在当前模块中访问 如果函数被extern修饰，那么这个函数可以跨模块调用；如果函数被static修饰，那么这个函数只能在当前模块中调用，无法跨模块调用 如果函数没有写static或者extern，那么这个函数默认就是extern","categories":[{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]}],"categories":[{"name":"《剑指Offer(第2版)》","slug":"《剑指Offer-第2版-》","permalink":"http://example.com/categories/%E3%80%8A%E5%89%91%E6%8C%87Offer-%E7%AC%AC2%E7%89%88-%E3%80%8B/"},{"name":"Apple、Linux","slug":"Apple、Linux","permalink":"http://example.com/categories/Apple%E3%80%81Linux/"},{"name":"开发语言","slug":"开发语言","permalink":"http://example.com/categories/%E5%BC%80%E5%8F%91%E8%AF%AD%E8%A8%80/"},{"name":"LeetCode🌟","slug":"LeetCode🌟","permalink":"http://example.com/categories/LeetCode%F0%9F%8C%9F/"},{"name":"计算机基础","slug":"计算机基础","permalink":"http://example.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"},{"name":"数据结构、算法笔记","slug":"数据结构、算法笔记","permalink":"http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%81%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"《剑指Offer(第2版)》_链表","slug":"《剑指Offer-第2版-》-链表","permalink":"http://example.com/tags/%E3%80%8A%E5%89%91%E6%8C%87Offer-%E7%AC%AC2%E7%89%88-%E3%80%8B-%E9%93%BE%E8%A1%A8/"},{"name":"macOS、Ubuntu Server","slug":"macOS、Ubuntu-Server","permalink":"http://example.com/tags/macOS%E3%80%81Ubuntu-Server/"},{"name":"Swift","slug":"Swift","permalink":"http://example.com/tags/Swift/"},{"name":"LeetCode_贪心算法","slug":"LeetCode-贪心算法","permalink":"http://example.com/tags/LeetCode-%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"},{"name":"LeetCode_双指针","slug":"LeetCode-双指针","permalink":"http://example.com/tags/LeetCode-%E5%8F%8C%E6%8C%87%E9%92%88/"},{"name":"《汇编语言(第4版)》","slug":"《汇编语言-第4版-》","permalink":"http://example.com/tags/%E3%80%8A%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80-%E7%AC%AC4%E7%89%88-%E3%80%8B/"},{"name":"《MySQL必知必会》","slug":"《MySQL必知必会》","permalink":"http://example.com/tags/%E3%80%8AMySQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"},{"name":"操作系统原理","slug":"操作系统原理","permalink":"http://example.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%8E%9F%E7%90%86/"},{"name":"LeetCode_查找算法","slug":"LeetCode-查找算法","permalink":"http://example.com/tags/LeetCode-%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"},{"name":"计算机网络原理","slug":"计算机网络原理","permalink":"http://example.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"},{"name":"LeetCode_链表","slug":"LeetCode-链表","permalink":"http://example.com/tags/LeetCode-%E9%93%BE%E8%A1%A8/"},{"name":"Objective-C","slug":"Objective-C","permalink":"http://example.com/tags/Objective-C/"},{"name":"C++","slug":"C","permalink":"http://example.com/tags/C/"},{"name":"《Linux命令行大全》","slug":"《Linux命令行大全》","permalink":"http://example.com/tags/%E3%80%8ALinux%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%A4%A7%E5%85%A8%E3%80%8B/"},{"name":"C语言","slug":"C语言","permalink":"http://example.com/tags/C%E8%AF%AD%E8%A8%80/"}]}